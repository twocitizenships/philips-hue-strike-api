{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lights = void 0;\n\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\n\nconst ApiError_1 = require(\"../ApiError\");\n\nconst lights_1 = require(\"./http/endpoints/lights\");\n\nconst LightIdPlaceholder_1 = require(\"./placeholders/LightIdPlaceholder\");\n\nconst HueRateLimiter_1 = require(\"./HueRateLimiter\");\n\nconst LIGHT_ID_PARSER = new LightIdPlaceholder_1.LightIdPlaceholder();\n\nclass Lights extends ApiDefinition_1.ApiDefinition {\n  constructor(hueApi) {\n    super(hueApi);\n    this._lightStateLimiter = new HueRateLimiter_1.HueRateLimiter(hueApi.name, 'lights', hueApi.rateLimitConfig.lightRateLimit);\n  }\n\n  getAll() {\n    return this.execute(lights_1.lightsApi.getAllLights);\n  }\n\n  getLight(id) {\n    const lightId = getLightId(id);\n    return this.getAll().then(lights => {\n      const found = lights.filter(light => light.id === lightId);\n\n      if (found.length === 0) {\n        throw new ApiError_1.ApiError(`Light ${lightId} not found`);\n      }\n\n      return found[0];\n    });\n  } //TODO\n  // /**\n  //  * @deprecated since 4.0. Use getLight(id) instead.\n  //  * @param id {number} The ide of the light to get.\n  //  * @returns {Promise<Light>}\n  //  */\n  // getLightById(id: LightId) {\n  //   util.deprecatedFunction('5.x', 'lights.getLightById(id)', 'Use lights.getLight(id) instead.');\n  //   return this.getLight(id);\n  // }\n\n\n  getLightByName(name) {\n    return this.getAll().then(lights => {\n      return lights.filter(light => light.name === name);\n    });\n  }\n  /** Discovers the \"new\" lights detected by the Bridge. */\n\n\n  getNew() {\n    return this.execute(lights_1.lightsApi.getNewLights);\n  }\n  /** Starts a search for \"new\"/undiscovered Lights by the bridge. This can take up to 30 seconds to complete. */\n\n\n  searchForNew() {\n    return this.execute(lights_1.lightsApi.searchForNewLights);\n  }\n\n  getLightAttributesAndState(id) {\n    return this.execute(lights_1.lightsApi.getLightAttributesAndState, {\n      id: id\n    });\n  }\n\n  getLightState(id) {\n    return this.getLightAttributesAndState(id).then(result => {\n      // @ts-ignore\n      return result.state;\n    });\n  }\n  /**\n   * Sets the current state for the Light to desired settings.\n   */\n\n\n  setLightState(id, state) {\n    const lightId = getLightId(id);\n    return this.hueApi.getLightDefinition(lightId).then(device => {\n      if (!device) {\n        throw new ApiError_1.ApiError(`Light with id:${lightId} was not found on this bridge`);\n      }\n\n      return this._setLightState(id, state, device);\n    });\n  }\n  /**\n   * Renames a Light on the Bridge to the specified name in the Light instance.\n   */\n\n\n  renameLight(light) {\n    return this.execute(lights_1.lightsApi.setLightAttributes, {\n      id: light,\n      light: light\n    });\n  } // /**\n  //  * @deprecated since 4.x, use renameLight(light) instead\n  //  * @param id {int} The Light to rename.\n  //  * @param name {string} The new name.\n  //  * @returns {Promise}\n  //  */\n  // rename(id, name) {\n  //   if (arguments.length === 1) {\n  //     util.deprecatedFunction('5.x', 'lights.rename(id, name)', 'Use lights.renameLight(light) instead.');\n  //     return this.renameLight(id);\n  //   } else {\n  //     util.deprecatedFunction('5.x', 'lights.rename(id, name)', 'Use lights.renameLight(light) instead.');\n  //     return this.execute(lightsApi.setLightAttributes, {id: id, name: name});\n  //   }\n  // }\n\n\n  deleteLight(id) {\n    return this.execute(lights_1.lightsApi.deleteLight, {\n      id: id\n    });\n  }\n\n  _setLightState(id, state, device) {\n    const self = this;\n    return this._lightStateLimiter.schedule(() => {\n      return self.execute(lights_1.lightsApi.setLightState, {\n        id: id,\n        state: state,\n        device: device\n      });\n    });\n  }\n\n}\n\nexports.Lights = Lights;\n\nfunction getLightId(id) {\n  return LIGHT_ID_PARSER.getValue({\n    id: id\n  });\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Lights.js"],"names":["Object","defineProperty","exports","value","Lights","ApiDefinition_1","require","ApiError_1","lights_1","LightIdPlaceholder_1","HueRateLimiter_1","LIGHT_ID_PARSER","LightIdPlaceholder","ApiDefinition","constructor","hueApi","_lightStateLimiter","HueRateLimiter","name","rateLimitConfig","lightRateLimit","getAll","execute","lightsApi","getAllLights","getLight","id","lightId","getLightId","then","lights","found","filter","light","length","ApiError","getLightByName","getNew","getNewLights","searchForNew","searchForNewLights","getLightAttributesAndState","getLightState","result","state","setLightState","getLightDefinition","device","_setLightState","renameLight","setLightAttributes","deleteLight","self","schedule","getValue"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Lights = void 0;\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\nconst ApiError_1 = require(\"../ApiError\");\nconst lights_1 = require(\"./http/endpoints/lights\");\nconst LightIdPlaceholder_1 = require(\"./placeholders/LightIdPlaceholder\");\nconst HueRateLimiter_1 = require(\"./HueRateLimiter\");\nconst LIGHT_ID_PARSER = new LightIdPlaceholder_1.LightIdPlaceholder();\nclass Lights extends ApiDefinition_1.ApiDefinition {\n    constructor(hueApi) {\n        super(hueApi);\n        this._lightStateLimiter = new HueRateLimiter_1.HueRateLimiter(hueApi.name, 'lights', hueApi.rateLimitConfig.lightRateLimit);\n    }\n    getAll() {\n        return this.execute(lights_1.lightsApi.getAllLights);\n    }\n    getLight(id) {\n        const lightId = getLightId(id);\n        return this.getAll()\n            .then(lights => {\n            const found = lights.filter((light) => light.id === lightId);\n            if (found.length === 0) {\n                throw new ApiError_1.ApiError(`Light ${lightId} not found`);\n            }\n            return found[0];\n        });\n    }\n    //TODO\n    // /**\n    //  * @deprecated since 4.0. Use getLight(id) instead.\n    //  * @param id {number} The ide of the light to get.\n    //  * @returns {Promise<Light>}\n    //  */\n    // getLightById(id: LightId) {\n    //   util.deprecatedFunction('5.x', 'lights.getLightById(id)', 'Use lights.getLight(id) instead.');\n    //   return this.getLight(id);\n    // }\n    getLightByName(name) {\n        return this.getAll().then(lights => {\n            return lights.filter(light => light.name === name);\n        });\n    }\n    /** Discovers the \"new\" lights detected by the Bridge. */\n    getNew() {\n        return this.execute(lights_1.lightsApi.getNewLights);\n    }\n    /** Starts a search for \"new\"/undiscovered Lights by the bridge. This can take up to 30 seconds to complete. */\n    searchForNew() {\n        return this.execute(lights_1.lightsApi.searchForNewLights);\n    }\n    getLightAttributesAndState(id) {\n        return this.execute(lights_1.lightsApi.getLightAttributesAndState, { id: id });\n    }\n    getLightState(id) {\n        return this.getLightAttributesAndState(id).then(result => {\n            // @ts-ignore\n            return result.state;\n        });\n    }\n    /**\n     * Sets the current state for the Light to desired settings.\n     */\n    setLightState(id, state) {\n        const lightId = getLightId(id);\n        return this.hueApi.getLightDefinition(lightId)\n            .then(device => {\n            if (!device) {\n                throw new ApiError_1.ApiError(`Light with id:${lightId} was not found on this bridge`);\n            }\n            return this._setLightState(id, state, device);\n        });\n    }\n    /**\n     * Renames a Light on the Bridge to the specified name in the Light instance.\n     */\n    renameLight(light) {\n        return this.execute(lights_1.lightsApi.setLightAttributes, { id: light, light: light });\n    }\n    // /**\n    //  * @deprecated since 4.x, use renameLight(light) instead\n    //  * @param id {int} The Light to rename.\n    //  * @param name {string} The new name.\n    //  * @returns {Promise}\n    //  */\n    // rename(id, name) {\n    //   if (arguments.length === 1) {\n    //     util.deprecatedFunction('5.x', 'lights.rename(id, name)', 'Use lights.renameLight(light) instead.');\n    //     return this.renameLight(id);\n    //   } else {\n    //     util.deprecatedFunction('5.x', 'lights.rename(id, name)', 'Use lights.renameLight(light) instead.');\n    //     return this.execute(lightsApi.setLightAttributes, {id: id, name: name});\n    //   }\n    // }\n    deleteLight(id) {\n        return this.execute(lights_1.lightsApi.deleteLight, { id: id });\n    }\n    _setLightState(id, state, device) {\n        const self = this;\n        return this._lightStateLimiter.schedule(() => {\n            return self.execute(lights_1.lightsApi.setLightState, { id: id, state: state, device: device });\n        });\n    }\n}\nexports.Lights = Lights;\nfunction getLightId(id) {\n    return LIGHT_ID_PARSER.getValue({ id: id });\n}\n"]},"metadata":{},"sourceType":"script"}