{"ast":null,"code":"import { BridgeTime } from './BridgeTime';\nimport { HueTime } from './HueTime';\nimport { RECURRING_RANDOMIZED_TIMER_REGEX, REOCCURRANCE_ATTRIBUTE } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nexport class RecurringRandomizedTimer extends BridgeTime {\n  constructor(value) {\n    super();\n    this.time = new HueTime();\n    this.random = new HueTime();\n    this.reocurrance = 0;\n\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  static matches(value) {\n    return RECURRING_RANDOMIZED_TIMER_REGEX.test(value);\n  }\n\n  set value(value) {\n    if (value instanceof RecurringRandomizedTimer) {\n      // Re-enter\n      this.value = value.toString();\n    } else {\n      const parsed = RECURRING_RANDOMIZED_TIMER_REGEX.exec(value);\n\n      if (parsed) {\n        const time = this.time; // @ts-ignore\n\n        time.hours = parsed.groups.hours; // @ts-ignore\n\n        time.minutes = parsed.groups.minutes; // @ts-ignore\n\n        time.seconds = parsed.groups.seconds;\n        const random = this.random; // @ts-ignore\n\n        random.hours = parsed.groups.randomhours; // @ts-ignore\n\n        random.minutes = parsed.groups.randomminutes; // @ts-ignore\n\n        random.seconds = parsed.groups.randomseconds; // @ts-ignore\n\n        this.reoccurs(parsed.groups.times.length === 0 ? 0 : parsed.groups.times);\n      } else {\n        throw new HueBridgeModelError(`Cannot create a RandomizedTimer from ${value}`);\n      }\n    }\n  }\n\n  hours(value) {\n    this.time.hours = value;\n    return this;\n  }\n\n  minutes(value) {\n    this.time.minutes = value;\n    return this;\n  }\n\n  seconds(value) {\n    this.time.seconds = value;\n    return this;\n  }\n\n  randomHours(value) {\n    this.random.hours = value;\n    return this;\n  }\n\n  randomMinutes(value) {\n    this.random.minutes = value;\n    return this;\n  }\n\n  randomSeconds(value) {\n    this.random.seconds = value;\n    return this;\n  }\n\n  reoccurs(value) {\n    // @ts-ignore\n    this.reocurrance = REOCCURRANCE_ATTRIBUTE.getValue(value);\n    return this;\n  }\n\n  toString() {\n    let limit = '';\n    const reoccurs = this.reocurrance;\n\n    if (reoccurs !== 0) {\n      limit = `${reoccurs}`.padStart(2, '0');\n    }\n\n    return `R${limit}/PT${this.time.toString()}A${this.random.toString()}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/RecurringRandomizedTimer.js"],"names":["BridgeTime","HueTime","RECURRING_RANDOMIZED_TIMER_REGEX","REOCCURRANCE_ATTRIBUTE","HueBridgeModelError","RecurringRandomizedTimer","constructor","value","time","random","reocurrance","matches","test","toString","parsed","exec","hours","groups","minutes","seconds","randomhours","randomminutes","randomseconds","reoccurs","times","length","randomHours","randomMinutes","randomSeconds","getValue","limit","padStart"],"mappings":"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","sourcesContent":["import { BridgeTime } from './BridgeTime';\nimport { HueTime } from './HueTime';\nimport { RECURRING_RANDOMIZED_TIMER_REGEX, REOCCURRANCE_ATTRIBUTE } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nexport class RecurringRandomizedTimer extends BridgeTime {\n    constructor(value) {\n        super();\n        this.time = new HueTime();\n        this.random = new HueTime();\n        this.reocurrance = 0;\n        if (value) {\n            this.value = value;\n        }\n    }\n    static matches(value) {\n        return RECURRING_RANDOMIZED_TIMER_REGEX.test(value);\n    }\n    set value(value) {\n        if (value instanceof RecurringRandomizedTimer) {\n            // Re-enter\n            this.value = value.toString();\n        }\n        else {\n            const parsed = RECURRING_RANDOMIZED_TIMER_REGEX.exec(value);\n            if (parsed) {\n                const time = this.time;\n                // @ts-ignore\n                time.hours = parsed.groups.hours;\n                // @ts-ignore\n                time.minutes = parsed.groups.minutes;\n                // @ts-ignore\n                time.seconds = parsed.groups.seconds;\n                const random = this.random;\n                // @ts-ignore\n                random.hours = parsed.groups.randomhours;\n                // @ts-ignore\n                random.minutes = parsed.groups.randomminutes;\n                // @ts-ignore\n                random.seconds = parsed.groups.randomseconds;\n                // @ts-ignore\n                this.reoccurs(parsed.groups.times.length === 0 ? 0 : parsed.groups.times);\n            }\n            else {\n                throw new HueBridgeModelError(`Cannot create a RandomizedTimer from ${value}`);\n            }\n        }\n    }\n    hours(value) {\n        this.time.hours = value;\n        return this;\n    }\n    minutes(value) {\n        this.time.minutes = value;\n        return this;\n    }\n    seconds(value) {\n        this.time.seconds = value;\n        return this;\n    }\n    randomHours(value) {\n        this.random.hours = value;\n        return this;\n    }\n    randomMinutes(value) {\n        this.random.minutes = value;\n        return this;\n    }\n    randomSeconds(value) {\n        this.random.seconds = value;\n        return this;\n    }\n    reoccurs(value) {\n        // @ts-ignore\n        this.reocurrance = REOCCURRANCE_ATTRIBUTE.getValue(value);\n        return this;\n    }\n    toString() {\n        let limit = '';\n        const reoccurs = this.reocurrance;\n        if (reoccurs !== 0) {\n            limit = `${reoccurs}`.padStart(2, '0');\n        }\n        return `R${limit}/PT${this.time.toString()}A${this.random.toString()}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}