{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lightsApi = void 0;\n\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\n\nconst LightIdPlaceholder_1 = require(\"../../placeholders/LightIdPlaceholder\");\n\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\n\nconst rgb_1 = require(\"../../../rgb\");\n\nconst ApiError_1 = require(\"../../../ApiError\");\n\nconst util_1 = require(\"../../../util\");\n\nconst LIGHT_ID_PLACEHOLDER = new LightIdPlaceholder_1.LightIdPlaceholder();\nconst lightsApi = {\n  getAllLights: new ApiEndpoint_1.ApiEndpoint() // .version('1.0')\n  .get().uri('/<username>/lights').acceptJson().pureJson().postProcess(buildLightsResult),\n  getNewLights: new ApiEndpoint_1.ApiEndpoint() // .version('1.0')\n  .get().uri('/<username>/lights/new').acceptJson().pureJson(),\n  searchForNewLights: new ApiEndpoint_1.ApiEndpoint().post().uri('/<username>/lights').acceptJson().pureJson().postProcess(util_1.wasSuccessful),\n  getLightAttributesAndState: new ApiEndpoint_1.ApiEndpoint().get().uri('/<username>/lights/<id>').placeholder(LIGHT_ID_PLACEHOLDER).acceptJson().pureJson().postProcess(injectLightId),\n  // rename lights\n  setLightAttributes: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/lights/<id>').placeholder(LIGHT_ID_PLACEHOLDER).acceptJson().pureJson().payload(buildLightNamePayload).postProcess(util_1.wasSuccessful),\n  setLightState: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/lights/<id>/state').placeholder(LIGHT_ID_PLACEHOLDER).acceptJson().pureJson().payload(buildLightStateBody).postProcess(validateLightStateResult),\n  deleteLight: new ApiEndpoint_1.ApiEndpoint().delete().uri('/<username>/lights/<id>').placeholder(LIGHT_ID_PLACEHOLDER).acceptJson().pureJson()\n};\nexports.lightsApi = lightsApi;\n\nfunction buildLightsResult(result) {\n  let lights = [];\n\n  if (result) {\n    Object.keys(result).forEach(function (id) {\n      const light = hue_bridge_model_1.model.createFromBridge('light', id, result[id]);\n      lights.push(light);\n    });\n  }\n\n  return lights;\n}\n\nfunction buildLightNamePayload(parameters) {\n  // To support deprecation in the API where we take (id, name) and now just a (light) payload, cater for it here and\n  // remove once lights.rename(id, name) is removed from API\n  let light = null;\n\n  if (parameters.light) {\n    light = parameters.light;\n  } else {\n    // Set the name on a Light instance so that it can be validated using parameter constraints there\n    light = hue_bridge_model_1.model.createFromBridge('light', 0, {\n      name: parameters.name\n    });\n  }\n\n  return {\n    type: 'application/json',\n    body: {\n      name: light.name\n    }\n  };\n}\n\nfunction injectLightId(result, requestParameters) {\n  const id = LIGHT_ID_PLACEHOLDER.getValue(requestParameters);\n  return Object.assign({\n    id: id\n  }, result);\n}\n\nfunction buildLightStateBody(parameters) {\n  const payload = getStateForDevice(parameters.device, parameters.state);\n  return {\n    type: 'application/json',\n    body: payload\n  };\n}\n\nfunction validateLightStateResult(result) {\n  if (!(0, util_1.wasSuccessful)(result)) {\n    const parsed = (0, util_1.parseErrors)(result);\n    throw new ApiError_1.ApiError(parsed ? parsed.join(', ') : `Unexpected result from bridge ${JSON.stringify(result)}`);\n  }\n\n  return true;\n}\n\nfunction getStateForDevice(device, desiredState) {\n  if (!device) {\n    throw new ApiError_1.ApiError('No light device provided');\n  }\n\n  const allowedStates = device.getSupportedStates(),\n        state = {};\n  let desiredStatePayload;\n\n  if (desiredState instanceof hue_bridge_model_1.model.LightState) {\n    desiredStatePayload = desiredState.getPayload();\n  } else {\n    const lightState = new hue_bridge_model_1.model.LightState();\n    lightState.populate(desiredState);\n    desiredStatePayload = lightState.getPayload();\n  } // Only allow the setting of parameters that the light supports in its state (e.g. do not set a color on a white light\n  // Check for RGB and perform conversion (and remove any other settings)\n\n\n  if (desiredStatePayload.rgb) {\n    const colorGamut = device.colorGamut;\n\n    if (!colorGamut) {\n      throw new ApiError_1.ApiError('Cannot set an RGB color on a light that does not support a Color Gamut');\n    }\n\n    state.xy = (0, rgb_1.rgbToXY)(desiredStatePayload.rgb, colorGamut); //TODO there is ordering here, in that xy wins if present, but we should remove the others if set (ct, hs) to reduce loading on bridge\n\n    delete desiredStatePayload.rgb;\n  }\n\n  Object.keys(desiredStatePayload).forEach(desiredStateKey => {\n    if (allowedStates.indexOf(desiredStateKey) > -1) {\n      state[desiredStateKey] = desiredStatePayload[desiredStateKey];\n    } else {\n      //TODO Switch to throwing errors when this occurs\n      console.error(`Attempting to set a state ${desiredStateKey} on a light that does not support it, ${device.id}`);\n    }\n  });\n  return state;\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/endpoints/lights.js"],"names":["Object","defineProperty","exports","value","lightsApi","hue_bridge_model_1","require","LightIdPlaceholder_1","ApiEndpoint_1","rgb_1","ApiError_1","util_1","LIGHT_ID_PLACEHOLDER","LightIdPlaceholder","getAllLights","ApiEndpoint","get","uri","acceptJson","pureJson","postProcess","buildLightsResult","getNewLights","searchForNewLights","post","wasSuccessful","getLightAttributesAndState","placeholder","injectLightId","setLightAttributes","put","payload","buildLightNamePayload","setLightState","buildLightStateBody","validateLightStateResult","deleteLight","delete","result","lights","keys","forEach","id","light","model","createFromBridge","push","parameters","name","type","body","requestParameters","getValue","assign","getStateForDevice","device","state","parsed","parseErrors","ApiError","join","JSON","stringify","desiredState","allowedStates","getSupportedStates","desiredStatePayload","LightState","getPayload","lightState","populate","rgb","colorGamut","xy","rgbToXY","desiredStateKey","indexOf","console","error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lightsApi = void 0;\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\nconst LightIdPlaceholder_1 = require(\"../../placeholders/LightIdPlaceholder\");\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\nconst rgb_1 = require(\"../../../rgb\");\nconst ApiError_1 = require(\"../../../ApiError\");\nconst util_1 = require(\"../../../util\");\nconst LIGHT_ID_PLACEHOLDER = new LightIdPlaceholder_1.LightIdPlaceholder();\nconst lightsApi = {\n    getAllLights: new ApiEndpoint_1.ApiEndpoint()\n        // .version('1.0')\n        .get()\n        .uri('/<username>/lights')\n        .acceptJson()\n        .pureJson()\n        .postProcess(buildLightsResult),\n    getNewLights: new ApiEndpoint_1.ApiEndpoint()\n        // .version('1.0')\n        .get()\n        .uri('/<username>/lights/new')\n        .acceptJson()\n        .pureJson(),\n    searchForNewLights: new ApiEndpoint_1.ApiEndpoint()\n        .post()\n        .uri('/<username>/lights')\n        .acceptJson()\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    getLightAttributesAndState: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .uri('/<username>/lights/<id>')\n        .placeholder(LIGHT_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n        .postProcess(injectLightId),\n    // rename lights\n    setLightAttributes: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/lights/<id>')\n        .placeholder(LIGHT_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n        .payload(buildLightNamePayload)\n        .postProcess(util_1.wasSuccessful),\n    setLightState: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/lights/<id>/state')\n        .placeholder(LIGHT_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n        .payload(buildLightStateBody)\n        .postProcess(validateLightStateResult),\n    deleteLight: new ApiEndpoint_1.ApiEndpoint()\n        .delete()\n        .uri('/<username>/lights/<id>')\n        .placeholder(LIGHT_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n};\nexports.lightsApi = lightsApi;\nfunction buildLightsResult(result) {\n    let lights = [];\n    if (result) {\n        Object.keys(result).forEach(function (id) {\n            const light = hue_bridge_model_1.model.createFromBridge('light', id, result[id]);\n            lights.push(light);\n        });\n    }\n    return lights;\n}\nfunction buildLightNamePayload(parameters) {\n    // To support deprecation in the API where we take (id, name) and now just a (light) payload, cater for it here and\n    // remove once lights.rename(id, name) is removed from API\n    let light = null;\n    if (parameters.light) {\n        light = parameters.light;\n    }\n    else {\n        // Set the name on a Light instance so that it can be validated using parameter constraints there\n        light = hue_bridge_model_1.model.createFromBridge('light', 0, { name: parameters.name });\n    }\n    return {\n        type: 'application/json',\n        body: { name: light.name },\n    };\n}\nfunction injectLightId(result, requestParameters) {\n    const id = LIGHT_ID_PLACEHOLDER.getValue(requestParameters);\n    return Object.assign({ id: id }, result);\n}\nfunction buildLightStateBody(parameters) {\n    const payload = getStateForDevice(parameters.device, parameters.state);\n    return { type: 'application/json', body: payload };\n}\nfunction validateLightStateResult(result) {\n    if (!(0, util_1.wasSuccessful)(result)) {\n        const parsed = (0, util_1.parseErrors)(result);\n        throw new ApiError_1.ApiError(parsed ? parsed.join(', ') : `Unexpected result from bridge ${JSON.stringify(result)}`);\n    }\n    return true;\n}\nfunction getStateForDevice(device, desiredState) {\n    if (!device) {\n        throw new ApiError_1.ApiError('No light device provided');\n    }\n    const allowedStates = device.getSupportedStates(), state = {};\n    let desiredStatePayload;\n    if (desiredState instanceof hue_bridge_model_1.model.LightState) {\n        desiredStatePayload = desiredState.getPayload();\n    }\n    else {\n        const lightState = new hue_bridge_model_1.model.LightState();\n        lightState.populate(desiredState);\n        desiredStatePayload = lightState.getPayload();\n    }\n    // Only allow the setting of parameters that the light supports in its state (e.g. do not set a color on a white light\n    // Check for RGB and perform conversion (and remove any other settings)\n    if (desiredStatePayload.rgb) {\n        const colorGamut = device.colorGamut;\n        if (!colorGamut) {\n            throw new ApiError_1.ApiError('Cannot set an RGB color on a light that does not support a Color Gamut');\n        }\n        state.xy = (0, rgb_1.rgbToXY)(desiredStatePayload.rgb, colorGamut);\n        //TODO there is ordering here, in that xy wins if present, but we should remove the others if set (ct, hs) to reduce loading on bridge\n        delete desiredStatePayload.rgb;\n    }\n    Object.keys(desiredStatePayload).forEach(desiredStateKey => {\n        if (allowedStates.indexOf(desiredStateKey) > -1) {\n            state[desiredStateKey] = desiredStatePayload[desiredStateKey];\n        }\n        else {\n            //TODO Switch to throwing errors when this occurs\n            console.error(`Attempting to set a state ${desiredStateKey} on a light that does not support it, ${device.id}`);\n        }\n    });\n    return state;\n}\n"]},"metadata":{},"sourceType":"script"}