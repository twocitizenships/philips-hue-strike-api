{"ast":null,"code":"const v3=require('node-hue-api').v3,discovery=v3.discovery,hueApi=v3.api;const appName='strike-electric';const deviceName='strike-electric-light-1';async function discoverBridge(){const discoveryResults=await discovery.nupnpSearch();if(discoveryResults.length===0){console.error('Failed to resolve any Hue Bridges');return null;}else{// Ignoring that you could have more than one Hue Bridge on a network as this is unlikely in 99.9% of users situations\nreturn discoveryResults[0].ipaddress;}}async function discoverAndCreateUser(){const ipAddress=await discoverBridge();// Create an unauthenticated instance of the Hue API so that we can create a new user\nconst unauthenticatedApi=await hueApi.createLocal(ipAddress).connect();let createdUser;try{createdUser=await unauthenticatedApi.users.createUser(appName,deviceName);console.log('*******************************************************************************\\n');console.log('User has been created on the Hue Bridge. The following username can be used to\\n'+'authenticate with the Bridge and provide full local access to the Hue Bridge.\\n'+'YOU SHOULD TREAT THIS LIKE A PASSWORD\\n');console.log(`Hue Bridge User: ${createdUser.username}`);console.log(`Hue Bridge User Client Key: ${createdUser.clientkey}`);console.log('*******************************************************************************\\n');// Create a new API instance that is authenticated with the new user we created\nconst authenticatedApi=await hueApi.createLocal(ipAddress).connect(createdUser.username);// Do something with the authenticated user/api\nconst bridgeConfig=await authenticatedApi.configuration.getConfiguration();console.log(`Connected to Hue Bridge: ${bridgeConfig.name} :: ${bridgeConfig.ipaddress}`);}catch(err){if(err.getHueErrorType()===101){console.error('The Link button on the bridge was not pressed. Please press the Link button and try again.');}else{console.error(`Unexpected Error: ${err.message}`);}}}// Invoke the discovery and create user code\ndiscoverAndCreateUser();","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/src/lib/connectToBridge.js"],"names":["v3","require","discovery","hueApi","api","appName","deviceName","discoverBridge","discoveryResults","nupnpSearch","length","console","error","ipaddress","discoverAndCreateUser","ipAddress","unauthenticatedApi","createLocal","connect","createdUser","users","createUser","log","username","clientkey","authenticatedApi","bridgeConfig","configuration","getConfiguration","name","err","getHueErrorType","message"],"mappings":"AAAA,KAAMA,CAAAA,EAAE,CAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,EAAnC,CACIE,SAAS,CAAGF,EAAE,CAACE,SADnB,CAEIC,MAAM,CAAGH,EAAE,CAACI,GAFhB,CAKA,KAAMC,CAAAA,OAAO,CAAG,iBAAhB,CACA,KAAMC,CAAAA,UAAU,CAAG,yBAAnB,CAEA,cAAeC,CAAAA,cAAf,EAAgC,CAC9B,KAAMC,CAAAA,gBAAgB,CAAG,KAAMN,CAAAA,SAAS,CAACO,WAAV,EAA/B,CAEA,GAAID,gBAAgB,CAACE,MAAjB,GAA4B,CAAhC,CAAmC,CACjCC,OAAO,CAACC,KAAR,CAAc,mCAAd,EACA,MAAO,KAAP,CACD,CAHD,IAGO,CACL;AACA,MAAOJ,CAAAA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBK,SAA3B,CACD,CACF,CAED,cAAeC,CAAAA,qBAAf,EAAuC,CACrC,KAAMC,CAAAA,SAAS,CAAG,KAAMR,CAAAA,cAAc,EAAtC,CAEA;AACA,KAAMS,CAAAA,kBAAkB,CAAG,KAAMb,CAAAA,MAAM,CAACc,WAAP,CAAmBF,SAAnB,EAA8BG,OAA9B,EAAjC,CAEA,GAAIC,CAAAA,WAAJ,CACA,GAAI,CACFA,WAAW,CAAG,KAAMH,CAAAA,kBAAkB,CAACI,KAAnB,CAAyBC,UAAzB,CAAoChB,OAApC,CAA6CC,UAA7C,CAApB,CACAK,OAAO,CAACW,GAAR,CAAY,mFAAZ,EACAX,OAAO,CAACW,GAAR,CAAY,mFACA,iFADA,CAEA,yCAFZ,EAGAX,OAAO,CAACW,GAAR,CAAa,oBAAmBH,WAAW,CAACI,QAAS,EAArD,EACAZ,OAAO,CAACW,GAAR,CAAa,+BAA8BH,WAAW,CAACK,SAAU,EAAjE,EACAb,OAAO,CAACW,GAAR,CAAY,mFAAZ,EAEA;AACA,KAAMG,CAAAA,gBAAgB,CAAG,KAAMtB,CAAAA,MAAM,CAACc,WAAP,CAAmBF,SAAnB,EAA8BG,OAA9B,CAAsCC,WAAW,CAACI,QAAlD,CAA/B,CAEA;AACA,KAAMG,CAAAA,YAAY,CAAG,KAAMD,CAAAA,gBAAgB,CAACE,aAAjB,CAA+BC,gBAA/B,EAA3B,CACAjB,OAAO,CAACW,GAAR,CAAa,4BAA2BI,YAAY,CAACG,IAAK,OAAMH,YAAY,CAACb,SAAU,EAAvF,EAED,CAAC,MAAMiB,GAAN,CAAW,CACX,GAAIA,GAAG,CAACC,eAAJ,KAA0B,GAA9B,CAAmC,CACjCpB,OAAO,CAACC,KAAR,CAAc,4FAAd,EACD,CAFD,IAEO,CACLD,OAAO,CAACC,KAAR,CAAe,qBAAoBkB,GAAG,CAACE,OAAQ,EAA/C,EACD,CACF,CACF,CAED;AACAlB,qBAAqB","sourcesContent":["const v3 = require('node-hue-api').v3\n  , discovery = v3.discovery\n  , hueApi = v3.api \n;\n\nconst appName = 'strike-electric';\nconst deviceName = 'strike-electric-light-1';\n\nasync function discoverBridge() {\n  const discoveryResults = await discovery.nupnpSearch();\n\n  if (discoveryResults.length === 0) {\n    console.error('Failed to resolve any Hue Bridges');\n    return null;\n  } else {\n    // Ignoring that you could have more than one Hue Bridge on a network as this is unlikely in 99.9% of users situations\n    return discoveryResults[0].ipaddress;\n  }\n}\n\nasync function discoverAndCreateUser() {\n  const ipAddress = await discoverBridge();\n\n  // Create an unauthenticated instance of the Hue API so that we can create a new user\n  const unauthenticatedApi = await hueApi.createLocal(ipAddress).connect();\n  \n  let createdUser;\n  try {\n    createdUser = await unauthenticatedApi.users.createUser(appName, deviceName);\n    console.log('*******************************************************************************\\n');\n    console.log('User has been created on the Hue Bridge. The following username can be used to\\n' +\n                'authenticate with the Bridge and provide full local access to the Hue Bridge.\\n' +\n                'YOU SHOULD TREAT THIS LIKE A PASSWORD\\n');\n    console.log(`Hue Bridge User: ${createdUser.username}`);\n    console.log(`Hue Bridge User Client Key: ${createdUser.clientkey}`);\n    console.log('*******************************************************************************\\n');\n\n    // Create a new API instance that is authenticated with the new user we created\n    const authenticatedApi = await hueApi.createLocal(ipAddress).connect(createdUser.username);\n\n    // Do something with the authenticated user/api\n    const bridgeConfig = await authenticatedApi.configuration.getConfiguration();\n    console.log(`Connected to Hue Bridge: ${bridgeConfig.name} :: ${bridgeConfig.ipaddress}`);\n\n  } catch(err) {\n    if (err.getHueErrorType() === 101) {\n      console.error('The Link button on the bridge was not pressed. Please press the Link button and try again.');\n    } else {\n      console.error(`Unexpected Error: ${err.message}`);\n    }\n  }\n}\n\n// Invoke the discovery and create user code\ndiscoverAndCreateUser();"]},"metadata":{},"sourceType":"module"}