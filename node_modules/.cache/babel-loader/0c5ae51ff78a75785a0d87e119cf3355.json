{"ast":null,"code":"\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar BottleneckError, DEFAULT_PRIORITY, Job, NUM_PRIORITIES, parser;\nNUM_PRIORITIES = 10;\nDEFAULT_PRIORITY = 5;\nparser = require(\"./parser\");\nBottleneckError = require(\"./BottleneckError\");\nJob = class Job {\n  constructor(task, args, options, jobDefaults, rejectOnDrop, Events, _states, Promise) {\n    this.task = task;\n    this.args = args;\n    this.rejectOnDrop = rejectOnDrop;\n    this.Events = Events;\n    this._states = _states;\n    this.Promise = Promise;\n    this.options = parser.load(options, jobDefaults);\n    this.options.priority = this._sanitizePriority(this.options.priority);\n\n    if (this.options.id === jobDefaults.id) {\n      this.options.id = `${this.options.id}-${this._randomIndex()}`;\n    }\n\n    this.promise = new this.Promise((_resolve, _reject) => {\n      this._resolve = _resolve;\n      this._reject = _reject;\n    });\n    this.retryCount = 0;\n  }\n\n  _sanitizePriority(priority) {\n    var sProperty;\n    sProperty = ~~priority !== priority ? DEFAULT_PRIORITY : priority;\n\n    if (sProperty < 0) {\n      return 0;\n    } else if (sProperty > NUM_PRIORITIES - 1) {\n      return NUM_PRIORITIES - 1;\n    } else {\n      return sProperty;\n    }\n  }\n\n  _randomIndex() {\n    return Math.random().toString(36).slice(2);\n  }\n\n  doDrop() {\n    let {\n      error,\n      message = \"This job has been dropped by Bottleneck\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this._states.remove(this.options.id)) {\n      if (this.rejectOnDrop) {\n        this._reject(error != null ? error : new BottleneckError(message));\n      }\n\n      this.Events.trigger(\"dropped\", {\n        args: this.args,\n        options: this.options,\n        task: this.task,\n        promise: this.promise\n      });\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  _assertStatus(expected) {\n    var status;\n    status = this._states.jobStatus(this.options.id);\n\n    if (!(status === expected || expected === \"DONE\" && status === null)) {\n      throw new BottleneckError(`Invalid job status ${status}, expected ${expected}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`);\n    }\n  }\n\n  doReceive() {\n    this._states.start(this.options.id);\n\n    return this.Events.trigger(\"received\", {\n      args: this.args,\n      options: this.options\n    });\n  }\n\n  doQueue(reachedHWM, blocked) {\n    this._assertStatus(\"RECEIVED\");\n\n    this._states.next(this.options.id);\n\n    return this.Events.trigger(\"queued\", {\n      args: this.args,\n      options: this.options,\n      reachedHWM,\n      blocked\n    });\n  }\n\n  doRun() {\n    if (this.retryCount === 0) {\n      this._assertStatus(\"QUEUED\");\n\n      this._states.next(this.options.id);\n    } else {\n      this._assertStatus(\"EXECUTING\");\n    }\n\n    return this.Events.trigger(\"scheduled\", {\n      args: this.args,\n      options: this.options\n    });\n  }\n\n  doExecute(chained, clearGlobalState, run, free) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var error, eventInfo, passed;\n\n      if (_this.retryCount === 0) {\n        _this._assertStatus(\"RUNNING\");\n\n        _this._states.next(_this.options.id);\n      } else {\n        _this._assertStatus(\"EXECUTING\");\n      }\n\n      eventInfo = {\n        args: _this.args,\n        options: _this.options,\n        retryCount: _this.retryCount\n      };\n\n      _this.Events.trigger(\"executing\", eventInfo);\n\n      try {\n        passed = yield chained != null ? chained.schedule(_this.options, _this.task, ..._this.args) : _this.task(..._this.args);\n\n        if (clearGlobalState()) {\n          _this.doDone(eventInfo);\n\n          yield free(_this.options, eventInfo);\n\n          _this._assertStatus(\"DONE\");\n\n          return _this._resolve(passed);\n        }\n      } catch (error1) {\n        error = error1;\n        return _this._onFailure(error, eventInfo, clearGlobalState, run, free);\n      }\n    })();\n  }\n\n  doExpire(clearGlobalState, run, free) {\n    var error, eventInfo;\n\n    if (this._states.jobStatus(this.options.id === \"RUNNING\")) {\n      this._states.next(this.options.id);\n    }\n\n    this._assertStatus(\"EXECUTING\");\n\n    eventInfo = {\n      args: this.args,\n      options: this.options,\n      retryCount: this.retryCount\n    };\n    error = new BottleneckError(`This job timed out after ${this.options.expiration} ms.`);\n    return this._onFailure(error, eventInfo, clearGlobalState, run, free);\n  }\n\n  _onFailure(error, eventInfo, clearGlobalState, run, free) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var retry, retryAfter;\n\n      if (clearGlobalState()) {\n        retry = yield _this2.Events.trigger(\"failed\", error, eventInfo);\n\n        if (retry != null) {\n          retryAfter = ~~retry;\n\n          _this2.Events.trigger(\"retry\", `Retrying ${_this2.options.id} after ${retryAfter} ms`, eventInfo);\n\n          _this2.retryCount++;\n          return run(retryAfter);\n        } else {\n          _this2.doDone(eventInfo);\n\n          yield free(_this2.options, eventInfo);\n\n          _this2._assertStatus(\"DONE\");\n\n          return _this2._reject(error);\n        }\n      }\n    })();\n  }\n\n  doDone(eventInfo) {\n    this._assertStatus(\"EXECUTING\");\n\n    this._states.next(this.options.id);\n\n    return this.Events.trigger(\"done\", eventInfo);\n  }\n\n};\nmodule.exports = Job;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/bottleneck/lib/Job.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","BottleneckError","DEFAULT_PRIORITY","Job","NUM_PRIORITIES","parser","require","constructor","task","options","jobDefaults","rejectOnDrop","Events","_states","load","priority","_sanitizePriority","id","_randomIndex","promise","_resolve","_reject","retryCount","sProperty","Math","random","toString","slice","doDrop","message","remove","trigger","_assertStatus","expected","status","jobStatus","doReceive","start","doQueue","reachedHWM","blocked","next","doRun","doExecute","chained","clearGlobalState","run","free","_this","eventInfo","passed","schedule","doDone","error1","_onFailure","doExpire","expiration","_this2","retry","retryAfter","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar BottleneckError, DEFAULT_PRIORITY, Job, NUM_PRIORITIES, parser;\nNUM_PRIORITIES = 10;\nDEFAULT_PRIORITY = 5;\nparser = require(\"./parser\");\nBottleneckError = require(\"./BottleneckError\");\nJob = class Job {\n  constructor(task, args, options, jobDefaults, rejectOnDrop, Events, _states, Promise) {\n    this.task = task;\n    this.args = args;\n    this.rejectOnDrop = rejectOnDrop;\n    this.Events = Events;\n    this._states = _states;\n    this.Promise = Promise;\n    this.options = parser.load(options, jobDefaults);\n    this.options.priority = this._sanitizePriority(this.options.priority);\n\n    if (this.options.id === jobDefaults.id) {\n      this.options.id = `${this.options.id}-${this._randomIndex()}`;\n    }\n\n    this.promise = new this.Promise((_resolve, _reject) => {\n      this._resolve = _resolve;\n      this._reject = _reject;\n    });\n    this.retryCount = 0;\n  }\n\n  _sanitizePriority(priority) {\n    var sProperty;\n    sProperty = ~~priority !== priority ? DEFAULT_PRIORITY : priority;\n\n    if (sProperty < 0) {\n      return 0;\n    } else if (sProperty > NUM_PRIORITIES - 1) {\n      return NUM_PRIORITIES - 1;\n    } else {\n      return sProperty;\n    }\n  }\n\n  _randomIndex() {\n    return Math.random().toString(36).slice(2);\n  }\n\n  doDrop({\n    error,\n    message = \"This job has been dropped by Bottleneck\"\n  } = {}) {\n    if (this._states.remove(this.options.id)) {\n      if (this.rejectOnDrop) {\n        this._reject(error != null ? error : new BottleneckError(message));\n      }\n\n      this.Events.trigger(\"dropped\", {\n        args: this.args,\n        options: this.options,\n        task: this.task,\n        promise: this.promise\n      });\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  _assertStatus(expected) {\n    var status;\n    status = this._states.jobStatus(this.options.id);\n\n    if (!(status === expected || expected === \"DONE\" && status === null)) {\n      throw new BottleneckError(`Invalid job status ${status}, expected ${expected}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`);\n    }\n  }\n\n  doReceive() {\n    this._states.start(this.options.id);\n\n    return this.Events.trigger(\"received\", {\n      args: this.args,\n      options: this.options\n    });\n  }\n\n  doQueue(reachedHWM, blocked) {\n    this._assertStatus(\"RECEIVED\");\n\n    this._states.next(this.options.id);\n\n    return this.Events.trigger(\"queued\", {\n      args: this.args,\n      options: this.options,\n      reachedHWM,\n      blocked\n    });\n  }\n\n  doRun() {\n    if (this.retryCount === 0) {\n      this._assertStatus(\"QUEUED\");\n\n      this._states.next(this.options.id);\n    } else {\n      this._assertStatus(\"EXECUTING\");\n    }\n\n    return this.Events.trigger(\"scheduled\", {\n      args: this.args,\n      options: this.options\n    });\n  }\n\n  doExecute(chained, clearGlobalState, run, free) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var error, eventInfo, passed;\n\n      if (_this.retryCount === 0) {\n        _this._assertStatus(\"RUNNING\");\n\n        _this._states.next(_this.options.id);\n      } else {\n        _this._assertStatus(\"EXECUTING\");\n      }\n\n      eventInfo = {\n        args: _this.args,\n        options: _this.options,\n        retryCount: _this.retryCount\n      };\n\n      _this.Events.trigger(\"executing\", eventInfo);\n\n      try {\n        passed = yield chained != null ? chained.schedule(_this.options, _this.task, ..._this.args) : _this.task(..._this.args);\n\n        if (clearGlobalState()) {\n          _this.doDone(eventInfo);\n\n          yield free(_this.options, eventInfo);\n\n          _this._assertStatus(\"DONE\");\n\n          return _this._resolve(passed);\n        }\n      } catch (error1) {\n        error = error1;\n        return _this._onFailure(error, eventInfo, clearGlobalState, run, free);\n      }\n    })();\n  }\n\n  doExpire(clearGlobalState, run, free) {\n    var error, eventInfo;\n\n    if (this._states.jobStatus(this.options.id === \"RUNNING\")) {\n      this._states.next(this.options.id);\n    }\n\n    this._assertStatus(\"EXECUTING\");\n\n    eventInfo = {\n      args: this.args,\n      options: this.options,\n      retryCount: this.retryCount\n    };\n    error = new BottleneckError(`This job timed out after ${this.options.expiration} ms.`);\n    return this._onFailure(error, eventInfo, clearGlobalState, run, free);\n  }\n\n  _onFailure(error, eventInfo, clearGlobalState, run, free) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var retry, retryAfter;\n\n      if (clearGlobalState()) {\n        retry = yield _this2.Events.trigger(\"failed\", error, eventInfo);\n\n        if (retry != null) {\n          retryAfter = ~~retry;\n\n          _this2.Events.trigger(\"retry\", `Retrying ${_this2.options.id} after ${retryAfter} ms`, eventInfo);\n\n          _this2.retryCount++;\n          return run(retryAfter);\n        } else {\n          _this2.doDone(eventInfo);\n\n          yield free(_this2.options, eventInfo);\n\n          _this2._assertStatus(\"DONE\");\n\n          return _this2._reject(error);\n        }\n      }\n    })();\n  }\n\n  doDone(eventInfo) {\n    this._assertStatus(\"EXECUTING\");\n\n    this._states.next(this.options.id);\n\n    return this.Events.trigger(\"done\", eventInfo);\n  }\n\n};\nmodule.exports = Job;"]},"metadata":{},"sourceType":"script"}