{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scenesApi = void 0;\n\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\n\nconst util_1 = require(\"../../../util\");\n\nconst SceneIdPlaceholder_1 = require(\"../../placeholders/SceneIdPlaceholder\");\n\nconst LightIdPlaceholder_1 = require(\"../../placeholders/LightIdPlaceholder\");\n\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\n\nconst ApiError_1 = require(\"../../../ApiError\");\n\nconst SCENE_ID_PLACEHOLDER = new SceneIdPlaceholder_1.SceneIdPlaceholder();\nconst instanceChecks = hue_bridge_model_1.model.instanceChecks;\nconst SceneLightState = hue_bridge_model_1.model.SceneLightState;\nconst scenesApi = {\n  getAll: new ApiEndpoint_1.ApiEndpoint().get().acceptJson().uri('/<username>/scenes').pureJson().postProcess(buildScenesResult),\n  createScene: new ApiEndpoint_1.ApiEndpoint().post().acceptJson().uri('/<username>/scenes').pureJson().payload(getCreateScenePayload).postProcess(buildCreateSceneResult),\n  updateScene: new ApiEndpoint_1.ApiEndpoint().put().acceptJson().uri('/<username>/scenes/<id>').placeholder(new SceneIdPlaceholder_1.SceneIdPlaceholder()).pureJson().payload(buildBasicSceneUpdatePayload).postProcess(util_1.extractUpdatedAttributes),\n  updateSceneLightState: new ApiEndpoint_1.ApiEndpoint().put().acceptJson().uri('/<username>/scenes/<id>/lightstates/<lightStateId>').placeholder(SCENE_ID_PLACEHOLDER).placeholder(new LightIdPlaceholder_1.LightIdPlaceholder('lightStateId')).pureJson().payload(buildUpdateSceneLightStatePayload).postProcess(util_1.extractUpdatedAttributes),\n  getScene: new ApiEndpoint_1.ApiEndpoint().get().acceptJson().uri('/<username>/scenes/<id>').placeholder(SCENE_ID_PLACEHOLDER).pureJson().postProcess(buildSceneResult),\n  deleteScene: new ApiEndpoint_1.ApiEndpoint().delete().acceptJson().uri('/<username>/scenes/<id>').placeholder(SCENE_ID_PLACEHOLDER).pureJson().postProcess(validateSceneDeletion)\n};\nexports.scenesApi = scenesApi;\n\nfunction buildScenesResult(result) {\n  let scenes = [];\n  Object.keys(result).forEach(function (id) {\n    const data = result[id],\n          type = data.type.toLowerCase();\n    const scene = hue_bridge_model_1.model.createFromBridge(type, id, data);\n    scenes.push(scene);\n  });\n  return scenes;\n}\n\nfunction buildSceneResult(data, requestParameters) {\n  const type = data.type.toLowerCase(),\n        id = SCENE_ID_PLACEHOLDER.getValue(requestParameters);\n  return hue_bridge_model_1.model.createFromBridge(type, id, data);\n}\n\nfunction validateSceneDeletion(result) {\n  if (!(0, util_1.wasSuccessful)(result)) {\n    const parsed = (0, util_1.parseErrors)(result);\n    throw new ApiError_1.ApiError(parsed ? parsed.join(', ') : `Unexpected result: ${JSON.stringify(result)}`);\n  }\n\n  return true;\n}\n\nfunction getCreateScenePayload(parameters) {\n  const scene = parameters.scene;\n\n  if (!scene) {\n    throw new ApiError_1.ApiError('No scene provided');\n  } else if (!instanceChecks.isSceneInstance(scene)) {\n    throw new ApiError_1.ApiError('Must provide a valid Scene object');\n  }\n\n  const body = scene.getHuePayload(); // Remove properties that are not used is creation\n\n  delete body.id;\n  delete body.locked;\n  delete body.owner;\n  delete body.lastupdated;\n  delete body.version;\n  return {\n    type: 'application/json',\n    body: body\n  };\n} //TODO\n\n\nfunction buildUpdateSceneLightStatePayload(parameters) {\n  const lightState = parameters.lightState;\n\n  if (!lightState) {\n    throw new ApiError_1.ApiError('No SceneLightState provided');\n  } else if (!(lightState instanceof SceneLightState)) {\n    throw new ApiError_1.ApiError('Must provide a valid SceneLightState object');\n  } //TODO need to validate this object to protect ourselves here\n\n\n  const body = lightState.getPayload();\n  return {\n    type: 'application/json',\n    body: body\n  };\n}\n\nfunction buildBasicSceneUpdatePayload(parameters) {\n  const scene = parameters.scene;\n\n  if (!scene) {\n    throw new ApiError_1.ApiError('No scene provided');\n  } else if (!instanceChecks.isSceneInstance(scene)) {\n    throw new ApiError_1.ApiError('Must provide a valid Scene object');\n  }\n\n  const scenePayload = scene.getHuePayload(),\n        body = {}; // Extract the properties that we are allowed to update as per the API docs\n\n  ['name', 'lights', 'lightstates', 'storelightstate'].forEach(key => {\n    const value = scenePayload[key];\n\n    if (value !== null) {\n      body[key] = value;\n    }\n  });\n  return {\n    type: 'application/json',\n    body: body\n  };\n}\n\nfunction buildCreateSceneResult(result) {\n  const hueErrors = (0, util_1.parseErrors)(result); //TODO not sure if this still gets called as the request handles some of this\n\n  if (hueErrors) {\n    throw new ApiError_1.ApiError(`Error creating scene: ${hueErrors[0].description}`, hueErrors[0]);\n  }\n\n  return {\n    id: result[0].success.id\n  };\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/endpoints/scenes.js"],"names":["Object","defineProperty","exports","value","scenesApi","hue_bridge_model_1","require","util_1","SceneIdPlaceholder_1","LightIdPlaceholder_1","ApiEndpoint_1","ApiError_1","SCENE_ID_PLACEHOLDER","SceneIdPlaceholder","instanceChecks","model","SceneLightState","getAll","ApiEndpoint","get","acceptJson","uri","pureJson","postProcess","buildScenesResult","createScene","post","payload","getCreateScenePayload","buildCreateSceneResult","updateScene","put","placeholder","buildBasicSceneUpdatePayload","extractUpdatedAttributes","updateSceneLightState","LightIdPlaceholder","buildUpdateSceneLightStatePayload","getScene","buildSceneResult","deleteScene","delete","validateSceneDeletion","result","scenes","keys","forEach","id","data","type","toLowerCase","scene","createFromBridge","push","requestParameters","getValue","wasSuccessful","parsed","parseErrors","ApiError","join","JSON","stringify","parameters","isSceneInstance","body","getHuePayload","locked","owner","lastupdated","version","lightState","getPayload","scenePayload","key","hueErrors","description","success"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scenesApi = void 0;\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\nconst util_1 = require(\"../../../util\");\nconst SceneIdPlaceholder_1 = require(\"../../placeholders/SceneIdPlaceholder\");\nconst LightIdPlaceholder_1 = require(\"../../placeholders/LightIdPlaceholder\");\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\nconst ApiError_1 = require(\"../../../ApiError\");\nconst SCENE_ID_PLACEHOLDER = new SceneIdPlaceholder_1.SceneIdPlaceholder();\nconst instanceChecks = hue_bridge_model_1.model.instanceChecks;\nconst SceneLightState = hue_bridge_model_1.model.SceneLightState;\nconst scenesApi = {\n    getAll: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .acceptJson()\n        .uri('/<username>/scenes')\n        .pureJson()\n        .postProcess(buildScenesResult),\n    createScene: new ApiEndpoint_1.ApiEndpoint()\n        .post()\n        .acceptJson()\n        .uri('/<username>/scenes')\n        .pureJson()\n        .payload(getCreateScenePayload)\n        .postProcess(buildCreateSceneResult),\n    updateScene: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .acceptJson()\n        .uri('/<username>/scenes/<id>')\n        .placeholder(new SceneIdPlaceholder_1.SceneIdPlaceholder())\n        .pureJson()\n        .payload(buildBasicSceneUpdatePayload)\n        .postProcess(util_1.extractUpdatedAttributes),\n    updateSceneLightState: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .acceptJson()\n        .uri('/<username>/scenes/<id>/lightstates/<lightStateId>')\n        .placeholder(SCENE_ID_PLACEHOLDER)\n        .placeholder(new LightIdPlaceholder_1.LightIdPlaceholder('lightStateId'))\n        .pureJson()\n        .payload(buildUpdateSceneLightStatePayload)\n        .postProcess(util_1.extractUpdatedAttributes),\n    getScene: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .acceptJson()\n        .uri('/<username>/scenes/<id>')\n        .placeholder(SCENE_ID_PLACEHOLDER)\n        .pureJson()\n        .postProcess(buildSceneResult),\n    deleteScene: new ApiEndpoint_1.ApiEndpoint()\n        .delete()\n        .acceptJson()\n        .uri('/<username>/scenes/<id>')\n        .placeholder(SCENE_ID_PLACEHOLDER)\n        .pureJson()\n        .postProcess(validateSceneDeletion),\n};\nexports.scenesApi = scenesApi;\nfunction buildScenesResult(result) {\n    let scenes = [];\n    Object.keys(result).forEach(function (id) {\n        const data = result[id], type = data.type.toLowerCase();\n        const scene = hue_bridge_model_1.model.createFromBridge(type, id, data);\n        scenes.push(scene);\n    });\n    return scenes;\n}\nfunction buildSceneResult(data, requestParameters) {\n    const type = data.type.toLowerCase(), id = SCENE_ID_PLACEHOLDER.getValue(requestParameters);\n    return hue_bridge_model_1.model.createFromBridge(type, id, data);\n}\nfunction validateSceneDeletion(result) {\n    if (!(0, util_1.wasSuccessful)(result)) {\n        const parsed = (0, util_1.parseErrors)(result);\n        throw new ApiError_1.ApiError(parsed ? parsed.join(', ') : `Unexpected result: ${JSON.stringify(result)}`);\n    }\n    return true;\n}\nfunction getCreateScenePayload(parameters) {\n    const scene = parameters.scene;\n    if (!scene) {\n        throw new ApiError_1.ApiError('No scene provided');\n    }\n    else if (!instanceChecks.isSceneInstance(scene)) {\n        throw new ApiError_1.ApiError('Must provide a valid Scene object');\n    }\n    const body = scene.getHuePayload();\n    // Remove properties that are not used is creation\n    delete body.id;\n    delete body.locked;\n    delete body.owner;\n    delete body.lastupdated;\n    delete body.version;\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\n//TODO\nfunction buildUpdateSceneLightStatePayload(parameters) {\n    const lightState = parameters.lightState;\n    if (!lightState) {\n        throw new ApiError_1.ApiError('No SceneLightState provided');\n    }\n    else if (!(lightState instanceof SceneLightState)) {\n        throw new ApiError_1.ApiError('Must provide a valid SceneLightState object');\n    }\n    //TODO need to validate this object to protect ourselves here\n    const body = lightState.getPayload();\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\nfunction buildBasicSceneUpdatePayload(parameters) {\n    const scene = parameters.scene;\n    if (!scene) {\n        throw new ApiError_1.ApiError('No scene provided');\n    }\n    else if (!instanceChecks.isSceneInstance(scene)) {\n        throw new ApiError_1.ApiError('Must provide a valid Scene object');\n    }\n    const scenePayload = scene.getHuePayload(), body = {};\n    // Extract the properties that we are allowed to update as per the API docs\n    ['name', 'lights', 'lightstates', 'storelightstate'].forEach(key => {\n        const value = scenePayload[key];\n        if (value !== null) {\n            body[key] = value;\n        }\n    });\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\nfunction buildCreateSceneResult(result) {\n    const hueErrors = (0, util_1.parseErrors)(result); //TODO not sure if this still gets called as the request handles some of this\n    if (hueErrors) {\n        throw new ApiError_1.ApiError(`Error creating scene: ${hueErrors[0].description}`, hueErrors[0]);\n    }\n    return { id: result[0].success.id };\n}\n"]},"metadata":{},"sourceType":"script"}