{"ast":null,"code":"import { UInt8Type } from '../../types';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nimport stateTypes from './stateTypes';\nconst PERCENTAGE = new UInt8Type({\n  name: 'percentage',\n  min: 0,\n  max: 100\n}),\n      DEGREES = new UInt8Type({\n  name: 'degrees',\n  min: 0,\n  max: 360\n});\nexport class States {\n  constructor(attributes) {\n    const states = {};\n    attributes.forEach(attribute => {\n      // @ts-ignore\n      const parameter = stateTypes[attribute];\n\n      if (!parameter) {\n        throw new HueBridgeModelError(`Unknown Light State Parameter: \"${attribute}\"`);\n      }\n\n      states[attribute] = parameter;\n    });\n    this._allowedStates = states;\n    this._state = {}; // @ts-ignore\n\n    this.me = this;\n  }\n\n  reset() {\n    this._state = {};\n    return this.me;\n  } //TODO need to define this data as a type\n\n\n  getPayload() {\n    return Object.assign({}, this._state);\n  }\n\n  getAllowedStateNames() {\n    //TODO clean this up\n    // const names = [];\n    //\n    // Object.keys(this._allowedStates).forEach(stateDefinition => {\n    //   names.push(stateDefinition);\n    // });\n    //\n    // return names;\n    return Object.keys(this._allowedStates);\n  }\n\n  populate(data) {\n    const self = this;\n\n    if (data) {\n      Object.keys(data).forEach(key => {\n        if (self._allowedStates[key]) {\n          // @ts-ignore\n          self._setStateValue(key, data[key]);\n        }\n      });\n    }\n\n    return self;\n  }\n\n  _setStateValue(definitionName, value) {\n    const self = this,\n          stateDefinition = self._allowedStates[definitionName];\n\n    if (stateDefinition) {\n      // @ts-ignore\n      this._state[definitionName] = stateDefinition.getValue(value);\n    } else {\n      throw new HueBridgeModelError(`Attempted to set a state '${definitionName}' that is not one of the allowed states`);\n    }\n\n    return this.me;\n  }\n\n  _convertPercentageToStateValue(value, stateName, isFloat) {\n    return this._convertToStateValue(PERCENTAGE, value, stateName, isFloat);\n  }\n\n  _convertDegreesToStateValue(value, stateName, isFloat) {\n    return this._convertToStateValue(DEGREES, value, stateName, isFloat);\n  }\n\n  _convertToStateValue(range, value, stateName, isFloat) {\n    // @ts-ignore\n    const stateDefinition = this._allowedStates[stateName],\n          validatedValue = range.getValue(value);\n\n    if (validatedValue === null) {\n      return null;\n    } else if (validatedValue === range.min) {\n      return stateDefinition.min;\n    } else if (validatedValue === range.max) {\n      return stateDefinition.max;\n    } else {\n      if (isFloat) {\n        // @ts-ignore\n        return stateDefinition.getRange() * validatedValue / range.max;\n      }\n\n      return Math.round(stateDefinition.getRange() * validatedValue / range.max);\n    }\n  }\n\n} //TODO consider removing this is test can pass - TypeScript\n//TODO this is now in the utils package\n// function flatten(array) {\n//   const flattened = [];\n//   !(function flat(array) {\n//     array.forEach(function (el) {\n//       if (Array.isArray(el)) flat(el);\n//       else flattened.push(el);\n//     });\n//   })(array);\n//   return flattened;\n// }","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/lightstate/States.js"],"names":["UInt8Type","HueBridgeModelError","stateTypes","PERCENTAGE","name","min","max","DEGREES","States","constructor","attributes","states","forEach","attribute","parameter","_allowedStates","_state","me","reset","getPayload","Object","assign","getAllowedStateNames","keys","populate","data","self","key","_setStateValue","definitionName","value","stateDefinition","getValue","_convertPercentageToStateValue","stateName","isFloat","_convertToStateValue","_convertDegreesToStateValue","range","validatedValue","getRange","Math","round"],"mappings":"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","sourcesContent":["import { UInt8Type } from '../../types';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nimport stateTypes from './stateTypes';\nconst PERCENTAGE = new UInt8Type({ name: 'percentage', min: 0, max: 100 }), DEGREES = new UInt8Type({ name: 'degrees', min: 0, max: 360 });\nexport class States {\n    constructor(attributes) {\n        const states = {};\n        attributes.forEach(attribute => {\n            // @ts-ignore\n            const parameter = stateTypes[attribute];\n            if (!parameter) {\n                throw new HueBridgeModelError(`Unknown Light State Parameter: \"${attribute}\"`);\n            }\n            states[attribute] = parameter;\n        });\n        this._allowedStates = states;\n        this._state = {};\n        // @ts-ignore\n        this.me = this;\n    }\n    reset() {\n        this._state = {};\n        return this.me;\n    }\n    //TODO need to define this data as a type\n    getPayload() {\n        return Object.assign({}, this._state);\n    }\n    getAllowedStateNames() {\n        //TODO clean this up\n        // const names = [];\n        //\n        // Object.keys(this._allowedStates).forEach(stateDefinition => {\n        //   names.push(stateDefinition);\n        // });\n        //\n        // return names;\n        return Object.keys(this._allowedStates);\n    }\n    populate(data) {\n        const self = this;\n        if (data) {\n            Object.keys(data).forEach(key => {\n                if (self._allowedStates[key]) {\n                    // @ts-ignore\n                    self._setStateValue(key, data[key]);\n                }\n            });\n        }\n        return self;\n    }\n    _setStateValue(definitionName, value) {\n        const self = this, stateDefinition = self._allowedStates[definitionName];\n        if (stateDefinition) {\n            // @ts-ignore\n            this._state[definitionName] = stateDefinition.getValue(value);\n        }\n        else {\n            throw new HueBridgeModelError(`Attempted to set a state '${definitionName}' that is not one of the allowed states`);\n        }\n        return this.me;\n    }\n    _convertPercentageToStateValue(value, stateName, isFloat) {\n        return this._convertToStateValue(PERCENTAGE, value, stateName, isFloat);\n    }\n    _convertDegreesToStateValue(value, stateName, isFloat) {\n        return this._convertToStateValue(DEGREES, value, stateName, isFloat);\n    }\n    _convertToStateValue(range, value, stateName, isFloat) {\n        // @ts-ignore\n        const stateDefinition = this._allowedStates[stateName], validatedValue = range.getValue(value);\n        if (validatedValue === null) {\n            return null;\n        }\n        else if (validatedValue === range.min) {\n            return stateDefinition.min;\n        }\n        else if (validatedValue === range.max) {\n            return stateDefinition.max;\n        }\n        else {\n            if (isFloat) {\n                // @ts-ignore\n                return (stateDefinition.getRange() * validatedValue) / range.max;\n            }\n            return Math.round((stateDefinition.getRange() * validatedValue) / range.max);\n        }\n    }\n}\n//TODO consider removing this is test can pass - TypeScript\n//TODO this is now in the utils package\n// function flatten(array) {\n//   const flattened = [];\n//   !(function flat(array) {\n//     array.forEach(function (el) {\n//       if (Array.isArray(el)) flat(el);\n//       else flattened.push(el);\n//     });\n//   })(array);\n//   return flattened;\n// }\n"]},"metadata":{},"sourceType":"module"}