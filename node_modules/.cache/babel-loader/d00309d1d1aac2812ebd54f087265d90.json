{"ast":null,"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar BottleneckError, IORedisConnection, RedisConnection, RedisDatastore, parser;\nparser = require(\"./parser\");\nBottleneckError = require(\"./BottleneckError\");\nRedisConnection = require(\"./RedisConnection\");\nIORedisConnection = require(\"./IORedisConnection\");\nRedisDatastore = class RedisDatastore {\n  constructor(instance, storeOptions, storeInstanceOptions) {\n    this.instance = instance;\n    this.storeOptions = storeOptions;\n    this.originalId = this.instance.id;\n    this.clientId = this.instance._randomIndex();\n    parser.load(storeInstanceOptions, storeInstanceOptions, this);\n    this.clients = {};\n    this.capacityPriorityCounters = {};\n    this.sharedConnection = this.connection != null;\n\n    if (this.connection == null) {\n      this.connection = this.instance.datastore === \"redis\" ? new RedisConnection({\n        Redis: this.Redis,\n        clientOptions: this.clientOptions,\n        Promise: this.Promise,\n        Events: this.instance.Events\n      }) : this.instance.datastore === \"ioredis\" ? new IORedisConnection({\n        Redis: this.Redis,\n        clientOptions: this.clientOptions,\n        clusterNodes: this.clusterNodes,\n        Promise: this.Promise,\n        Events: this.instance.Events\n      }) : void 0;\n    }\n\n    this.instance.connection = this.connection;\n    this.instance.datastore = this.connection.datastore;\n    this.ready = this.connection.ready.then(clients => {\n      this.clients = clients;\n      return this.runScript(\"init\", this.prepareInitSettings(this.clearDatastore));\n    }).then(() => {\n      return this.connection.__addLimiter__(this.instance);\n    }).then(() => {\n      return this.runScript(\"register_client\", [this.instance.queued()]);\n    }).then(() => {\n      var base;\n\n      if (typeof (base = this.heartbeat = setInterval(() => {\n        return this.runScript(\"heartbeat\", []).catch(e => {\n          return this.instance.Events.trigger(\"error\", e);\n        });\n      }, this.heartbeatInterval)).unref === \"function\") {\n        base.unref();\n      }\n\n      return this.clients;\n    });\n  }\n\n  __publish__(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var client;\n\n      var _ref = yield _this.ready;\n\n      client = _ref.client;\n      return client.publish(_this.instance.channel(), `message:${message.toString()}`);\n    })();\n  }\n\n  onMessage(channel, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var capacity, counter, data, drained, e, newCapacity, pos, priorityClient, rawCapacity, type;\n\n      try {\n        pos = message.indexOf(\":\");\n        var _ref2 = [message.slice(0, pos), message.slice(pos + 1)];\n        type = _ref2[0];\n        data = _ref2[1];\n\n        if (type === \"capacity\") {\n          return yield _this2.instance._drainAll(data.length > 0 ? ~~data : void 0);\n        } else if (type === \"capacity-priority\") {\n          var _data$split = data.split(\":\");\n\n          var _data$split2 = _slicedToArray(_data$split, 3);\n\n          rawCapacity = _data$split2[0];\n          priorityClient = _data$split2[1];\n          counter = _data$split2[2];\n          capacity = rawCapacity.length > 0 ? ~~rawCapacity : void 0;\n\n          if (priorityClient === _this2.clientId) {\n            drained = yield _this2.instance._drainAll(capacity);\n            newCapacity = capacity != null ? capacity - (drained || 0) : \"\";\n            return yield _this2.clients.client.publish(_this2.instance.channel(), `capacity-priority:${newCapacity}::${counter}`);\n          } else if (priorityClient === \"\") {\n            clearTimeout(_this2.capacityPriorityCounters[counter]);\n            delete _this2.capacityPriorityCounters[counter];\n            return _this2.instance._drainAll(capacity);\n          } else {\n            return _this2.capacityPriorityCounters[counter] = setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n              var e;\n\n              try {\n                delete _this2.capacityPriorityCounters[counter];\n                yield _this2.runScript(\"blacklist_client\", [priorityClient]);\n                return yield _this2.instance._drainAll(capacity);\n              } catch (error) {\n                e = error;\n                return _this2.instance.Events.trigger(\"error\", e);\n              }\n            }), 1000);\n          }\n        } else if (type === \"message\") {\n          return _this2.instance.Events.trigger(\"message\", data);\n        } else if (type === \"blocked\") {\n          return yield _this2.instance._dropAllQueued();\n        }\n      } catch (error) {\n        e = error;\n        return _this2.instance.Events.trigger(\"error\", e);\n      }\n    })();\n  }\n\n  __disconnect__(flush) {\n    clearInterval(this.heartbeat);\n\n    if (this.sharedConnection) {\n      return this.connection.__removeLimiter__(this.instance);\n    } else {\n      return this.connection.disconnect(flush);\n    }\n  }\n\n  runScript(name, args) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(name === \"init\" || name === \"register_client\")) {\n        yield _this3.ready;\n      }\n\n      return new _this3.Promise((resolve, reject) => {\n        var all_args, arr;\n        all_args = [Date.now(), _this3.clientId].concat(args);\n\n        _this3.instance.Events.trigger(\"debug\", `Calling Redis script: ${name}.lua`, all_args);\n\n        arr = _this3.connection.__scriptArgs__(name, _this3.originalId, all_args, function (err, replies) {\n          if (err != null) {\n            return reject(err);\n          }\n\n          return resolve(replies);\n        });\n        return _this3.connection.__scriptFn__(name)(...arr);\n      }).catch(e => {\n        if (e.message === \"SETTINGS_KEY_NOT_FOUND\") {\n          if (name === \"heartbeat\") {\n            return _this3.Promise.resolve();\n          } else {\n            return _this3.runScript(\"init\", _this3.prepareInitSettings(false)).then(() => {\n              return _this3.runScript(name, args);\n            });\n          }\n        } else if (e.message === \"UNKNOWN_CLIENT\") {\n          return _this3.runScript(\"register_client\", [_this3.instance.queued()]).then(() => {\n            return _this3.runScript(name, args);\n          });\n        } else {\n          return _this3.Promise.reject(e);\n        }\n      });\n    })();\n  }\n\n  prepareArray(arr) {\n    var i, len, results, x;\n    results = [];\n\n    for (i = 0, len = arr.length; i < len; i++) {\n      x = arr[i];\n      results.push(x != null ? x.toString() : \"\");\n    }\n\n    return results;\n  }\n\n  prepareObject(obj) {\n    var arr, k, v;\n    arr = [];\n\n    for (k in obj) {\n      v = obj[k];\n      arr.push(k, v != null ? v.toString() : \"\");\n    }\n\n    return arr;\n  }\n\n  prepareInitSettings(clear) {\n    var args;\n    args = this.prepareObject(Object.assign({}, this.storeOptions, {\n      id: this.originalId,\n      version: this.instance.version,\n      groupTimeout: this.timeout,\n      clientTimeout: this.clientTimeout\n    }));\n    args.unshift(clear ? 1 : 0, this.instance.version);\n    return args;\n  }\n\n  convertBool(b) {\n    return !!b;\n  }\n\n  __updateSettings__(options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.runScript(\"update_settings\", _this4.prepareObject(options));\n      return parser.overwrite(options, options, _this4.storeOptions);\n    })();\n  }\n\n  __running__() {\n    return this.runScript(\"running\", []);\n  }\n\n  __queued__() {\n    return this.runScript(\"queued\", []);\n  }\n\n  __done__() {\n    return this.runScript(\"done\", []);\n  }\n\n  __groupCheck__() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.convertBool(yield _this5.runScript(\"group_check\", []));\n    })();\n  }\n\n  __incrementReservoir__(incr) {\n    return this.runScript(\"increment_reservoir\", [incr]);\n  }\n\n  __currentReservoir__() {\n    return this.runScript(\"current_reservoir\", []);\n  }\n\n  __check__(weight) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.convertBool(yield _this6.runScript(\"check\", _this6.prepareArray([weight])));\n    })();\n  }\n\n  __register__(index, weight, expiration) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      var reservoir, success, wait;\n\n      var _ref4 = yield _this7.runScript(\"register\", _this7.prepareArray([index, weight, expiration]));\n\n      var _ref5 = _slicedToArray(_ref4, 3);\n\n      success = _ref5[0];\n      wait = _ref5[1];\n      reservoir = _ref5[2];\n      return {\n        success: _this7.convertBool(success),\n        wait,\n        reservoir\n      };\n    })();\n  }\n\n  __submit__(queueLength, weight) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      var blocked, e, maxConcurrent, overweight, reachedHWM, strategy;\n\n      try {\n        var _ref6 = yield _this8.runScript(\"submit\", _this8.prepareArray([queueLength, weight]));\n\n        var _ref7 = _slicedToArray(_ref6, 3);\n\n        reachedHWM = _ref7[0];\n        blocked = _ref7[1];\n        strategy = _ref7[2];\n        return {\n          reachedHWM: _this8.convertBool(reachedHWM),\n          blocked: _this8.convertBool(blocked),\n          strategy\n        };\n      } catch (error) {\n        e = error;\n\n        if (e.message.indexOf(\"OVERWEIGHT\") === 0) {\n          var _e$message$split = e.message.split(\":\");\n\n          var _e$message$split2 = _slicedToArray(_e$message$split, 3);\n\n          overweight = _e$message$split2[0];\n          weight = _e$message$split2[1];\n          maxConcurrent = _e$message$split2[2];\n          throw new BottleneckError(`Impossible to add a job having a weight of ${weight} to a limiter having a maxConcurrent setting of ${maxConcurrent}`);\n        } else {\n          throw e;\n        }\n      }\n    })();\n  }\n\n  __free__(index, weight) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      var running;\n      running = yield _this9.runScript(\"free\", _this9.prepareArray([index]));\n      return {\n        running\n      };\n    })();\n  }\n\n};\nmodule.exports = RedisDatastore;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/bottleneck/lib/RedisDatastore.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","BottleneckError","IORedisConnection","RedisConnection","RedisDatastore","parser","require","constructor","instance","storeOptions","storeInstanceOptions","originalId","id","clientId","_randomIndex","load","clients","capacityPriorityCounters","sharedConnection","connection","datastore","Redis","clientOptions","Events","clusterNodes","ready","runScript","prepareInitSettings","clearDatastore","__addLimiter__","queued","base","heartbeat","setInterval","catch","e","trigger","heartbeatInterval","unref","__publish__","message","_this","client","_ref","publish","channel","toString","onMessage","_this2","capacity","counter","data","drained","newCapacity","pos","priorityClient","rawCapacity","type","indexOf","_ref2","slice","_drainAll","_data$split","split","_data$split2","clearTimeout","setTimeout","_dropAllQueued","__disconnect__","flush","clearInterval","__removeLimiter__","disconnect","name","_this3","all_args","Date","now","concat","__scriptArgs__","replies","__scriptFn__","prepareArray","len","results","x","prepareObject","obj","k","v","clear","Object","assign","version","groupTimeout","timeout","clientTimeout","unshift","convertBool","b","__updateSettings__","options","_this4","overwrite","__running__","__queued__","__done__","__groupCheck__","_this5","__incrementReservoir__","incr","__currentReservoir__","__check__","weight","_this6","__register__","index","expiration","_this7","reservoir","success","wait","_ref4","_ref5","__submit__","queueLength","_this8","blocked","maxConcurrent","overweight","reachedHWM","strategy","_ref6","_ref7","_e$message$split","_e$message$split2","__free__","_this9","running","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar BottleneckError, IORedisConnection, RedisConnection, RedisDatastore, parser;\nparser = require(\"./parser\");\nBottleneckError = require(\"./BottleneckError\");\nRedisConnection = require(\"./RedisConnection\");\nIORedisConnection = require(\"./IORedisConnection\");\nRedisDatastore = class RedisDatastore {\n  constructor(instance, storeOptions, storeInstanceOptions) {\n    this.instance = instance;\n    this.storeOptions = storeOptions;\n    this.originalId = this.instance.id;\n    this.clientId = this.instance._randomIndex();\n    parser.load(storeInstanceOptions, storeInstanceOptions, this);\n    this.clients = {};\n    this.capacityPriorityCounters = {};\n    this.sharedConnection = this.connection != null;\n\n    if (this.connection == null) {\n      this.connection = this.instance.datastore === \"redis\" ? new RedisConnection({\n        Redis: this.Redis,\n        clientOptions: this.clientOptions,\n        Promise: this.Promise,\n        Events: this.instance.Events\n      }) : this.instance.datastore === \"ioredis\" ? new IORedisConnection({\n        Redis: this.Redis,\n        clientOptions: this.clientOptions,\n        clusterNodes: this.clusterNodes,\n        Promise: this.Promise,\n        Events: this.instance.Events\n      }) : void 0;\n    }\n\n    this.instance.connection = this.connection;\n    this.instance.datastore = this.connection.datastore;\n    this.ready = this.connection.ready.then(clients => {\n      this.clients = clients;\n      return this.runScript(\"init\", this.prepareInitSettings(this.clearDatastore));\n    }).then(() => {\n      return this.connection.__addLimiter__(this.instance);\n    }).then(() => {\n      return this.runScript(\"register_client\", [this.instance.queued()]);\n    }).then(() => {\n      var base;\n\n      if (typeof (base = this.heartbeat = setInterval(() => {\n        return this.runScript(\"heartbeat\", []).catch(e => {\n          return this.instance.Events.trigger(\"error\", e);\n        });\n      }, this.heartbeatInterval)).unref === \"function\") {\n        base.unref();\n      }\n\n      return this.clients;\n    });\n  }\n\n  __publish__(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var client;\n\n      var _ref = yield _this.ready;\n\n      client = _ref.client;\n      return client.publish(_this.instance.channel(), `message:${message.toString()}`);\n    })();\n  }\n\n  onMessage(channel, message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var capacity, counter, data, drained, e, newCapacity, pos, priorityClient, rawCapacity, type;\n\n      try {\n        pos = message.indexOf(\":\");\n        var _ref2 = [message.slice(0, pos), message.slice(pos + 1)];\n        type = _ref2[0];\n        data = _ref2[1];\n\n        if (type === \"capacity\") {\n          return yield _this2.instance._drainAll(data.length > 0 ? ~~data : void 0);\n        } else if (type === \"capacity-priority\") {\n          var _data$split = data.split(\":\");\n\n          var _data$split2 = _slicedToArray(_data$split, 3);\n\n          rawCapacity = _data$split2[0];\n          priorityClient = _data$split2[1];\n          counter = _data$split2[2];\n          capacity = rawCapacity.length > 0 ? ~~rawCapacity : void 0;\n\n          if (priorityClient === _this2.clientId) {\n            drained = yield _this2.instance._drainAll(capacity);\n            newCapacity = capacity != null ? capacity - (drained || 0) : \"\";\n            return yield _this2.clients.client.publish(_this2.instance.channel(), `capacity-priority:${newCapacity}::${counter}`);\n          } else if (priorityClient === \"\") {\n            clearTimeout(_this2.capacityPriorityCounters[counter]);\n            delete _this2.capacityPriorityCounters[counter];\n            return _this2.instance._drainAll(capacity);\n          } else {\n            return _this2.capacityPriorityCounters[counter] = setTimeout(\n            /*#__PURE__*/\n            _asyncToGenerator(function* () {\n              var e;\n\n              try {\n                delete _this2.capacityPriorityCounters[counter];\n                yield _this2.runScript(\"blacklist_client\", [priorityClient]);\n                return yield _this2.instance._drainAll(capacity);\n              } catch (error) {\n                e = error;\n                return _this2.instance.Events.trigger(\"error\", e);\n              }\n            }), 1000);\n          }\n        } else if (type === \"message\") {\n          return _this2.instance.Events.trigger(\"message\", data);\n        } else if (type === \"blocked\") {\n          return yield _this2.instance._dropAllQueued();\n        }\n      } catch (error) {\n        e = error;\n        return _this2.instance.Events.trigger(\"error\", e);\n      }\n    })();\n  }\n\n  __disconnect__(flush) {\n    clearInterval(this.heartbeat);\n\n    if (this.sharedConnection) {\n      return this.connection.__removeLimiter__(this.instance);\n    } else {\n      return this.connection.disconnect(flush);\n    }\n  }\n\n  runScript(name, args) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!(name === \"init\" || name === \"register_client\")) {\n        yield _this3.ready;\n      }\n\n      return new _this3.Promise((resolve, reject) => {\n        var all_args, arr;\n        all_args = [Date.now(), _this3.clientId].concat(args);\n\n        _this3.instance.Events.trigger(\"debug\", `Calling Redis script: ${name}.lua`, all_args);\n\n        arr = _this3.connection.__scriptArgs__(name, _this3.originalId, all_args, function (err, replies) {\n          if (err != null) {\n            return reject(err);\n          }\n\n          return resolve(replies);\n        });\n        return _this3.connection.__scriptFn__(name)(...arr);\n      }).catch(e => {\n        if (e.message === \"SETTINGS_KEY_NOT_FOUND\") {\n          if (name === \"heartbeat\") {\n            return _this3.Promise.resolve();\n          } else {\n            return _this3.runScript(\"init\", _this3.prepareInitSettings(false)).then(() => {\n              return _this3.runScript(name, args);\n            });\n          }\n        } else if (e.message === \"UNKNOWN_CLIENT\") {\n          return _this3.runScript(\"register_client\", [_this3.instance.queued()]).then(() => {\n            return _this3.runScript(name, args);\n          });\n        } else {\n          return _this3.Promise.reject(e);\n        }\n      });\n    })();\n  }\n\n  prepareArray(arr) {\n    var i, len, results, x;\n    results = [];\n\n    for (i = 0, len = arr.length; i < len; i++) {\n      x = arr[i];\n      results.push(x != null ? x.toString() : \"\");\n    }\n\n    return results;\n  }\n\n  prepareObject(obj) {\n    var arr, k, v;\n    arr = [];\n\n    for (k in obj) {\n      v = obj[k];\n      arr.push(k, v != null ? v.toString() : \"\");\n    }\n\n    return arr;\n  }\n\n  prepareInitSettings(clear) {\n    var args;\n    args = this.prepareObject(Object.assign({}, this.storeOptions, {\n      id: this.originalId,\n      version: this.instance.version,\n      groupTimeout: this.timeout,\n      clientTimeout: this.clientTimeout\n    }));\n    args.unshift(clear ? 1 : 0, this.instance.version);\n    return args;\n  }\n\n  convertBool(b) {\n    return !!b;\n  }\n\n  __updateSettings__(options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.runScript(\"update_settings\", _this4.prepareObject(options));\n      return parser.overwrite(options, options, _this4.storeOptions);\n    })();\n  }\n\n  __running__() {\n    return this.runScript(\"running\", []);\n  }\n\n  __queued__() {\n    return this.runScript(\"queued\", []);\n  }\n\n  __done__() {\n    return this.runScript(\"done\", []);\n  }\n\n  __groupCheck__() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.convertBool((yield _this5.runScript(\"group_check\", [])));\n    })();\n  }\n\n  __incrementReservoir__(incr) {\n    return this.runScript(\"increment_reservoir\", [incr]);\n  }\n\n  __currentReservoir__() {\n    return this.runScript(\"current_reservoir\", []);\n  }\n\n  __check__(weight) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.convertBool((yield _this6.runScript(\"check\", _this6.prepareArray([weight]))));\n    })();\n  }\n\n  __register__(index, weight, expiration) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      var reservoir, success, wait;\n\n      var _ref4 = yield _this7.runScript(\"register\", _this7.prepareArray([index, weight, expiration]));\n\n      var _ref5 = _slicedToArray(_ref4, 3);\n\n      success = _ref5[0];\n      wait = _ref5[1];\n      reservoir = _ref5[2];\n      return {\n        success: _this7.convertBool(success),\n        wait,\n        reservoir\n      };\n    })();\n  }\n\n  __submit__(queueLength, weight) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      var blocked, e, maxConcurrent, overweight, reachedHWM, strategy;\n\n      try {\n        var _ref6 = yield _this8.runScript(\"submit\", _this8.prepareArray([queueLength, weight]));\n\n        var _ref7 = _slicedToArray(_ref6, 3);\n\n        reachedHWM = _ref7[0];\n        blocked = _ref7[1];\n        strategy = _ref7[2];\n        return {\n          reachedHWM: _this8.convertBool(reachedHWM),\n          blocked: _this8.convertBool(blocked),\n          strategy\n        };\n      } catch (error) {\n        e = error;\n\n        if (e.message.indexOf(\"OVERWEIGHT\") === 0) {\n          var _e$message$split = e.message.split(\":\");\n\n          var _e$message$split2 = _slicedToArray(_e$message$split, 3);\n\n          overweight = _e$message$split2[0];\n          weight = _e$message$split2[1];\n          maxConcurrent = _e$message$split2[2];\n          throw new BottleneckError(`Impossible to add a job having a weight of ${weight} to a limiter having a maxConcurrent setting of ${maxConcurrent}`);\n        } else {\n          throw e;\n        }\n      }\n    })();\n  }\n\n  __free__(index, weight) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      var running;\n      running = yield _this9.runScript(\"free\", _this9.prepareArray([index]));\n      return {\n        running\n      };\n    })();\n  }\n\n};\nmodule.exports = RedisDatastore;"]},"metadata":{},"sourceType":"script"}