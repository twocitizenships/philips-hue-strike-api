{"ast":null,"code":"import { CommonStates } from './CommonStates';\nexport class LightState extends CommonStates {\n  constructor() {\n    super(['rgb']);\n  } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //\n  // Helper States that get converted into the standard light state values\n  //\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  white(temp, bri) {\n    this.ct(temp);\n    this.brightness(bri);\n    return this;\n  }\n\n  hsb(hue, saturation, brightness) {\n    this.hue(this._convertDegreesToStateValue(hue, 'hue'));\n    this.brightness(brightness);\n    this.saturation(saturation);\n    return this;\n  }\n\n  hsl(hue, saturation, luminosity) {\n    const temp = saturation * (luminosity < 50 ? luminosity : 100 - luminosity) / 100,\n          satValue = Math.round(200 * temp / (luminosity + temp)) | 0,\n          bri = Math.round(temp + luminosity);\n    this.brightness(bri);\n    this.hue(this._convertDegreesToStateValue(hue, 'hue'));\n    this.sat(this._convertPercentageToStateValue(satValue, 'sat'));\n    return this;\n  }\n\n  rgb(red, green, blue) {\n    // The conversion to rgb is now done in the xy space, but to do so requires knowledge of the limits of the light's\n    // color gamut.\n    // To cater for this, we store the rgb value requested, and convert it to xy when the user applies it.\n    if (Array.isArray(red)) {\n      return this._setStateValue('rgb', red);\n    } else {\n      return this._setStateValue('rgb', [red, green, blue]);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/lightstate/LightState.js"],"names":["CommonStates","LightState","constructor","white","temp","bri","ct","brightness","hsb","hue","saturation","_convertDegreesToStateValue","hsl","luminosity","satValue","Math","round","sat","_convertPercentageToStateValue","rgb","red","green","blue","Array","isArray","_setStateValue"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,OAAO,MAAMC,UAAN,SAAyBD,YAAzB,CAAsC;AACzCE,EAAAA,WAAW,GAAG;AACV,UAAM,CAAC,KAAD,CAAN;AACH,GAHwC,CAIzC;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,KAAK,CAACC,IAAD,EAAOC,GAAP,EAAY;AACb,SAAKC,EAAL,CAAQF,IAAR;AACA,SAAKG,UAAL,CAAgBF,GAAhB;AACA,WAAO,IAAP;AACH;;AACDG,EAAAA,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBH,UAAlB,EAA8B;AAC7B,SAAKE,GAAL,CAAS,KAAKE,2BAAL,CAAiCF,GAAjC,EAAsC,KAAtC,CAAT;AACA,SAAKF,UAAL,CAAgBA,UAAhB;AACA,SAAKG,UAAL,CAAgBA,UAAhB;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,GAAG,CAACH,GAAD,EAAMC,UAAN,EAAkBG,UAAlB,EAA8B;AAC7B,UAAMT,IAAI,GAAGM,UAAU,IAAIG,UAAU,GAAG,EAAb,GAAkBA,UAAlB,GAA+B,MAAMA,UAAzC,CAAV,GAAiE,GAA9E;AAAA,UAAmFC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,MAAMZ,IAAN,IAAcS,UAAU,GAAGT,IAA3B,CAAX,IAA+C,CAA7I;AAAA,UAAgJC,GAAG,GAAGU,IAAI,CAACC,KAAL,CAAWZ,IAAI,GAAGS,UAAlB,CAAtJ;AACA,SAAKN,UAAL,CAAgBF,GAAhB;AACA,SAAKI,GAAL,CAAS,KAAKE,2BAAL,CAAiCF,GAAjC,EAAsC,KAAtC,CAAT;AACA,SAAKQ,GAAL,CAAS,KAAKC,8BAAL,CAAoCJ,QAApC,EAA8C,KAA9C,CAAT;AACA,WAAO,IAAP;AACH;;AACDK,EAAAA,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmB;AAClB;AACA;AACA;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACpB,aAAO,KAAKK,cAAL,CAAoB,KAApB,EAA2BL,GAA3B,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKK,cAAL,CAAoB,KAApB,EAA2B,CAACL,GAAD,EAAMC,KAAN,EAAaC,IAAb,CAA3B,CAAP;AACH;AACJ;;AArCwC","sourcesContent":["import { CommonStates } from './CommonStates';\nexport class LightState extends CommonStates {\n    constructor() {\n        super(['rgb']);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Helper States that get converted into the standard light state values\n    //\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    white(temp, bri) {\n        this.ct(temp);\n        this.brightness(bri);\n        return this;\n    }\n    hsb(hue, saturation, brightness) {\n        this.hue(this._convertDegreesToStateValue(hue, 'hue'));\n        this.brightness(brightness);\n        this.saturation(saturation);\n        return this;\n    }\n    hsl(hue, saturation, luminosity) {\n        const temp = saturation * (luminosity < 50 ? luminosity : 100 - luminosity) / 100, satValue = Math.round(200 * temp / (luminosity + temp)) | 0, bri = Math.round(temp + luminosity);\n        this.brightness(bri);\n        this.hue(this._convertDegreesToStateValue(hue, 'hue'));\n        this.sat(this._convertPercentageToStateValue(satValue, 'sat'));\n        return this;\n    }\n    rgb(red, green, blue) {\n        // The conversion to rgb is now done in the xy space, but to do so requires knowledge of the limits of the light's\n        // color gamut.\n        // To cater for this, we store the rgb value requested, and convert it to xy when the user applies it.\n        if (Array.isArray(red)) {\n            return this._setStateValue('rgb', red);\n        }\n        else {\n            return this._setStateValue('rgb', [red, green, blue]);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}