{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSSLCertificate = void 0;\n\nconst https_1 = require(\"https\");\n\nfunction getSSLCertificate(url, timeout) {\n  const options = getRequestOptions(url, timeout);\n  return performRequest(options);\n}\n\nexports.getSSLCertificate = getSSLCertificate;\n\nfunction performRequest(options) {\n  return new Promise((resolve, reject) => {\n    (0, https_1.get)(options, res => {\n      // @ts-ignore\n      const cert = res.socket.getPeerCertificate();\n\n      if (!cert || Object.keys(cert).length < 1) {\n        reject(`Bridge did not supply a certificate`);\n      } else {\n        resolve(cert);\n      }\n    });\n  });\n}\n\nfunction getRequestOptions(url, timeout) {\n  return {\n    hostname: url,\n    agent: false,\n    rejectUnauthorized: false,\n    ciphers: 'ALL'\n  };\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/sslCertificate.js"],"names":["Object","defineProperty","exports","value","getSSLCertificate","https_1","require","url","timeout","options","getRequestOptions","performRequest","Promise","resolve","reject","get","res","cert","socket","getPeerCertificate","keys","length","hostname","agent","rejectUnauthorized","ciphers"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,SAASF,iBAAT,CAA2BG,GAA3B,EAAgCC,OAAhC,EAAyC;AACrC,QAAMC,OAAO,GAAGC,iBAAiB,CAACH,GAAD,EAAMC,OAAN,CAAjC;AACA,SAAOG,cAAc,CAACF,OAAD,CAArB;AACH;;AACDP,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;;AACA,SAASO,cAAT,CAAwBF,OAAxB,EAAiC;AAC7B,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,KAAC,GAAGT,OAAO,CAACU,GAAZ,EAAiBN,OAAjB,EAA2BO,GAAD,IAAS;AAC/B;AACA,YAAMC,IAAI,GAAGD,GAAG,CAACE,MAAJ,CAAWC,kBAAX,EAAb;;AACA,UAAI,CAACF,IAAD,IAASjB,MAAM,CAACoB,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,GAA2B,CAAxC,EAA2C;AACvCP,QAAAA,MAAM,CAAE,qCAAF,CAAN;AACH,OAFD,MAGK;AACDD,QAAAA,OAAO,CAACI,IAAD,CAAP;AACH;AACJ,KATD;AAUH,GAXM,CAAP;AAYH;;AACD,SAASP,iBAAT,CAA2BH,GAA3B,EAAgCC,OAAhC,EAAyC;AACrC,SAAO;AACHc,IAAAA,QAAQ,EAAEf,GADP;AAEHgB,IAAAA,KAAK,EAAE,KAFJ;AAGHC,IAAAA,kBAAkB,EAAE,KAHjB;AAIHC,IAAAA,OAAO,EAAE;AAJN,GAAP;AAMH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSSLCertificate = void 0;\nconst https_1 = require(\"https\");\nfunction getSSLCertificate(url, timeout) {\n    const options = getRequestOptions(url, timeout);\n    return performRequest(options);\n}\nexports.getSSLCertificate = getSSLCertificate;\nfunction performRequest(options) {\n    return new Promise((resolve, reject) => {\n        (0, https_1.get)(options, (res) => {\n            // @ts-ignore\n            const cert = res.socket.getPeerCertificate();\n            if (!cert || Object.keys(cert).length < 1) {\n                reject(`Bridge did not supply a certificate`);\n            }\n            else {\n                resolve(cert);\n            }\n        });\n    });\n}\nfunction getRequestOptions(url, timeout) {\n    return {\n        hostname: url,\n        agent: false,\n        rejectUnauthorized: false,\n        ciphers: 'ALL'\n    };\n}\n"]},"metadata":{},"sourceType":"script"}