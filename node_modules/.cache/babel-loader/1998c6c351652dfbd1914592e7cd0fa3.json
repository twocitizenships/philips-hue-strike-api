{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanHostname = exports.isIpv6Host = exports.getHttpUrl = exports.getHttpsUrl = void 0;\nconst ipv6Regex = /^(\\[)?(((?:[0-9a-f]{1,4}))((?::[0-9a-f]{1,4}))*)?::((?:[0-9a-f]{1,4}))((?::[0-9a-f]{1,4}))*|((?:[0-9a-f]{1,4}))((?::[0-9a-f]{1,4})){7}(])?$/;\nconst bracketsRegex = /^\\[.*]$/;\n\nfunction getHttpsUrl(hostname, port) {\n  return generateUrl('https', hostname, port);\n}\n\nexports.getHttpsUrl = getHttpsUrl;\n\nfunction getHttpUrl(hostname, port) {\n  return generateUrl('http', hostname, port);\n}\n\nexports.getHttpUrl = getHttpUrl;\n\nfunction isIpv6Host(value) {\n  if (value) {\n    const trimmedValue = value.toLowerCase().trim();\n\n    if (ipv6Regex.test(trimmedValue)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isIpv6Host = isIpv6Host;\n\nfunction cleanHostname(hostname) {\n  if (bracketsRegex.test(hostname)) {\n    return hostname.substring(1, hostname.length - 1);\n  }\n\n  return hostname;\n}\n\nexports.cleanHostname = cleanHostname;\n\nfunction escapeIPv6Address(address) {\n  let result = address.trim();\n\n  if (!bracketsRegex.test(result)) {\n    result = `[${address}]`;\n  }\n\n  return result;\n}\n\nfunction generateUrl(scheme, hostname, port) {\n  let escapedHostName = hostname;\n\n  if (isIpv6Host(hostname)) {\n    escapedHostName = escapeIPv6Address(hostname);\n  }\n\n  return new URL(`${scheme}://${escapedHostName}:${port}`);\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/urlUtil.js"],"names":["Object","defineProperty","exports","value","cleanHostname","isIpv6Host","getHttpUrl","getHttpsUrl","ipv6Regex","bracketsRegex","hostname","port","generateUrl","trimmedValue","toLowerCase","trim","test","substring","length","escapeIPv6Address","address","result","scheme","escapedHostName","URL"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,UAAR,GAAqBJ,OAAO,CAACK,WAAR,GAAsB,KAAK,CAA7F;AACA,MAAMC,SAAS,GAAG,6IAAlB;AACA,MAAMC,aAAa,GAAG,SAAtB;;AACA,SAASF,WAAT,CAAqBG,QAArB,EAA+BC,IAA/B,EAAqC;AACjC,SAAOC,WAAW,CAAC,OAAD,EAAUF,QAAV,EAAoBC,IAApB,CAAlB;AACH;;AACDT,OAAO,CAACK,WAAR,GAAsBA,WAAtB;;AACA,SAASD,UAAT,CAAoBI,QAApB,EAA8BC,IAA9B,EAAoC;AAChC,SAAOC,WAAW,CAAC,MAAD,EAASF,QAAT,EAAmBC,IAAnB,CAAlB;AACH;;AACDT,OAAO,CAACI,UAAR,GAAqBA,UAArB;;AACA,SAASD,UAAT,CAAoBF,KAApB,EAA2B;AACvB,MAAIA,KAAJ,EAAW;AACP,UAAMU,YAAY,GAAGV,KAAK,CAACW,WAAN,GAAoBC,IAApB,EAArB;;AACA,QAAIP,SAAS,CAACQ,IAAV,CAAeH,YAAf,CAAJ,EAAkC;AAC9B,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH;;AACDX,OAAO,CAACG,UAAR,GAAqBA,UAArB;;AACA,SAASD,aAAT,CAAuBM,QAAvB,EAAiC;AAC7B,MAAID,aAAa,CAACO,IAAd,CAAmBN,QAAnB,CAAJ,EAAkC;AAC9B,WAAOA,QAAQ,CAACO,SAAT,CAAmB,CAAnB,EAAsBP,QAAQ,CAACQ,MAAT,GAAkB,CAAxC,CAAP;AACH;;AACD,SAAOR,QAAP;AACH;;AACDR,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AACA,SAASe,iBAAT,CAA2BC,OAA3B,EAAoC;AAChC,MAAIC,MAAM,GAAGD,OAAO,CAACL,IAAR,EAAb;;AACA,MAAI,CAACN,aAAa,CAACO,IAAd,CAAmBK,MAAnB,CAAL,EAAiC;AAC7BA,IAAAA,MAAM,GAAI,IAAGD,OAAQ,GAArB;AACH;;AACD,SAAOC,MAAP;AACH;;AACD,SAAST,WAAT,CAAqBU,MAArB,EAA6BZ,QAA7B,EAAuCC,IAAvC,EAA6C;AACzC,MAAIY,eAAe,GAAGb,QAAtB;;AACA,MAAIL,UAAU,CAACK,QAAD,CAAd,EAA0B;AACtBa,IAAAA,eAAe,GAAGJ,iBAAiB,CAACT,QAAD,CAAnC;AACH;;AACD,SAAO,IAAIc,GAAJ,CAAS,GAAEF,MAAO,MAAKC,eAAgB,IAAGZ,IAAK,EAA/C,CAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cleanHostname = exports.isIpv6Host = exports.getHttpUrl = exports.getHttpsUrl = void 0;\nconst ipv6Regex = /^(\\[)?(((?:[0-9a-f]{1,4}))((?::[0-9a-f]{1,4}))*)?::((?:[0-9a-f]{1,4}))((?::[0-9a-f]{1,4}))*|((?:[0-9a-f]{1,4}))((?::[0-9a-f]{1,4})){7}(])?$/;\nconst bracketsRegex = /^\\[.*]$/;\nfunction getHttpsUrl(hostname, port) {\n    return generateUrl('https', hostname, port);\n}\nexports.getHttpsUrl = getHttpsUrl;\nfunction getHttpUrl(hostname, port) {\n    return generateUrl('http', hostname, port);\n}\nexports.getHttpUrl = getHttpUrl;\nfunction isIpv6Host(value) {\n    if (value) {\n        const trimmedValue = value.toLowerCase().trim();\n        if (ipv6Regex.test(trimmedValue)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isIpv6Host = isIpv6Host;\nfunction cleanHostname(hostname) {\n    if (bracketsRegex.test(hostname)) {\n        return hostname.substring(1, hostname.length - 1);\n    }\n    return hostname;\n}\nexports.cleanHostname = cleanHostname;\nfunction escapeIPv6Address(address) {\n    let result = address.trim();\n    if (!bracketsRegex.test(result)) {\n        result = `[${address}]`;\n    }\n    return result;\n}\nfunction generateUrl(scheme, hostname, port) {\n    let escapedHostName = hostname;\n    if (isIpv6Host(hostname)) {\n        escapedHostName = escapeIPv6Address(hostname);\n    }\n    return new URL(`${scheme}://${escapedHostName}:${port}`);\n}\n"]},"metadata":{},"sourceType":"script"}