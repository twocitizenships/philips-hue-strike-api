{"ast":null,"code":"import { UInt8Type } from '../types/UInt8Type';\nimport { BridgeTime } from './BridgeTime';\nexport const ABSOLUTE_TIME_REGEX = new RegExp(`${getDatePattern()}T${getTimePattern()}`);\nexport const RANDOMIZED_TIME_REGEX = new RegExp(`^${getDatePattern()}T${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RANDOMIZED_TIMER_REGEX = new RegExp(`^PT${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RECURRING_RANDOMIZED_TIME_REGEX = new RegExp(`^W(?<weekdays>[0-9]{3})/T${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RECURRING_RANDOMIZED_TIMER_REGEX = new RegExp(`^R(?<times>[0-9]{0,2})/PT${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RECURRING_TIME_REGEX = new RegExp(`^W(?<weekdays>[0-9]{3})/T${getTimePattern()}$`);\nexport const RECURRING_TIMER_REGEX = new RegExp(`^R(?<times>[0-9]{0,2})/PT${getTimePattern()}$`);\nexport const TIME_INTERVAL_REGEX = new RegExp(`^W(?<weekdays>[0-9]{3})/T${getTimePattern('from')}/T${getTimePattern('to')}$`);\nexport const TIMER_REGEX = new RegExp(`^PT${getTimePattern()}$`);\nexport function getTimePattern(name) {\n  const two_digits = '[0-9]{2}',\n        prefix = name || '';\n  return `(?<${prefix}hours>${two_digits}):(?<${prefix}minutes>${two_digits}):(?<${prefix}seconds>${two_digits})`;\n}\nexport function getDatePattern(name) {\n  const two_digits = '[0-9]{2}',\n        four_digits = '[0-9]{4}',\n        prefix = name || '';\n  return `(?<${prefix}year>${four_digits})-(?<${prefix}month>${two_digits})-(?<${prefix}day>${two_digits})`;\n}\nexport var WEEKDAYS;\n\n(function (WEEKDAYS) {\n  WEEKDAYS[WEEKDAYS[\"MONDAY\"] = 64] = \"MONDAY\";\n  WEEKDAYS[WEEKDAYS[\"TUESDAY\"] = 32] = \"TUESDAY\";\n  WEEKDAYS[WEEKDAYS[\"WEDNESDAY\"] = 16] = \"WEDNESDAY\";\n  WEEKDAYS[WEEKDAYS[\"THURSDAY\"] = 8] = \"THURSDAY\";\n  WEEKDAYS[WEEKDAYS[\"FRIDAY\"] = 4] = \"FRIDAY\";\n  WEEKDAYS[WEEKDAYS[\"SATURDAY\"] = 2] = \"SATURDAY\";\n  WEEKDAYS[WEEKDAYS[\"SUNDAY\"] = 1] = \"SUNDAY\";\n  WEEKDAYS[WEEKDAYS[\"WEEKDAY\"] = 124] = \"WEEKDAY\";\n  WEEKDAYS[WEEKDAYS[\"WEEKEND\"] = 3] = \"WEEKEND\";\n  WEEKDAYS[WEEKDAYS[\"ALL\"] = 127] = \"ALL\";\n})(WEEKDAYS || (WEEKDAYS = {}));\n\nexport const REOCCURRANCE_ATTRIBUTE = new UInt8Type({\n  name: 'reoccurs',\n  min: 0,\n  max: 99,\n  defaultValue: 0,\n  optional: true\n});\nexport const WEEKDAY_ATTRIBUTE = new UInt8Type({\n  name: 'weekdays',\n  min: 1,\n  max: WEEKDAYS.ALL\n});\nexport function isTimePattern(str) {\n  return ABSOLUTE_TIME_REGEX.test(str) || RECURRING_TIME_REGEX.test(str) || RANDOMIZED_TIME_REGEX.test(str) || RECURRING_RANDOMIZED_TIME_REGEX.test(str) || TIMER_REGEX.test(str) || RECURRING_TIMER_REGEX.test(str) || RANDOMIZED_TIMER_REGEX.test(str) || RECURRING_RANDOMIZED_TIMER_REGEX.test(str);\n}\nexport function isRecurring(value) {\n  let valueToTest;\n\n  if (value instanceof BridgeTime) {\n    valueToTest = value.toString();\n  } else {\n    valueToTest = value;\n  }\n\n  return RECURRING_TIME_REGEX.test(valueToTest) || RECURRING_RANDOMIZED_TIME_REGEX.test(valueToTest) || RECURRING_TIMER_REGEX.test(valueToTest) || RECURRING_RANDOMIZED_TIMER_REGEX.test(valueToTest);\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/timeUtil.js"],"names":["UInt8Type","BridgeTime","ABSOLUTE_TIME_REGEX","RegExp","getDatePattern","getTimePattern","RANDOMIZED_TIME_REGEX","RANDOMIZED_TIMER_REGEX","RECURRING_RANDOMIZED_TIME_REGEX","RECURRING_RANDOMIZED_TIMER_REGEX","RECURRING_TIME_REGEX","RECURRING_TIMER_REGEX","TIME_INTERVAL_REGEX","TIMER_REGEX","name","two_digits","prefix","four_digits","WEEKDAYS","REOCCURRANCE_ATTRIBUTE","min","max","defaultValue","optional","WEEKDAY_ATTRIBUTE","ALL","isTimePattern","str","test","isRecurring","value","valueToTest","toString"],"mappings":"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","sourcesContent":["import { UInt8Type } from '../types/UInt8Type';\nimport { BridgeTime } from './BridgeTime';\nexport const ABSOLUTE_TIME_REGEX = new RegExp(`${getDatePattern()}T${getTimePattern()}`);\nexport const RANDOMIZED_TIME_REGEX = new RegExp(`^${getDatePattern()}T${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RANDOMIZED_TIMER_REGEX = new RegExp(`^PT${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RECURRING_RANDOMIZED_TIME_REGEX = new RegExp(`^W(?<weekdays>[0-9]{3})/T${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RECURRING_RANDOMIZED_TIMER_REGEX = new RegExp(`^R(?<times>[0-9]{0,2})/PT${getTimePattern()}A${getTimePattern('random')}$`);\nexport const RECURRING_TIME_REGEX = new RegExp(`^W(?<weekdays>[0-9]{3})/T${getTimePattern()}$`);\nexport const RECURRING_TIMER_REGEX = new RegExp(`^R(?<times>[0-9]{0,2})/PT${getTimePattern()}$`);\nexport const TIME_INTERVAL_REGEX = new RegExp(`^W(?<weekdays>[0-9]{3})/T${getTimePattern('from')}/T${getTimePattern('to')}$`);\nexport const TIMER_REGEX = new RegExp(`^PT${getTimePattern()}$`);\nexport function getTimePattern(name) {\n    const two_digits = '[0-9]{2}', prefix = name || '';\n    return `(?<${prefix}hours>${two_digits}):(?<${prefix}minutes>${two_digits}):(?<${prefix}seconds>${two_digits})`;\n}\nexport function getDatePattern(name) {\n    const two_digits = '[0-9]{2}', four_digits = '[0-9]{4}', prefix = name || '';\n    return `(?<${prefix}year>${four_digits})-(?<${prefix}month>${two_digits})-(?<${prefix}day>${two_digits})`;\n}\nexport var WEEKDAYS;\n(function (WEEKDAYS) {\n    WEEKDAYS[WEEKDAYS[\"MONDAY\"] = 64] = \"MONDAY\";\n    WEEKDAYS[WEEKDAYS[\"TUESDAY\"] = 32] = \"TUESDAY\";\n    WEEKDAYS[WEEKDAYS[\"WEDNESDAY\"] = 16] = \"WEDNESDAY\";\n    WEEKDAYS[WEEKDAYS[\"THURSDAY\"] = 8] = \"THURSDAY\";\n    WEEKDAYS[WEEKDAYS[\"FRIDAY\"] = 4] = \"FRIDAY\";\n    WEEKDAYS[WEEKDAYS[\"SATURDAY\"] = 2] = \"SATURDAY\";\n    WEEKDAYS[WEEKDAYS[\"SUNDAY\"] = 1] = \"SUNDAY\";\n    WEEKDAYS[WEEKDAYS[\"WEEKDAY\"] = 124] = \"WEEKDAY\";\n    WEEKDAYS[WEEKDAYS[\"WEEKEND\"] = 3] = \"WEEKEND\";\n    WEEKDAYS[WEEKDAYS[\"ALL\"] = 127] = \"ALL\";\n})(WEEKDAYS || (WEEKDAYS = {}));\nexport const REOCCURRANCE_ATTRIBUTE = new UInt8Type({\n    name: 'reoccurs',\n    min: 0,\n    max: 99,\n    defaultValue: 0,\n    optional: true\n});\nexport const WEEKDAY_ATTRIBUTE = new UInt8Type({\n    name: 'weekdays',\n    min: 1,\n    max: WEEKDAYS.ALL\n});\nexport function isTimePattern(str) {\n    return ABSOLUTE_TIME_REGEX.test(str)\n        || RECURRING_TIME_REGEX.test(str)\n        || RANDOMIZED_TIME_REGEX.test(str)\n        || RECURRING_RANDOMIZED_TIME_REGEX.test(str)\n        || TIMER_REGEX.test(str)\n        || RECURRING_TIMER_REGEX.test(str)\n        || RANDOMIZED_TIMER_REGEX.test(str)\n        || RECURRING_RANDOMIZED_TIMER_REGEX.test(str);\n}\nexport function isRecurring(value) {\n    let valueToTest;\n    if (value instanceof BridgeTime) {\n        valueToTest = value.toString();\n    }\n    else {\n        valueToTest = value;\n    }\n    return RECURRING_TIME_REGEX.test(valueToTest)\n        || RECURRING_RANDOMIZED_TIME_REGEX.test(valueToTest)\n        || RECURRING_TIMER_REGEX.test(valueToTest)\n        || RECURRING_RANDOMIZED_TIMER_REGEX.test(valueToTest);\n}\n"]},"metadata":{},"sourceType":"module"}