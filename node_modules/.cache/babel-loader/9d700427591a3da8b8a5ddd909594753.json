{"ast":null,"code":"const v3 = require('node-hue-api').v3,\n      discovery = v3.discovery,\n      hueApi = v3.api;\n\nconst appName = 'strike-electric';\nconst deviceName = 'strike-electric-light-1';\n\nasync function discoverBridge() {\n  const discoveryResults = await discovery.nupnpSearch();\n\n  if (discoveryResults.length === 0) {\n    console.error('Failed to resolve any Hue Bridges');\n    return null;\n  } else {\n    // Ignoring that you could have more than one Hue Bridge on a network as this is unlikely in 99.9% of users situations\n    return discoveryResults[0].ipaddress;\n  }\n}\n\nasync function discoverAndCreateUser() {\n  const ipAddress = await discoverBridge(); // Create an unauthenticated instance of the Hue API so that we can create a new user\n\n  const unauthenticatedApi = await hueApi.createLocal(ipAddress).connect();\n  let createdUser;\n\n  try {\n    createdUser = await unauthenticatedApi.users.createUser(appName, deviceName);\n    console.log('*******************************************************************************\\n');\n    console.log('User has been created on the Hue Bridge. The following username can be used to\\n' + 'authenticate with the Bridge and provide full local access to the Hue Bridge.\\n' + 'YOU SHOULD TREAT THIS LIKE A PASSWORD\\n');\n    console.log(`Hue Bridge User: ${createdUser.username}`);\n    console.log(`Hue Bridge User Client Key: ${createdUser.clientkey}`);\n    console.log('*******************************************************************************\\n'); // Create a new API instance that is authenticated with the new user we created\n\n    const authenticatedApi = await hueApi.createLocal(ipAddress).connect(createdUser.username); // Do something with the authenticated user/api\n\n    const bridgeConfig = await authenticatedApi.configuration.getConfiguration();\n    console.log(`Connected to Hue Bridge: ${bridgeConfig.name} :: ${bridgeConfig.ipaddress}`);\n  } catch (err) {\n    if (err.getHueErrorType() === 101) {\n      console.error('The Link button on the bridge was not pressed. Please press the Link button and try again.');\n    } else {\n      console.error(`Unexpected Error: ${err.message}`);\n    }\n  }\n} // Invoke the discovery and create user code\n\n\ndiscoverAndCreateUser();","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/src/lib/connectToBridge.js"],"names":["v3","require","discovery","hueApi","api","appName","deviceName","discoverBridge","discoveryResults","nupnpSearch","length","console","error","ipaddress","discoverAndCreateUser","ipAddress","unauthenticatedApi","createLocal","connect","createdUser","users","createUser","log","username","clientkey","authenticatedApi","bridgeConfig","configuration","getConfiguration","name","err","getHueErrorType","message"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,EAAnC;AAAA,MACIE,SAAS,GAAGF,EAAE,CAACE,SADnB;AAAA,MAEIC,MAAM,GAAGH,EAAE,CAACI,GAFhB;;AAKA,MAAMC,OAAO,GAAG,iBAAhB;AACA,MAAMC,UAAU,GAAG,yBAAnB;;AAEA,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,gBAAgB,GAAG,MAAMN,SAAS,CAACO,WAAV,EAA/B;;AAEA,MAAID,gBAAgB,CAACE,MAAjB,KAA4B,CAAhC,EAAmC;AACjCC,IAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL;AACA,WAAOJ,gBAAgB,CAAC,CAAD,CAAhB,CAAoBK,SAA3B;AACD;AACF;;AAED,eAAeC,qBAAf,GAAuC;AACrC,QAAMC,SAAS,GAAG,MAAMR,cAAc,EAAtC,CADqC,CAGrC;;AACA,QAAMS,kBAAkB,GAAG,MAAMb,MAAM,CAACc,WAAP,CAAmBF,SAAnB,EAA8BG,OAA9B,EAAjC;AAEA,MAAIC,WAAJ;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAG,MAAMH,kBAAkB,CAACI,KAAnB,CAAyBC,UAAzB,CAAoChB,OAApC,EAA6CC,UAA7C,CAApB;AACAK,IAAAA,OAAO,CAACW,GAAR,CAAY,mFAAZ;AACAX,IAAAA,OAAO,CAACW,GAAR,CAAY,qFACA,iFADA,GAEA,yCAFZ;AAGAX,IAAAA,OAAO,CAACW,GAAR,CAAa,oBAAmBH,WAAW,CAACI,QAAS,EAArD;AACAZ,IAAAA,OAAO,CAACW,GAAR,CAAa,+BAA8BH,WAAW,CAACK,SAAU,EAAjE;AACAb,IAAAA,OAAO,CAACW,GAAR,CAAY,mFAAZ,EARE,CAUF;;AACA,UAAMG,gBAAgB,GAAG,MAAMtB,MAAM,CAACc,WAAP,CAAmBF,SAAnB,EAA8BG,OAA9B,CAAsCC,WAAW,CAACI,QAAlD,CAA/B,CAXE,CAaF;;AACA,UAAMG,YAAY,GAAG,MAAMD,gBAAgB,CAACE,aAAjB,CAA+BC,gBAA/B,EAA3B;AACAjB,IAAAA,OAAO,CAACW,GAAR,CAAa,4BAA2BI,YAAY,CAACG,IAAK,OAAMH,YAAY,CAACb,SAAU,EAAvF;AAED,GAjBD,CAiBE,OAAMiB,GAAN,EAAW;AACX,QAAIA,GAAG,CAACC,eAAJ,OAA0B,GAA9B,EAAmC;AACjCpB,MAAAA,OAAO,CAACC,KAAR,CAAc,4FAAd;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,KAAR,CAAe,qBAAoBkB,GAAG,CAACE,OAAQ,EAA/C;AACD;AACF;AACF,C,CAED;;;AACAlB,qBAAqB","sourcesContent":["const v3 = require('node-hue-api').v3\n  , discovery = v3.discovery\n  , hueApi = v3.api \n;\n\nconst appName = 'strike-electric';\nconst deviceName = 'strike-electric-light-1';\n\nasync function discoverBridge() {\n  const discoveryResults = await discovery.nupnpSearch();\n\n  if (discoveryResults.length === 0) {\n    console.error('Failed to resolve any Hue Bridges');\n    return null;\n  } else {\n    // Ignoring that you could have more than one Hue Bridge on a network as this is unlikely in 99.9% of users situations\n    return discoveryResults[0].ipaddress;\n  }\n}\n\nasync function discoverAndCreateUser() {\n  const ipAddress = await discoverBridge();\n\n  // Create an unauthenticated instance of the Hue API so that we can create a new user\n  const unauthenticatedApi = await hueApi.createLocal(ipAddress).connect();\n  \n  let createdUser;\n  try {\n    createdUser = await unauthenticatedApi.users.createUser(appName, deviceName);\n    console.log('*******************************************************************************\\n');\n    console.log('User has been created on the Hue Bridge. The following username can be used to\\n' +\n                'authenticate with the Bridge and provide full local access to the Hue Bridge.\\n' +\n                'YOU SHOULD TREAT THIS LIKE A PASSWORD\\n');\n    console.log(`Hue Bridge User: ${createdUser.username}`);\n    console.log(`Hue Bridge User Client Key: ${createdUser.clientkey}`);\n    console.log('*******************************************************************************\\n');\n\n    // Create a new API instance that is authenticated with the new user we created\n    const authenticatedApi = await hueApi.createLocal(ipAddress).connect(createdUser.username);\n\n    // Do something with the authenticated user/api\n    const bridgeConfig = await authenticatedApi.configuration.getConfiguration();\n    console.log(`Connected to Hue Bridge: ${bridgeConfig.name} :: ${bridgeConfig.ipaddress}`);\n\n  } catch(err) {\n    if (err.getHueErrorType() === 101) {\n      console.error('The Link button on the bridge was not pressed. Please press the Link button and try again.');\n    } else {\n      console.error(`Unexpected Error: ${err.message}`);\n    }\n  }\n}\n\n// Invoke the discovery and create user code\ndiscoverAndCreateUser();"]},"metadata":{},"sourceType":"module"}