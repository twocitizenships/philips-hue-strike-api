{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteBootstrap = void 0;\n\nconst HttpClientFetch_1 = require(\"./HttpClientFetch\");\n\nconst RemoteApi_1 = require(\"./RemoteApi\");\n\nconst Api_1 = require(\"../Api\");\n\nconst Transport_1 = require(\"./Transport\");\n\nclass RemoteBootstrap {\n  constructor(clientId, clientSecret, rateLimits) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    this.remoteApi = new RemoteApi_1.RemoteApi(clientId, clientSecret);\n    this.rateLimits = rateLimits;\n  }\n  /**\n   * Obtains the AuthCode URL that can be used to request OAuth tokens for your user/application details\n   * @param deviceId The device ID of the remote application.\n   * @param appId The application ID of the remote application.\n   * @param state A unique state value that will be provided back to you in the reponse payload to prevent against cross-site forgeries.\n   * @returns The URL that can be used to start the exchange for OAuth tokens.\n   */\n\n\n  getAuthCodeUrl(deviceId, appId, state) {\n    // if (! deviceId) {\n    //   throw new ApiError('A unique deviceid is required for your application when accessing the Remote API');\n    // }\n    //\n    // if (! state) {\n    //   throw new ApiError('A state value must be provided to mitigate against cross-site request forgeries');\n    // }\n    //\n    // if (! appId) {\n    //   throw new ApiError('An Application ID (appId parameter) must be provided that matches the AppId for the remote application you registered with the Hue Portal');\n    // }\n    return `${this.remoteApi.baseUrl}/v2/oauth2/authorize?client_id=${this.clientId}&state=${state}&deviceid=${deviceId}&appid=${appId}&response_type=code`;\n  }\n  /**\n   * Connects to the Remote API using the provided access code, exchanging it for valid OAuth tokens that can be used\n   * to connect again in the future.\n   *\n   * This function is used to bootstrap the first connection to the remote API for a new application.\n   *\n   * @param code The authorization code obtained from the callback made by the remote portal to your application\n   * @param username The username for the remote application.\n   * @param timeout The timeout for the access token request to the remote API, defaults to 12 seconds\n   * @param deviceType The device type for the application connection.\n   * @param remoteBridgeId The id of the bridge in the remote portal, defaults to 0.\n   */\n\n\n  connectWithCode(code, username, timeout, deviceType, remoteBridgeId) {\n    const self = this;\n    return self.remoteApi.getToken(code).then(tokens => {\n      if (username) {\n        return Promise.resolve(username);\n      } else {\n        return self.remoteApi.createRemoteUsername(remoteBridgeId, deviceType);\n      }\n    }).then(username => {\n      return self._getRemoteApi(username, timeout);\n    });\n  }\n  /**\n   * Connects to the Remote API using the provided OAuth tokens that were previously obtained.\n   * @param accessToken The OAuth access token.\n   * @param refreshToken The OAuth refresh token.\n   * @param username The remote username used to connect with hue bridge\n   * @param timeout The timeout for the access token request to the remote API, defaults to 12 seconds\n   * @param deviceType The device type for the application connection.\n   */\n\n\n  connectWithTokens(accessToken, refreshToken, username, timeout, deviceType) {\n    const self = this;\n    self.remoteApi.setAccessToken(accessToken);\n    self.remoteApi.setRefreshToken(refreshToken);\n    let promise;\n\n    if (username) {\n      promise = Promise.resolve(username);\n    } else {\n      promise = self.remoteApi.createRemoteUsername(deviceType);\n    }\n\n    return promise.then(username => {\n      return self._getRemoteApi(username, timeout);\n    });\n  }\n\n  _getRemoteApi(username, timeout) {\n    const self = this,\n          baseUrl = `${self.remoteApi.baseUrl}/bridge`,\n          config = {\n      remote: true,\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      baseUrl: baseUrl,\n      bridgeName: `remote:${this.remoteApi.clientId}`,\n      username: username\n    };\n    const clientConfig = {\n      baseURL: baseUrl,\n      headers: {\n        Authorization: `Bearer ${self.remoteApi.accessToken}`\n      },\n      timeout: getTimeout(timeout)\n    },\n          transport = new Transport_1.Transport((0, HttpClientFetch_1.create)(clientConfig), this.rateLimits.transportRateLimit, username),\n          api = new Api_1.Api(config, transport, this.rateLimits, self.remoteApi);\n    return Promise.resolve(api);\n  }\n\n}\n\nexports.RemoteBootstrap = RemoteBootstrap;\n\nfunction getTimeout(timeout) {\n  return timeout || 12000; // 12 Seconds\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/RemoteBootstrap.js"],"names":["Object","defineProperty","exports","value","RemoteBootstrap","HttpClientFetch_1","require","RemoteApi_1","Api_1","Transport_1","constructor","clientId","clientSecret","rateLimits","remoteApi","RemoteApi","getAuthCodeUrl","deviceId","appId","state","baseUrl","connectWithCode","code","username","timeout","deviceType","remoteBridgeId","self","getToken","then","tokens","Promise","resolve","createRemoteUsername","_getRemoteApi","connectWithTokens","accessToken","refreshToken","setAccessToken","setRefreshToken","promise","config","remote","bridgeName","clientConfig","baseURL","headers","Authorization","getTimeout","transport","Transport","create","transportRateLimit","api","Api"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteBootstrap = void 0;\nconst HttpClientFetch_1 = require(\"./HttpClientFetch\");\nconst RemoteApi_1 = require(\"./RemoteApi\");\nconst Api_1 = require(\"../Api\");\nconst Transport_1 = require(\"./Transport\");\nclass RemoteBootstrap {\n    constructor(clientId, clientSecret, rateLimits) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.remoteApi = new RemoteApi_1.RemoteApi(clientId, clientSecret);\n        this.rateLimits = rateLimits;\n    }\n    /**\n     * Obtains the AuthCode URL that can be used to request OAuth tokens for your user/application details\n     * @param deviceId The device ID of the remote application.\n     * @param appId The application ID of the remote application.\n     * @param state A unique state value that will be provided back to you in the reponse payload to prevent against cross-site forgeries.\n     * @returns The URL that can be used to start the exchange for OAuth tokens.\n     */\n    getAuthCodeUrl(deviceId, appId, state) {\n        // if (! deviceId) {\n        //   throw new ApiError('A unique deviceid is required for your application when accessing the Remote API');\n        // }\n        //\n        // if (! state) {\n        //   throw new ApiError('A state value must be provided to mitigate against cross-site request forgeries');\n        // }\n        //\n        // if (! appId) {\n        //   throw new ApiError('An Application ID (appId parameter) must be provided that matches the AppId for the remote application you registered with the Hue Portal');\n        // }\n        return `${this.remoteApi.baseUrl}/v2/oauth2/authorize?client_id=${this.clientId}&state=${state}&deviceid=${deviceId}&appid=${appId}&response_type=code`;\n    }\n    /**\n     * Connects to the Remote API using the provided access code, exchanging it for valid OAuth tokens that can be used\n     * to connect again in the future.\n     *\n     * This function is used to bootstrap the first connection to the remote API for a new application.\n     *\n     * @param code The authorization code obtained from the callback made by the remote portal to your application\n     * @param username The username for the remote application.\n     * @param timeout The timeout for the access token request to the remote API, defaults to 12 seconds\n     * @param deviceType The device type for the application connection.\n     * @param remoteBridgeId The id of the bridge in the remote portal, defaults to 0.\n     */\n    connectWithCode(code, username, timeout, deviceType, remoteBridgeId) {\n        const self = this;\n        return self.remoteApi.getToken(code)\n            .then(tokens => {\n            if (username) {\n                return Promise.resolve(username);\n            }\n            else {\n                return self.remoteApi.createRemoteUsername(remoteBridgeId, deviceType);\n            }\n        })\n            .then(username => {\n            return self._getRemoteApi(username, timeout);\n        });\n    }\n    /**\n     * Connects to the Remote API using the provided OAuth tokens that were previously obtained.\n     * @param accessToken The OAuth access token.\n     * @param refreshToken The OAuth refresh token.\n     * @param username The remote username used to connect with hue bridge\n     * @param timeout The timeout for the access token request to the remote API, defaults to 12 seconds\n     * @param deviceType The device type for the application connection.\n     */\n    connectWithTokens(accessToken, refreshToken, username, timeout, deviceType) {\n        const self = this;\n        self.remoteApi.setAccessToken(accessToken);\n        self.remoteApi.setRefreshToken(refreshToken);\n        let promise;\n        if (username) {\n            promise = Promise.resolve(username);\n        }\n        else {\n            promise = self.remoteApi.createRemoteUsername(deviceType);\n        }\n        return promise.then(username => {\n            return self._getRemoteApi(username, timeout);\n        });\n    }\n    _getRemoteApi(username, timeout) {\n        const self = this, baseUrl = `${self.remoteApi.baseUrl}/bridge`, config = {\n            remote: true,\n            clientId: this.clientId,\n            clientSecret: this.clientSecret,\n            baseUrl: baseUrl,\n            bridgeName: `remote:${this.remoteApi.clientId}`,\n            username: username,\n        };\n        const clientConfig = {\n            baseURL: baseUrl,\n            headers: {\n                Authorization: `Bearer ${self.remoteApi.accessToken}`\n            },\n            timeout: getTimeout(timeout)\n        }, transport = new Transport_1.Transport((0, HttpClientFetch_1.create)(clientConfig), this.rateLimits.transportRateLimit, username), api = new Api_1.Api(config, transport, this.rateLimits, self.remoteApi);\n        return Promise.resolve(api);\n    }\n}\nexports.RemoteBootstrap = RemoteBootstrap;\nfunction getTimeout(timeout) {\n    return timeout || 12000; // 12 Seconds\n}\n"]},"metadata":{},"sourceType":"script"}