{"ast":null,"code":"import { ABSOLUTE_TIME_REGEX, RANDOMIZED_TIME_REGEX, RANDOMIZED_TIMER_REGEX, RECURRING_RANDOMIZED_TIME_REGEX, RECURRING_RANDOMIZED_TIMER_REGEX, RECURRING_TIME_REGEX, RECURRING_TIMER_REGEX, TIME_INTERVAL_REGEX, TIMER_REGEX } from './time/timeUtil';\nimport { AbsoluteTime } from './time/AbsoluteTime';\nimport { RecurringTime } from './time/RecurringTime';\nimport { Timer } from './time/Timer';\nimport { TimeInterval } from './time/TimeInterval';\nimport { RandomizedTime } from './time/RandomizedTime';\nimport { RecurringRandomizedTime } from './time/RecurringRandomizedTime';\nimport { RecurringTimer } from './time/RecurringTimer';\nimport { RandomizedTimer } from './time/RandomizedTimer';\nimport { RecurringRandomizedTimer } from './time/RecurringRandomizedTimer';\nimport { HueBridgeModelError } from './HueBridgeModelError';\nexport { isRecurring, isTimePattern, WEEKDAYS } from './time/timeUtil';\nexport { AbsoluteTime, RecurringTime, Timer, TimeInterval, RandomizedTime, RecurringRandomizedTime, RecurringTimer, RandomizedTimer, RecurringRandomizedTimer };\nexport function createFromString(str) {\n  if (ABSOLUTE_TIME_REGEX.test(str)) {\n    return new AbsoluteTime(str);\n  } else if (RECURRING_TIME_REGEX.test(str)) {\n    return new RecurringTime(str);\n  } else if (TIMER_REGEX.test(str)) {\n    return new Timer(str);\n  } else if (TIME_INTERVAL_REGEX.test(str)) {\n    return new TimeInterval(str);\n  } else if (RANDOMIZED_TIME_REGEX.test(str)) {\n    return new RandomizedTime(str);\n  } else if (RECURRING_RANDOMIZED_TIME_REGEX.test(str)) {\n    return new RecurringRandomizedTime(str);\n  } else if (RECURRING_TIMER_REGEX.test(str)) {\n    return new RecurringTimer(str);\n  } else if (RANDOMIZED_TIMER_REGEX.test(str)) {\n    return new RandomizedTimer(str);\n  } else if (RECURRING_RANDOMIZED_TIMER_REGEX.test(str)) {\n    return new RecurringRandomizedTimer(str);\n  } else {\n    throw new HueBridgeModelError(`Unable to determine a valid time pattern for string: \"${str}\"`);\n  }\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time.js"],"names":["ABSOLUTE_TIME_REGEX","RANDOMIZED_TIME_REGEX","RANDOMIZED_TIMER_REGEX","RECURRING_RANDOMIZED_TIME_REGEX","RECURRING_RANDOMIZED_TIMER_REGEX","RECURRING_TIME_REGEX","RECURRING_TIMER_REGEX","TIME_INTERVAL_REGEX","TIMER_REGEX","AbsoluteTime","RecurringTime","Timer","TimeInterval","RandomizedTime","RecurringRandomizedTime","RecurringTimer","RandomizedTimer","RecurringRandomizedTimer","HueBridgeModelError","isRecurring","isTimePattern","WEEKDAYS","createFromString","str","test"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,qBAA9B,EAAqDC,sBAArD,EAA6EC,+BAA7E,EAA8GC,gCAA9G,EAAgJC,oBAAhJ,EAAsKC,qBAAtK,EAA6LC,mBAA7L,EAAkNC,WAAlN,QAAqO,iBAArO;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,uBAAT,QAAwC,gCAAxC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,QAArC,QAAqD,iBAArD;AACA,SAASZ,YAAT,EAAuBC,aAAvB,EAAsCC,KAAtC,EAA6CC,YAA7C,EAA2DC,cAA3D,EAA2EC,uBAA3E,EAAoGC,cAApG,EAAoHC,eAApH,EAAqIC,wBAArI;AACA,OAAO,SAASK,gBAAT,CAA0BC,GAA1B,EAA+B;AAClC,MAAIvB,mBAAmB,CAACwB,IAApB,CAAyBD,GAAzB,CAAJ,EAAmC;AAC/B,WAAO,IAAId,YAAJ,CAAiBc,GAAjB,CAAP;AACH,GAFD,MAGK,IAAIlB,oBAAoB,CAACmB,IAArB,CAA0BD,GAA1B,CAAJ,EAAoC;AACrC,WAAO,IAAIb,aAAJ,CAAkBa,GAAlB,CAAP;AACH,GAFI,MAGA,IAAIf,WAAW,CAACgB,IAAZ,CAAiBD,GAAjB,CAAJ,EAA2B;AAC5B,WAAO,IAAIZ,KAAJ,CAAUY,GAAV,CAAP;AACH,GAFI,MAGA,IAAIhB,mBAAmB,CAACiB,IAApB,CAAyBD,GAAzB,CAAJ,EAAmC;AACpC,WAAO,IAAIX,YAAJ,CAAiBW,GAAjB,CAAP;AACH,GAFI,MAGA,IAAItB,qBAAqB,CAACuB,IAAtB,CAA2BD,GAA3B,CAAJ,EAAqC;AACtC,WAAO,IAAIV,cAAJ,CAAmBU,GAAnB,CAAP;AACH,GAFI,MAGA,IAAIpB,+BAA+B,CAACqB,IAAhC,CAAqCD,GAArC,CAAJ,EAA+C;AAChD,WAAO,IAAIT,uBAAJ,CAA4BS,GAA5B,CAAP;AACH,GAFI,MAGA,IAAIjB,qBAAqB,CAACkB,IAAtB,CAA2BD,GAA3B,CAAJ,EAAqC;AACtC,WAAO,IAAIR,cAAJ,CAAmBQ,GAAnB,CAAP;AACH,GAFI,MAGA,IAAIrB,sBAAsB,CAACsB,IAAvB,CAA4BD,GAA5B,CAAJ,EAAsC;AACvC,WAAO,IAAIP,eAAJ,CAAoBO,GAApB,CAAP;AACH,GAFI,MAGA,IAAInB,gCAAgC,CAACoB,IAAjC,CAAsCD,GAAtC,CAAJ,EAAgD;AACjD,WAAO,IAAIN,wBAAJ,CAA6BM,GAA7B,CAAP;AACH,GAFI,MAGA;AACD,UAAM,IAAIL,mBAAJ,CAAyB,yDAAwDK,GAAI,GAArF,CAAN;AACH;AACJ","sourcesContent":["import { ABSOLUTE_TIME_REGEX, RANDOMIZED_TIME_REGEX, RANDOMIZED_TIMER_REGEX, RECURRING_RANDOMIZED_TIME_REGEX, RECURRING_RANDOMIZED_TIMER_REGEX, RECURRING_TIME_REGEX, RECURRING_TIMER_REGEX, TIME_INTERVAL_REGEX, TIMER_REGEX } from './time/timeUtil';\nimport { AbsoluteTime } from './time/AbsoluteTime';\nimport { RecurringTime } from './time/RecurringTime';\nimport { Timer } from './time/Timer';\nimport { TimeInterval } from './time/TimeInterval';\nimport { RandomizedTime } from './time/RandomizedTime';\nimport { RecurringRandomizedTime } from './time/RecurringRandomizedTime';\nimport { RecurringTimer } from './time/RecurringTimer';\nimport { RandomizedTimer } from './time/RandomizedTimer';\nimport { RecurringRandomizedTimer } from './time/RecurringRandomizedTimer';\nimport { HueBridgeModelError } from './HueBridgeModelError';\nexport { isRecurring, isTimePattern, WEEKDAYS } from './time/timeUtil';\nexport { AbsoluteTime, RecurringTime, Timer, TimeInterval, RandomizedTime, RecurringRandomizedTime, RecurringTimer, RandomizedTimer, RecurringRandomizedTimer };\nexport function createFromString(str) {\n    if (ABSOLUTE_TIME_REGEX.test(str)) {\n        return new AbsoluteTime(str);\n    }\n    else if (RECURRING_TIME_REGEX.test(str)) {\n        return new RecurringTime(str);\n    }\n    else if (TIMER_REGEX.test(str)) {\n        return new Timer(str);\n    }\n    else if (TIME_INTERVAL_REGEX.test(str)) {\n        return new TimeInterval(str);\n    }\n    else if (RANDOMIZED_TIME_REGEX.test(str)) {\n        return new RandomizedTime(str);\n    }\n    else if (RECURRING_RANDOMIZED_TIME_REGEX.test(str)) {\n        return new RecurringRandomizedTime(str);\n    }\n    else if (RECURRING_TIMER_REGEX.test(str)) {\n        return new RecurringTimer(str);\n    }\n    else if (RANDOMIZED_TIMER_REGEX.test(str)) {\n        return new RandomizedTimer(str);\n    }\n    else if (RECURRING_RANDOMIZED_TIMER_REGEX.test(str)) {\n        return new RecurringRandomizedTimer(str);\n    }\n    else {\n        throw new HueBridgeModelError(`Unable to determine a valid time pattern for string: \"${str}\"`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}