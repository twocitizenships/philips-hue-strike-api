{"ast":null,"code":"import { BridgeAction } from './BridgeAction';\nimport { LightStateAction } from './LightStateAction';\nimport { GroupStateAction } from './GroupStateAction';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nimport { SensorStateAction } from './SensorStateAction';\nimport { ScheduleStateAction } from './ScheduleStateAction';\nimport { SceneAction } from './SceneAction';\nconst REGEX_GROUP_ACTION = /\\/groups\\/(.*)\\/action/,\n      REGEX_SENSOR_ACTION = /\\/sensors\\/(.*)\\/state/,\n      REGEX_LIGHT_ACTION = /\\/lights\\/(.*)\\//,\n      REGEX_SCHEDULE_ACTION = /\\/schedules\\/(.*)/,\n      REGEX_SCHEDULES = /\\/schedules$/,\n      REGEX_SCENE_ACTION = /\\/scenes\\/(.*)/;\nexport function createAction(data) {\n  if (data instanceof BridgeAction) {\n    return data;\n  } else if (data.address) {\n    if (REGEX_GROUP_ACTION.exec(data.address)) {\n      return createGroupAction(data.address, data.body);\n    } else if (REGEX_LIGHT_ACTION.exec(data.address)) {\n      return createLightStateAction(data.address, data.body);\n    } else if (REGEX_SENSOR_ACTION.exec(data.address)) {\n      return createSensorStateAction(data.address, data.body);\n    } else if (REGEX_SCENE_ACTION.exec(data.address)) {\n      return createSceneAction(data.address, data.body);\n    } else if (REGEX_SCHEDULE_ACTION.exec(data.address)) {\n      return createScheduleAction(data.address, data.body);\n    } else if (REGEX_SCHEDULES.exec(data.address)) {\n      return createSchedulesAction(data.address, data.body);\n    } else {\n      throw new HueBridgeModelError(`Failed to match an action to the address ${data.address}`);\n    }\n  } else {\n    throw new HueBridgeModelError('No address property for action');\n  }\n}\n\nfunction createLightStateAction(address, body) {\n  const match = REGEX_LIGHT_ACTION.exec(address);\n\n  if (!match) {\n    throw new HueBridgeModelError(`Invalid address value for light state action '${address}'`);\n  }\n\n  const id = match[1];\n  return new LightStateAction(id).withState(body);\n}\n\nfunction createGroupAction(address, body) {\n  const match = REGEX_GROUP_ACTION.exec(address);\n\n  if (!match) {\n    throw new HueBridgeModelError(`Invalid address value for group action '${address}'`);\n  }\n\n  const group = match[1];\n  return new GroupStateAction(group).withState(body);\n}\n\nfunction createSensorStateAction(address, body) {\n  const match = REGEX_SENSOR_ACTION.exec(address);\n\n  if (!match) {\n    throw new HueBridgeModelError(`Invalid address value for sensor state action '${address}'`);\n  }\n\n  const id = match[1];\n  return new SensorStateAction(id).withState(body);\n}\n\nfunction createScheduleAction(address, body) {\n  const match = REGEX_SCHEDULE_ACTION.exec(address);\n\n  if (!match) {\n    throw new HueBridgeModelError(`Invalid address value for schedule action '${address}'`);\n  }\n\n  const id = match[1];\n  return new ScheduleStateAction(id).withState(body);\n}\n\nfunction createSchedulesAction(address, body) {\n  const match = REGEX_SCHEDULES.exec(address);\n\n  if (!match) {\n    throw new HueBridgeModelError(`Not a valid schedules action, '${address}'`);\n  }\n\n  return new ScheduleStateAction().withState(body);\n}\n\nfunction createSceneAction(address, body) {\n  const match = REGEX_SCENE_ACTION.exec(address);\n\n  if (!match) {\n    throw new HueBridgeModelError(`Invalid address value for scenes action '${address}'`);\n  }\n\n  const id = match[1];\n  return new SceneAction(id).withState(body);\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/actions/index.js"],"names":["BridgeAction","LightStateAction","GroupStateAction","HueBridgeModelError","SensorStateAction","ScheduleStateAction","SceneAction","REGEX_GROUP_ACTION","REGEX_SENSOR_ACTION","REGEX_LIGHT_ACTION","REGEX_SCHEDULE_ACTION","REGEX_SCHEDULES","REGEX_SCENE_ACTION","createAction","data","address","exec","createGroupAction","body","createLightStateAction","createSensorStateAction","createSceneAction","createScheduleAction","createSchedulesAction","match","id","withState","group"],"mappings":"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","sourcesContent":["import { BridgeAction } from './BridgeAction';\nimport { LightStateAction } from './LightStateAction';\nimport { GroupStateAction } from './GroupStateAction';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nimport { SensorStateAction } from './SensorStateAction';\nimport { ScheduleStateAction } from './ScheduleStateAction';\nimport { SceneAction } from './SceneAction';\nconst REGEX_GROUP_ACTION = /\\/groups\\/(.*)\\/action/, REGEX_SENSOR_ACTION = /\\/sensors\\/(.*)\\/state/, REGEX_LIGHT_ACTION = /\\/lights\\/(.*)\\//, REGEX_SCHEDULE_ACTION = /\\/schedules\\/(.*)/, REGEX_SCHEDULES = /\\/schedules$/, REGEX_SCENE_ACTION = /\\/scenes\\/(.*)/;\nexport function createAction(data) {\n    if (data instanceof BridgeAction) {\n        return data;\n    }\n    else if (data.address) {\n        if (REGEX_GROUP_ACTION.exec(data.address)) {\n            return createGroupAction(data.address, data.body);\n        }\n        else if (REGEX_LIGHT_ACTION.exec(data.address)) {\n            return createLightStateAction(data.address, data.body);\n        }\n        else if (REGEX_SENSOR_ACTION.exec(data.address)) {\n            return createSensorStateAction(data.address, data.body);\n        }\n        else if (REGEX_SCENE_ACTION.exec(data.address)) {\n            return createSceneAction(data.address, data.body);\n        }\n        else if (REGEX_SCHEDULE_ACTION.exec(data.address)) {\n            return createScheduleAction(data.address, data.body);\n        }\n        else if (REGEX_SCHEDULES.exec(data.address)) {\n            return createSchedulesAction(data.address, data.body);\n        }\n        else {\n            throw new HueBridgeModelError(`Failed to match an action to the address ${data.address}`);\n        }\n    }\n    else {\n        throw new HueBridgeModelError('No address property for action');\n    }\n}\nfunction createLightStateAction(address, body) {\n    const match = REGEX_LIGHT_ACTION.exec(address);\n    if (!match) {\n        throw new HueBridgeModelError(`Invalid address value for light state action '${address}'`);\n    }\n    const id = match[1];\n    return new LightStateAction(id).withState(body);\n}\nfunction createGroupAction(address, body) {\n    const match = REGEX_GROUP_ACTION.exec(address);\n    if (!match) {\n        throw new HueBridgeModelError(`Invalid address value for group action '${address}'`);\n    }\n    const group = match[1];\n    return new GroupStateAction(group).withState(body);\n}\nfunction createSensorStateAction(address, body) {\n    const match = REGEX_SENSOR_ACTION.exec(address);\n    if (!match) {\n        throw new HueBridgeModelError(`Invalid address value for sensor state action '${address}'`);\n    }\n    const id = match[1];\n    return new SensorStateAction(id).withState(body);\n}\nfunction createScheduleAction(address, body) {\n    const match = REGEX_SCHEDULE_ACTION.exec(address);\n    if (!match) {\n        throw new HueBridgeModelError(`Invalid address value for schedule action '${address}'`);\n    }\n    const id = match[1];\n    return new ScheduleStateAction(id).withState(body);\n}\nfunction createSchedulesAction(address, body) {\n    const match = REGEX_SCHEDULES.exec(address);\n    if (!match) {\n        throw new HueBridgeModelError(`Not a valid schedules action, '${address}'`);\n    }\n    return new ScheduleStateAction().withState(body);\n}\nfunction createSceneAction(address, body) {\n    const match = REGEX_SCENE_ACTION.exec(address);\n    if (!match) {\n        throw new HueBridgeModelError(`Invalid address value for scenes action '${address}'`);\n    }\n    const id = match[1];\n    return new SceneAction(id).withState(body);\n}\n"]},"metadata":{},"sourceType":"module"}