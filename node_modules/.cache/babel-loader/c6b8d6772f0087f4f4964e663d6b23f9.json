{"ast":null,"code":"import { ObjectType, UInt8Type } from '../../types';\nimport { BridgeAction } from './BridgeAction';\nimport { LightState } from '../lightstate/LightState';\nimport { Light } from '../Light';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nconst ATTRIBUTES = [new UInt8Type({\n  name: 'light'\n}), new ObjectType({\n  name: 'body'\n}), new ObjectType({\n  name: 'state'\n}) //TODO this is an actual LightState object, could utilize another type\n];\nexport class LightStateAction extends BridgeAction {\n  constructor(light) {\n    super(ATTRIBUTES, 'PUT');\n    this.light = light;\n  }\n\n  get address() {\n    return `/lights/${this.light}/state`;\n  }\n\n  get light() {\n    return this.getAttributeValue('light');\n  }\n\n  set light(value) {\n    if (value instanceof Light) {\n      this.setAttributeValue('light', value.id);\n    } else {\n      this.setAttributeValue('light', value);\n    }\n  }\n\n  withState(state) {\n    let value;\n\n    if (state instanceof LightState) {\n      value = state;\n    } else {\n      value = new LightState().populate(state);\n    }\n\n    this.setAttributeValue('state', value.getPayload());\n    return this;\n  }\n\n  get body() {\n    const state = this.getAttributeValue('state');\n\n    if (state) {\n      return state;\n    }\n\n    throw new HueBridgeModelError('No state has been set on the LightStateAction');\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/actions/LightStateAction.js"],"names":["ObjectType","UInt8Type","BridgeAction","LightState","Light","HueBridgeModelError","ATTRIBUTES","name","LightStateAction","constructor","light","address","getAttributeValue","value","setAttributeValue","id","withState","state","populate","getPayload","body"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,aAAtC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,MAAMC,UAAU,GAAG,CACf,IAAIL,SAAJ,CAAc;AAAEM,EAAAA,IAAI,EAAE;AAAR,CAAd,CADe,EAEf,IAAIP,UAAJ,CAAe;AAAEO,EAAAA,IAAI,EAAE;AAAR,CAAf,CAFe,EAGf,IAAIP,UAAJ,CAAe;AAAEO,EAAAA,IAAI,EAAE;AAAR,CAAf,CAHe,CAGoB;AAHpB,CAAnB;AAKA,OAAO,MAAMC,gBAAN,SAA+BN,YAA/B,CAA4C;AAC/CO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMJ,UAAN,EAAkB,KAAlB;AACA,SAAKI,KAAL,GAAaA,KAAb;AACH;;AACU,MAAPC,OAAO,GAAG;AACV,WAAQ,WAAU,KAAKD,KAAM,QAA7B;AACH;;AACQ,MAALA,KAAK,GAAG;AACR,WAAO,KAAKE,iBAAL,CAAuB,OAAvB,CAAP;AACH;;AACQ,MAALF,KAAK,CAACG,KAAD,EAAQ;AACb,QAAIA,KAAK,YAAYT,KAArB,EAA4B;AACxB,WAAKU,iBAAL,CAAuB,OAAvB,EAAgCD,KAAK,CAACE,EAAtC;AACH,KAFD,MAGK;AACD,WAAKD,iBAAL,CAAuB,OAAvB,EAAgCD,KAAhC;AACH;AACJ;;AACDG,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAIJ,KAAJ;;AACA,QAAII,KAAK,YAAYd,UAArB,EAAiC;AAC7BU,MAAAA,KAAK,GAAGI,KAAR;AACH,KAFD,MAGK;AACDJ,MAAAA,KAAK,GAAG,IAAIV,UAAJ,GAAiBe,QAAjB,CAA0BD,KAA1B,CAAR;AACH;;AACD,SAAKH,iBAAL,CAAuB,OAAvB,EAAgCD,KAAK,CAACM,UAAN,EAAhC;AACA,WAAO,IAAP;AACH;;AACO,MAAJC,IAAI,GAAG;AACP,UAAMH,KAAK,GAAG,KAAKL,iBAAL,CAAuB,OAAvB,CAAd;;AACA,QAAIK,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH;;AACD,UAAM,IAAIZ,mBAAJ,CAAwB,+CAAxB,CAAN;AACH;;AApC8C;AAsCnD","sourcesContent":["import { ObjectType, UInt8Type } from '../../types';\nimport { BridgeAction } from './BridgeAction';\nimport { LightState } from '../lightstate/LightState';\nimport { Light } from '../Light';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nconst ATTRIBUTES = [\n    new UInt8Type({ name: 'light' }),\n    new ObjectType({ name: 'body' }),\n    new ObjectType({ name: 'state' }), //TODO this is an actual LightState object, could utilize another type\n];\nexport class LightStateAction extends BridgeAction {\n    constructor(light) {\n        super(ATTRIBUTES, 'PUT');\n        this.light = light;\n    }\n    get address() {\n        return `/lights/${this.light}/state`;\n    }\n    get light() {\n        return this.getAttributeValue('light');\n    }\n    set light(value) {\n        if (value instanceof Light) {\n            this.setAttributeValue('light', value.id);\n        }\n        else {\n            this.setAttributeValue('light', value);\n        }\n    }\n    withState(state) {\n        let value;\n        if (state instanceof LightState) {\n            value = state;\n        }\n        else {\n            value = new LightState().populate(state);\n        }\n        this.setAttributeValue('state', value.getPayload());\n        return this;\n    }\n    get body() {\n        const state = this.getAttributeValue('state');\n        if (state) {\n            return state;\n        }\n        throw new HueBridgeModelError('No state has been set on the LightStateAction');\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}