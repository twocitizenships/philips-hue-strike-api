{"ast":null,"code":"import { ObjectType, Int8Type } from '../../types';\nimport { BridgeAction } from './BridgeAction';\nimport { Group } from '../groups/Group';\nimport { GroupState } from '../lightstate/GroupState';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nconst ATTRIBUTES = [new Int8Type({\n  name: 'group'\n}), new ObjectType({\n  name: 'state'\n}) //TODO this is an actual GroupState object\n];\nexport class GroupStateAction extends BridgeAction {\n  constructor(group) {\n    super(ATTRIBUTES, 'PUT');\n    this.withGroup(group);\n  }\n\n  get address() {\n    return `/groups/${this.group}/action`;\n  }\n\n  get group() {\n    return this.getAttributeValue('group');\n  }\n\n  withGroup(value) {\n    if (value instanceof Group) {\n      this.setAttributeValue('group', value.id);\n    } else {\n      this.setAttributeValue('group', value);\n    }\n  }\n\n  withState(state) {\n    let value;\n\n    if (state instanceof GroupState) {\n      value = state;\n    } else {\n      value = new GroupState().populate(state);\n    }\n\n    this.setAttributeValue('state', value.getPayload());\n    return this;\n  }\n\n  get body() {\n    const state = this.getAttributeValue('state');\n\n    if (state) {\n      return state;\n    }\n\n    throw new HueBridgeModelError('No state has been set on the GroupStateAction');\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/actions/GroupStateAction.js"],"names":["ObjectType","Int8Type","BridgeAction","Group","GroupState","HueBridgeModelError","ATTRIBUTES","name","GroupStateAction","constructor","group","withGroup","address","getAttributeValue","value","setAttributeValue","id","withState","state","populate","getPayload","body"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,aAArC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,MAAMC,UAAU,GAAG,CACf,IAAIL,QAAJ,CAAa;AAAEM,EAAAA,IAAI,EAAE;AAAR,CAAb,CADe,EAEf,IAAIP,UAAJ,CAAe;AAAEO,EAAAA,IAAI,EAAE;AAAR,CAAf,CAFe,CAEoB;AAFpB,CAAnB;AAIA,OAAO,MAAMC,gBAAN,SAA+BN,YAA/B,CAA4C;AAC/CO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMJ,UAAN,EAAkB,KAAlB;AACA,SAAKK,SAAL,CAAeD,KAAf;AACH;;AACU,MAAPE,OAAO,GAAG;AACV,WAAQ,WAAU,KAAKF,KAAM,SAA7B;AACH;;AACQ,MAALA,KAAK,GAAG;AACR,WAAO,KAAKG,iBAAL,CAAuB,OAAvB,CAAP;AACH;;AACDF,EAAAA,SAAS,CAACG,KAAD,EAAQ;AACb,QAAIA,KAAK,YAAYX,KAArB,EAA4B;AACxB,WAAKY,iBAAL,CAAuB,OAAvB,EAAgCD,KAAK,CAACE,EAAtC;AACH,KAFD,MAGK;AACD,WAAKD,iBAAL,CAAuB,OAAvB,EAAgCD,KAAhC;AACH;AACJ;;AACDG,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAIJ,KAAJ;;AACA,QAAII,KAAK,YAAYd,UAArB,EAAiC;AAC7BU,MAAAA,KAAK,GAAGI,KAAR;AACH,KAFD,MAGK;AACDJ,MAAAA,KAAK,GAAG,IAAIV,UAAJ,GAAiBe,QAAjB,CAA0BD,KAA1B,CAAR;AACH;;AACD,SAAKH,iBAAL,CAAuB,OAAvB,EAAgCD,KAAK,CAACM,UAAN,EAAhC;AACA,WAAO,IAAP;AACH;;AACO,MAAJC,IAAI,GAAG;AACP,UAAMH,KAAK,GAAG,KAAKL,iBAAL,CAAuB,OAAvB,CAAd;;AACA,QAAIK,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH;;AACD,UAAM,IAAIb,mBAAJ,CAAwB,+CAAxB,CAAN;AACH;;AApC8C;AAsCnD","sourcesContent":["import { ObjectType, Int8Type } from '../../types';\nimport { BridgeAction } from './BridgeAction';\nimport { Group } from '../groups/Group';\nimport { GroupState } from '../lightstate/GroupState';\nimport { HueBridgeModelError } from '../../HueBridgeModelError';\nconst ATTRIBUTES = [\n    new Int8Type({ name: 'group' }),\n    new ObjectType({ name: 'state' }), //TODO this is an actual GroupState object\n];\nexport class GroupStateAction extends BridgeAction {\n    constructor(group) {\n        super(ATTRIBUTES, 'PUT');\n        this.withGroup(group);\n    }\n    get address() {\n        return `/groups/${this.group}/action`;\n    }\n    get group() {\n        return this.getAttributeValue('group');\n    }\n    withGroup(value) {\n        if (value instanceof Group) {\n            this.setAttributeValue('group', value.id);\n        }\n        else {\n            this.setAttributeValue('group', value);\n        }\n    }\n    withState(state) {\n        let value;\n        if (state instanceof GroupState) {\n            value = state;\n        }\n        else {\n            value = new GroupState().populate(state);\n        }\n        this.setAttributeValue('state', value.getPayload());\n        return this;\n    }\n    get body() {\n        const state = this.getAttributeValue('state');\n        if (state) {\n            return state;\n        }\n        throw new HueBridgeModelError('No state has been set on the GroupStateAction');\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}