{"ast":null,"code":"import { ABSOLUTE_TIME_REGEX } from './timeUtil';\nimport { HueTime } from './HueTime';\nimport { HueDate } from './HueDate';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { BridgeTime } from './BridgeTime';\nexport class AbsoluteTime extends BridgeTime {\n  constructor(value) {\n    super();\n    this.time = new HueTime();\n    this.date = new HueDate();\n\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  static matches(value) {\n    return ABSOLUTE_TIME_REGEX.test(value);\n  }\n\n  set value(value) {\n    if (value instanceof AbsoluteTime) {\n      // Re-enter this function using the string value\n      this.value = value.toString();\n    } else if (value instanceof Date) {\n      this.time.fromDate(value);\n      this.date.fromDate(value);\n    } else {\n      const parsed = ABSOLUTE_TIME_REGEX.exec(value);\n\n      if (parsed) {\n        // @ts-ignore\n        this.hours(parsed.groups.hours); // @ts-ignore\n\n        this.minutes(parsed.groups.minutes); // @ts-ignore\n\n        this.seconds(parsed.groups.seconds); // @ts-ignore\n\n        this.year(parsed.groups.year); // @ts-ignore\n\n        this.month(parsed.groups.month); // @ts-ignore\n\n        this.day(parsed.groups.day);\n      } else {\n        throw new HueBridgeModelError(`Cannot create an absolute time from ${value}`);\n      }\n    }\n  }\n\n  year(value) {\n    this.date.year = value;\n    return this;\n  }\n\n  month(value) {\n    this.date.month = value;\n    return this;\n  }\n\n  day(value) {\n    this.date.day = value;\n    return this;\n  }\n\n  hours(value) {\n    this.time.hours = value;\n    return this;\n  }\n\n  minutes(value) {\n    this.time.minutes = value;\n    return this;\n  }\n\n  seconds(value) {\n    this.time.seconds = value;\n    return this;\n  }\n\n  toString() {\n    return `${this.date.toString()}T${this.time.toString()}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/AbsoluteTime.js"],"names":["ABSOLUTE_TIME_REGEX","HueTime","HueDate","HueBridgeModelError","BridgeTime","AbsoluteTime","constructor","value","time","date","matches","test","toString","Date","fromDate","parsed","exec","hours","groups","minutes","seconds","year","month","day"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,YAApC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAO,MAAMC,YAAN,SAA2BD,UAA3B,CAAsC;AACzCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,SAAKC,IAAL,GAAY,IAAIP,OAAJ,EAAZ;AACA,SAAKQ,IAAL,GAAY,IAAIP,OAAJ,EAAZ;;AACA,QAAIK,KAAJ,EAAW;AACP,WAAKA,KAAL,GAAaA,KAAb;AACH;AACJ;;AACa,SAAPG,OAAO,CAACH,KAAD,EAAQ;AAClB,WAAOP,mBAAmB,CAACW,IAApB,CAAyBJ,KAAzB,CAAP;AACH;;AACQ,MAALA,KAAK,CAACA,KAAD,EAAQ;AACb,QAAIA,KAAK,YAAYF,YAArB,EAAmC;AAC/B;AACA,WAAKE,KAAL,GAAaA,KAAK,CAACK,QAAN,EAAb;AACH,KAHD,MAIK,IAAIL,KAAK,YAAYM,IAArB,EAA2B;AAC5B,WAAKL,IAAL,CAAUM,QAAV,CAAmBP,KAAnB;AACA,WAAKE,IAAL,CAAUK,QAAV,CAAmBP,KAAnB;AACH,KAHI,MAIA;AACD,YAAMQ,MAAM,GAAGf,mBAAmB,CAACgB,IAApB,CAAyBT,KAAzB,CAAf;;AACA,UAAIQ,MAAJ,EAAY;AACR;AACA,aAAKE,KAAL,CAAWF,MAAM,CAACG,MAAP,CAAcD,KAAzB,EAFQ,CAGR;;AACA,aAAKE,OAAL,CAAaJ,MAAM,CAACG,MAAP,CAAcC,OAA3B,EAJQ,CAKR;;AACA,aAAKC,OAAL,CAAaL,MAAM,CAACG,MAAP,CAAcE,OAA3B,EANQ,CAOR;;AACA,aAAKC,IAAL,CAAUN,MAAM,CAACG,MAAP,CAAcG,IAAxB,EARQ,CASR;;AACA,aAAKC,KAAL,CAAWP,MAAM,CAACG,MAAP,CAAcI,KAAzB,EAVQ,CAWR;;AACA,aAAKC,GAAL,CAASR,MAAM,CAACG,MAAP,CAAcK,GAAvB;AACH,OAbD,MAcK;AACD,cAAM,IAAIpB,mBAAJ,CAAyB,uCAAsCI,KAAM,EAArE,CAAN;AACH;AACJ;AACJ;;AACDc,EAAAA,IAAI,CAACd,KAAD,EAAQ;AACR,SAAKE,IAAL,CAAUY,IAAV,GAAiBd,KAAjB;AACA,WAAO,IAAP;AACH;;AACDe,EAAAA,KAAK,CAACf,KAAD,EAAQ;AACT,SAAKE,IAAL,CAAUa,KAAV,GAAkBf,KAAlB;AACA,WAAO,IAAP;AACH;;AACDgB,EAAAA,GAAG,CAAChB,KAAD,EAAQ;AACP,SAAKE,IAAL,CAAUc,GAAV,GAAgBhB,KAAhB;AACA,WAAO,IAAP;AACH;;AACDU,EAAAA,KAAK,CAACV,KAAD,EAAQ;AACT,SAAKC,IAAL,CAAUS,KAAV,GAAkBV,KAAlB;AACA,WAAO,IAAP;AACH;;AACDY,EAAAA,OAAO,CAACZ,KAAD,EAAQ;AACX,SAAKC,IAAL,CAAUW,OAAV,GAAoBZ,KAApB;AACA,WAAO,IAAP;AACH;;AACDa,EAAAA,OAAO,CAACb,KAAD,EAAQ;AACX,SAAKC,IAAL,CAAUY,OAAV,GAAoBb,KAApB;AACA,WAAO,IAAP;AACH;;AACDK,EAAAA,QAAQ,GAAG;AACP,WAAQ,GAAE,KAAKH,IAAL,CAAUG,QAAV,EAAqB,IAAG,KAAKJ,IAAL,CAAUI,QAAV,EAAqB,EAAvD;AACH;;AApEwC","sourcesContent":["import { ABSOLUTE_TIME_REGEX } from './timeUtil';\nimport { HueTime } from './HueTime';\nimport { HueDate } from './HueDate';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { BridgeTime } from './BridgeTime';\nexport class AbsoluteTime extends BridgeTime {\n    constructor(value) {\n        super();\n        this.time = new HueTime();\n        this.date = new HueDate();\n        if (value) {\n            this.value = value;\n        }\n    }\n    static matches(value) {\n        return ABSOLUTE_TIME_REGEX.test(value);\n    }\n    set value(value) {\n        if (value instanceof AbsoluteTime) {\n            // Re-enter this function using the string value\n            this.value = value.toString();\n        }\n        else if (value instanceof Date) {\n            this.time.fromDate(value);\n            this.date.fromDate(value);\n        }\n        else {\n            const parsed = ABSOLUTE_TIME_REGEX.exec(value);\n            if (parsed) {\n                // @ts-ignore\n                this.hours(parsed.groups.hours);\n                // @ts-ignore\n                this.minutes(parsed.groups.minutes);\n                // @ts-ignore\n                this.seconds(parsed.groups.seconds);\n                // @ts-ignore\n                this.year(parsed.groups.year);\n                // @ts-ignore\n                this.month(parsed.groups.month);\n                // @ts-ignore\n                this.day(parsed.groups.day);\n            }\n            else {\n                throw new HueBridgeModelError(`Cannot create an absolute time from ${value}`);\n            }\n        }\n    }\n    year(value) {\n        this.date.year = value;\n        return this;\n    }\n    month(value) {\n        this.date.month = value;\n        return this;\n    }\n    day(value) {\n        this.date.day = value;\n        return this;\n    }\n    hours(value) {\n        this.time.hours = value;\n        return this;\n    }\n    minutes(value) {\n        this.time.minutes = value;\n        return this;\n    }\n    seconds(value) {\n        this.time.seconds = value;\n        return this;\n    }\n    toString() {\n        return `${this.date.toString()}T${this.time.toString()}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}