{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Configuration = void 0;\n\nconst configuration_1 = require(\"./http/endpoints/configuration\");\n\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\n\nclass Configuration extends ApiDefinition_1.ApiDefinition {\n  constructor(hueApi) {\n    super(hueApi);\n  }\n  /**\n   * Obtains the complete configuration from the Hue Bridge in a raw Object format that is returned from the API.\n   * This function will return all the config along with all the lights, schedules, groups, scenes, resourcelinks, etc...\n   *\n   * @returns The raw data returned from the Hue Bridge\n   */\n\n\n  getAll() {\n    return this.execute(configuration_1.configurationApi.getFullState);\n  }\n  /**\n   * Gets the unauthenticated configuration data from the bridge.\n   * @returns The unauthenticated configuration data from the bridge.\n   */\n\n\n  getUnauthenticatedConfig() {\n    return this.execute(configuration_1.configurationApi.getUnauthenticatedConfig);\n  }\n  /**\n   * Updates a configuration value for the Hue Bridge.\n   * @param data The data that is to be updated for the bridge configuration.\n   */\n\n\n  updateConfiguration(data) {\n    return this.execute(configuration_1.configurationApi.updateConfiguration, {\n      config: data\n    });\n  }\n\n  getConfiguration() {\n    return this.execute(configuration_1.configurationApi.getConfiguration);\n  }\n  /**\n   * A virtual press of the link button to perform pairing of software/services. This no longer works on the local\n   * network connection due to security implications which led to it being disabled by Hue developers.\n   *\n   * This will function if you are using the library over the remote API/portal though.\n   */\n\n\n  pressLinkButton() {\n    return this.execute(configuration_1.configurationApi.updateConfiguration, {\n      linkbutton: true\n    });\n  }\n\n}\n\nexports.Configuration = Configuration;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Configuration.js"],"names":["Object","defineProperty","exports","value","Configuration","configuration_1","require","ApiDefinition_1","ApiDefinition","constructor","hueApi","getAll","execute","configurationApi","getFullState","getUnauthenticatedConfig","updateConfiguration","data","config","getConfiguration","pressLinkButton","linkbutton"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,gCAAD,CAA/B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,sBAAD,CAA/B;;AACA,MAAMF,aAAN,SAA4BG,eAAe,CAACC,aAA5C,CAA0D;AACtDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAMA,MAAN;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKC,OAAL,CAAaP,eAAe,CAACQ,gBAAhB,CAAiCC,YAA9C,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,wBAAwB,GAAG;AACvB,WAAO,KAAKH,OAAL,CAAaP,eAAe,CAACQ,gBAAhB,CAAiCE,wBAA9C,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACtB,WAAO,KAAKL,OAAL,CAAaP,eAAe,CAACQ,gBAAhB,CAAiCG,mBAA9C,EAAmE;AAAEE,MAAAA,MAAM,EAAED;AAAV,KAAnE,CAAP;AACH;;AACDE,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAKP,OAAL,CAAaP,eAAe,CAACQ,gBAAhB,CAAiCM,gBAA9C,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKR,OAAL,CAAaP,eAAe,CAACQ,gBAAhB,CAAiCG,mBAA9C,EAAmE;AAAEK,MAAAA,UAAU,EAAE;AAAd,KAAnE,CAAP;AACH;;AAtCqD;;AAwC1DnB,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Configuration = void 0;\nconst configuration_1 = require(\"./http/endpoints/configuration\");\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\nclass Configuration extends ApiDefinition_1.ApiDefinition {\n    constructor(hueApi) {\n        super(hueApi);\n    }\n    /**\n     * Obtains the complete configuration from the Hue Bridge in a raw Object format that is returned from the API.\n     * This function will return all the config along with all the lights, schedules, groups, scenes, resourcelinks, etc...\n     *\n     * @returns The raw data returned from the Hue Bridge\n     */\n    getAll() {\n        return this.execute(configuration_1.configurationApi.getFullState);\n    }\n    /**\n     * Gets the unauthenticated configuration data from the bridge.\n     * @returns The unauthenticated configuration data from the bridge.\n     */\n    getUnauthenticatedConfig() {\n        return this.execute(configuration_1.configurationApi.getUnauthenticatedConfig);\n    }\n    /**\n     * Updates a configuration value for the Hue Bridge.\n     * @param data The data that is to be updated for the bridge configuration.\n     */\n    updateConfiguration(data) {\n        return this.execute(configuration_1.configurationApi.updateConfiguration, { config: data });\n    }\n    getConfiguration() {\n        return this.execute(configuration_1.configurationApi.getConfiguration);\n    }\n    /**\n     * A virtual press of the link button to perform pairing of software/services. This no longer works on the local\n     * network connection due to security implications which led to it being disabled by Hue developers.\n     *\n     * This will function if you are using the library over the remote API/portal though.\n     */\n    pressLinkButton() {\n        return this.execute(configuration_1.configurationApi.updateConfiguration, { linkbutton: true });\n    }\n}\nexports.Configuration = Configuration;\n"]},"metadata":{},"sourceType":"script"}