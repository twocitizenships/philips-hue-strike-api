{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = void 0;\n\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\n\nconst LightIdPlaceholder_1 = require(\"./placeholders/LightIdPlaceholder\");\n\nconst LIGHT_ID_PLACEHOLDER = new LightIdPlaceholder_1.LightIdPlaceholder();\n\nclass Cache {\n  constructor(data) {\n    this.data = data;\n    this._lights = {};\n  }\n  /**\n   * Obtains a known light from the cache\n   * @param id {Number | String} The id for the light.\n   */\n\n\n  getLight(id) {\n    const lightId = LIGHT_ID_PLACEHOLDER.getValue({\n      id: id\n    });\n    let light = this._lights[lightId];\n\n    if (!light) {\n      let lightData = this.data.lights[lightId];\n\n      if (lightData) {\n        light = hue_bridge_model_1.model.createFromBridge('light', lightId, lightData);\n        this._lights[lightId] = light;\n      }\n    }\n\n    return light;\n  }\n  /**\n   * Get the modelid for the bridge.\n   */\n\n\n  get modelid() {\n    // BSB001 is the first generation bridge, BSB002 is the current generation one that can support entertainment API\n    return this.data.config.modelid;\n  }\n  /**\n   * Get the API version for the bridge.\n   * @return The Api Version for the bridge.\n   */\n\n\n  get apiversion() {\n    return this.data.config.apiversion;\n  }\n\n}\n\nexports.Cache = Cache;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Cache.js"],"names":["Object","defineProperty","exports","value","Cache","hue_bridge_model_1","require","LightIdPlaceholder_1","LIGHT_ID_PLACEHOLDER","LightIdPlaceholder","constructor","data","_lights","getLight","id","lightId","getValue","light","lightData","lights","model","createFromBridge","modelid","config","apiversion"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,mCAAD,CAApC;;AACA,MAAME,oBAAoB,GAAG,IAAID,oBAAoB,CAACE,kBAAzB,EAA7B;;AACA,MAAML,KAAN,CAAY;AACRM,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,QAAQ,CAACC,EAAD,EAAK;AACT,UAAMC,OAAO,GAAGP,oBAAoB,CAACQ,QAArB,CAA8B;AAAEF,MAAAA,EAAE,EAAEA;AAAN,KAA9B,CAAhB;AACA,QAAIG,KAAK,GAAG,KAAKL,OAAL,CAAaG,OAAb,CAAZ;;AACA,QAAI,CAACE,KAAL,EAAY;AACR,UAAIC,SAAS,GAAG,KAAKP,IAAL,CAAUQ,MAAV,CAAiBJ,OAAjB,CAAhB;;AACA,UAAIG,SAAJ,EAAe;AACXD,QAAAA,KAAK,GAAGZ,kBAAkB,CAACe,KAAnB,CAAyBC,gBAAzB,CAA0C,OAA1C,EAAmDN,OAAnD,EAA4DG,SAA5D,CAAR;AACA,aAAKN,OAAL,CAAaG,OAAb,IAAwBE,KAAxB;AACH;AACJ;;AACD,WAAOA,KAAP;AACH;AACD;AACJ;AACA;;;AACe,MAAPK,OAAO,GAAG;AACV;AACA,WAAO,KAAKX,IAAL,CAAUY,MAAV,CAAiBD,OAAxB;AACH;AACD;AACJ;AACA;AACA;;;AACkB,MAAVE,UAAU,GAAG;AACb,WAAO,KAAKb,IAAL,CAAUY,MAAV,CAAiBC,UAAxB;AACH;;AAlCO;;AAoCZtB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cache = void 0;\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\nconst LightIdPlaceholder_1 = require(\"./placeholders/LightIdPlaceholder\");\nconst LIGHT_ID_PLACEHOLDER = new LightIdPlaceholder_1.LightIdPlaceholder();\nclass Cache {\n    constructor(data) {\n        this.data = data;\n        this._lights = {};\n    }\n    /**\n     * Obtains a known light from the cache\n     * @param id {Number | String} The id for the light.\n     */\n    getLight(id) {\n        const lightId = LIGHT_ID_PLACEHOLDER.getValue({ id: id });\n        let light = this._lights[lightId];\n        if (!light) {\n            let lightData = this.data.lights[lightId];\n            if (lightData) {\n                light = hue_bridge_model_1.model.createFromBridge('light', lightId, lightData);\n                this._lights[lightId] = light;\n            }\n        }\n        return light;\n    }\n    /**\n     * Get the modelid for the bridge.\n     */\n    get modelid() {\n        // BSB001 is the first generation bridge, BSB002 is the current generation one that can support entertainment API\n        return this.data.config.modelid;\n    }\n    /**\n     * Get the API version for the bridge.\n     * @return The Api Version for the bridge.\n     */\n    get apiversion() {\n        return this.data.config.apiversion;\n    }\n}\nexports.Cache = Cache;\n"]},"metadata":{},"sourceType":"script"}