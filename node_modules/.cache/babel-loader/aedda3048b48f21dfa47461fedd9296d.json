{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Groups = void 0;\n\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\n\nconst groups_1 = require(\"./http/endpoints/groups\");\n\nconst HueRateLimiter_1 = require(\"./HueRateLimiter\");\n\nclass Groups extends ApiDefinition_1.ApiDefinition {\n  constructor(hueApi) {\n    super(hueApi);\n    this._groupStateLimiter = new HueRateLimiter_1.HueRateLimiter(hueApi.name, 'groups', hueApi.rateLimitConfig.groupRateLimit);\n  }\n\n  getAll() {\n    // Lightset 0 (all lights) is a special case, so retrieve the bridge's definition of that and prepend to the\n    // existing group definitions to provide the complete list of groups.\n    return Promise.all([this.execute(groups_1.groupsApi.getGroupAttributes, {\n      id: 0\n    }), this.execute(groups_1.groupsApi.getAllGroups)]).then(results => {\n      // @ts-ignore\n      results[1].unshift(results[0]);\n      return results[1];\n    });\n  }\n\n  getGroup(id) {\n    return this.execute(groups_1.groupsApi.getGroupAttributes, {\n      id: id\n    });\n  } //TODO\n  // get(id: number | Group): AnyGroup {\n  //   util.deprecatedFunction('5.x', 'groups.get(id)', 'Use groups.getGroup(id) instead.');\n  //   return this.getGroup(id);\n  // }\n  //\n  // /**\n  //  * @deprecated Use getGroupByName(name) instead.\n  //  * @param name {string}\n  //  * @returns {Promise<Entertainment|LightGroup|Lightsource|Luminaire|Room|Zone>}\n  //  */\n  // getByName(name) {\n  //   util.deprecatedFunction('5.x', 'groups.getByName(name)', 'Use groups.getGroupByName(name) instead.');\n  //   return this.getGroupByName(name);\n  // }\n\n  /**\n   * @param name {string}\n   * @returns {Promise<Array<Entertainment|LightGroup|Lightsource|Luminaire|Room|Zone>>}\n   */\n\n\n  getGroupByName(name) {\n    return this.getAll().then(allGroups => {\n      return allGroups.filter(group => group.name === name);\n    });\n  }\n\n  createGroup(group) {\n    const self = this;\n    return this.execute(groups_1.groupsApi.createGroup, {\n      group: group\n    }).then(result => {\n      return self.getGroup(result.id);\n    }); // if (arguments.length === 1 && group instanceof Group) {\n    //   return this.execute(groupsApi.createGroup, {group: group})\n    //     .then(result => {\n    //       return self.getGroup(result.id);\n    //     });\n    // }\n    //\n    // util.deprecatedFunction('5.x', 'groups.createGroup(name, lights)', 'Use groups.createGroup(group) instead.');\n    // const newGroup = new LightGroup();\n    // newGroup.name = arguments[0];\n    // newGroup.lights = arguments[1];\n    // return self.createGroup(newGroup);\n  } // /**\n  //  * @deprecated use createGroup(group) instead\n  //  */\n  // createRoom(name, lights, roomClass) {\n  //   util.deprecatedFunction('5.x', 'groups.createRoom(name, lights, roomClass)', 'Use groups.createGroup(group) instead.');\n  //\n  //   const group = new Room();\n  //   group.name = name;\n  //   group.lights = lights;\n  //   group.class = roomClass;\n  //   return this.createGroup(group);\n  // }\n  // /**\n  //  * @deprecated use createGroup(group) instead\n  //  */\n  // createZone(name, lights, roomClass) {\n  //   util.deprecatedFunction('5.x', 'groups.createZone(name, lights, roomClass)', 'Use groups.createGroup(group) instead.');\n  //\n  //   const group = new Zone();\n  //   group.name = name;\n  //   group.lights = lights;\n  //   group.class = roomClass;\n  //\n  //   return this.createGroup(group);\n  // }\n\n  /**\n   * Update the Group attributes on the bridge for the specified Group object.\n   * @param group The group with updates to be updated on the bridge.\n   * @returns {Promise<boolean>}\n   */\n\n\n  updateGroupAttributes(group) {\n    return this.execute(groups_1.groupsApi.setGroupAttributes, {\n      id: group.id,\n      group: group\n    });\n  } // /**\n  //  * Update the Group attributes on the bridge for the specified Group object.\n  //  * @param group {Group} The group with updates to be updated on the bridge.\n  //  * @returns {Promise<boolean>}\n  //  */\n  // updateAttributes(id, data) {\n  //   util.deprecatedFunction('5.x', 'groups.updateAttributes(id, data)', 'Use groups.updateGroupAttributes(group) instead.');\n  //   return this.execute(groupsApi.setGroupAttributes, {id: id, group: data});\n  // }\n\n\n  deleteGroup(id) {\n    return this.execute(groups_1.groupsApi.deleteGroup, {\n      id: id\n    });\n  }\n\n  getGroupState(id) {\n    return this.getGroup(id).then(group => {\n      return group.state;\n    });\n  }\n\n  setGroupState(id, state) {\n    const self = this;\n    return self._groupStateLimiter.schedule(() => {\n      return self.execute(groups_1.groupsApi.setGroupState, {\n        id: id,\n        state: state\n      });\n    });\n  }\n\n  getLightGroups() {\n    // @ts-ignore\n    return this._getByType('LightGroup');\n  }\n\n  getLuminaries() {\n    // @ts-ignore\n    return this._getByType('Luminaire');\n  }\n\n  getLightSources() {\n    // @ts-ignore\n    return this._getByType('Lightsource');\n  }\n\n  getRooms() {\n    // @ts-ignore\n    return this._getByType('Room');\n  }\n\n  getZones() {\n    // @ts-ignore\n    return this._getByType('Zone');\n  }\n\n  getEntertainment() {\n    // @ts-ignore\n    return this._getByType('Entertainment');\n  }\n  /** Enables the streaming functionality on an Entertainment Group */\n\n\n  enableStreaming(id) {\n    return this.execute(groups_1.groupsApi.setStreaming, {\n      id: id,\n      active: true\n    });\n  }\n  /**\n   * Disabled the streaming functionality on an Entertainment Group\n   * @param id {int | Entertainment}\n   * @returns {Promise<boolean>}\n   */\n\n\n  disableStreaming(id) {\n    return this.execute(groups_1.groupsApi.setStreaming, {\n      id: id,\n      active: false\n    });\n  }\n\n  _getByType(type) {\n    return this.getAll().then(groups => {\n      return groups.filter(group => group.type === type);\n    });\n  }\n\n}\n\nexports.Groups = Groups;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Groups.js"],"names":["Object","defineProperty","exports","value","Groups","ApiDefinition_1","require","groups_1","HueRateLimiter_1","ApiDefinition","constructor","hueApi","_groupStateLimiter","HueRateLimiter","name","rateLimitConfig","groupRateLimit","getAll","Promise","all","execute","groupsApi","getGroupAttributes","id","getAllGroups","then","results","unshift","getGroup","getGroupByName","allGroups","filter","group","createGroup","self","result","updateGroupAttributes","setGroupAttributes","deleteGroup","getGroupState","state","setGroupState","schedule","getLightGroups","_getByType","getLuminaries","getLightSources","getRooms","getZones","getEntertainment","enableStreaming","setStreaming","active","disableStreaming","type","groups"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,sBAAD,CAA/B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,yBAAD,CAAxB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMF,MAAN,SAAqBC,eAAe,CAACI,aAArC,CAAmD;AAC/CC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAMA,MAAN;AACA,SAAKC,kBAAL,GAA0B,IAAIJ,gBAAgB,CAACK,cAArB,CAAoCF,MAAM,CAACG,IAA3C,EAAiD,QAAjD,EAA2DH,MAAM,CAACI,eAAP,CAAuBC,cAAlF,CAA1B;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL;AACA;AACA,WAAOC,OAAO,CAACC,GAAR,CAAY,CACf,KAAKC,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBC,kBAAhC,EAAoD;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApD,CADe,EAEf,KAAKH,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBG,YAAhC,CAFe,CAAZ,EAGJC,IAHI,CAGEC,OAAD,IAAa;AACjB;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAX,CAAmBD,OAAO,CAAC,CAAD,CAA1B;AACA,aAAOA,OAAO,CAAC,CAAD,CAAd;AACH,KAPM,CAAP;AAQH;;AACDE,EAAAA,QAAQ,CAACL,EAAD,EAAK;AACT,WAAO,KAAKH,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBC,kBAAhC,EAAoD;AAAEC,MAAAA,EAAE,EAAEA;AAAN,KAApD,CAAP;AACH,GAnB8C,CAoB/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;;;AACIM,EAAAA,cAAc,CAACf,IAAD,EAAO;AACjB,WAAO,KAAKG,MAAL,GACFQ,IADE,CACGK,SAAS,IAAI;AACnB,aAAOA,SAAS,CAACC,MAAV,CAAiBC,KAAK,IAAIA,KAAK,CAAClB,IAAN,KAAeA,IAAzC,CAAP;AACH,KAHM,CAAP;AAIH;;AACDmB,EAAAA,WAAW,CAACD,KAAD,EAAQ;AACf,UAAME,IAAI,GAAG,IAAb;AACA,WAAO,KAAKd,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBY,WAAhC,EAA6C;AAAED,MAAAA,KAAK,EAAEA;AAAT,KAA7C,EACFP,IADE,CACGU,MAAM,IAAI;AAChB,aAAOD,IAAI,CAACN,QAAL,CAAcO,MAAM,CAACZ,EAArB,CAAP;AACH,KAHM,CAAP,CAFe,CAMf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GA/D8C,CAgE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;;;AACIa,EAAAA,qBAAqB,CAACJ,KAAD,EAAQ;AACzB,WAAO,KAAKZ,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBgB,kBAAhC,EAAoD;AAAEd,MAAAA,EAAE,EAAES,KAAK,CAACT,EAAZ;AAAgBS,MAAAA,KAAK,EAAEA;AAAvB,KAApD,CAAP;AACH,GAhG8C,CAiG/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAM,EAAAA,WAAW,CAACf,EAAD,EAAK;AACZ,WAAO,KAAKH,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBiB,WAAhC,EAA6C;AAAEf,MAAAA,EAAE,EAAEA;AAAN,KAA7C,CAAP;AACH;;AACDgB,EAAAA,aAAa,CAAChB,EAAD,EAAK;AACd,WAAO,KAAKK,QAAL,CAAcL,EAAd,EAAkBE,IAAlB,CAAwBO,KAAD,IAAW;AACrC,aAAOA,KAAK,CAACQ,KAAb;AACH,KAFM,CAAP;AAGH;;AACDC,EAAAA,aAAa,CAAClB,EAAD,EAAKiB,KAAL,EAAY;AACrB,UAAMN,IAAI,GAAG,IAAb;AACA,WAAOA,IAAI,CAACtB,kBAAL,CAAwB8B,QAAxB,CAAiC,MAAM;AAC1C,aAAOR,IAAI,CAACd,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmBoB,aAAhC,EAA+C;AAAElB,QAAAA,EAAE,EAAEA,EAAN;AAAUiB,QAAAA,KAAK,EAAEA;AAAjB,OAA/C,CAAP;AACH,KAFM,CAAP;AAGH;;AACDG,EAAAA,cAAc,GAAG;AACb;AACA,WAAO,KAAKC,UAAL,CAAgB,YAAhB,CAAP;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ;AACA,WAAO,KAAKD,UAAL,CAAgB,WAAhB,CAAP;AACH;;AACDE,EAAAA,eAAe,GAAG;AACd;AACA,WAAO,KAAKF,UAAL,CAAgB,aAAhB,CAAP;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP;AACA,WAAO,KAAKH,UAAL,CAAgB,MAAhB,CAAP;AACH;;AACDI,EAAAA,QAAQ,GAAG;AACP;AACA,WAAO,KAAKJ,UAAL,CAAgB,MAAhB,CAAP;AACH;;AACDK,EAAAA,gBAAgB,GAAG;AACf;AACA,WAAO,KAAKL,UAAL,CAAgB,eAAhB,CAAP;AACH;AACD;;;AACAM,EAAAA,eAAe,CAAC3B,EAAD,EAAK;AAChB,WAAO,KAAKH,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmB8B,YAAhC,EAA8C;AAAE5B,MAAAA,EAAE,EAAEA,EAAN;AAAU6B,MAAAA,MAAM,EAAE;AAAlB,KAA9C,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,gBAAgB,CAAC9B,EAAD,EAAK;AACjB,WAAO,KAAKH,OAAL,CAAab,QAAQ,CAACc,SAAT,CAAmB8B,YAAhC,EAA8C;AAAE5B,MAAAA,EAAE,EAAEA,EAAN;AAAU6B,MAAAA,MAAM,EAAE;AAAlB,KAA9C,CAAP;AACH;;AACDR,EAAAA,UAAU,CAACU,IAAD,EAAO;AACb,WAAO,KAAKrC,MAAL,GACFQ,IADE,CACI8B,MAAD,IAAY;AAClB,aAAOA,MAAM,CAACxB,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACsB,IAAN,KAAeA,IAAtC,CAAP;AACH,KAHM,CAAP;AAIH;;AAjK8C;;AAmKnDpD,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Groups = void 0;\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\nconst groups_1 = require(\"./http/endpoints/groups\");\nconst HueRateLimiter_1 = require(\"./HueRateLimiter\");\nclass Groups extends ApiDefinition_1.ApiDefinition {\n    constructor(hueApi) {\n        super(hueApi);\n        this._groupStateLimiter = new HueRateLimiter_1.HueRateLimiter(hueApi.name, 'groups', hueApi.rateLimitConfig.groupRateLimit);\n    }\n    getAll() {\n        // Lightset 0 (all lights) is a special case, so retrieve the bridge's definition of that and prepend to the\n        // existing group definitions to provide the complete list of groups.\n        return Promise.all([\n            this.execute(groups_1.groupsApi.getGroupAttributes, { id: 0 }),\n            this.execute(groups_1.groupsApi.getAllGroups)\n        ]).then((results) => {\n            // @ts-ignore\n            results[1].unshift(results[0]);\n            return results[1];\n        });\n    }\n    getGroup(id) {\n        return this.execute(groups_1.groupsApi.getGroupAttributes, { id: id });\n    }\n    //TODO\n    // get(id: number | Group): AnyGroup {\n    //   util.deprecatedFunction('5.x', 'groups.get(id)', 'Use groups.getGroup(id) instead.');\n    //   return this.getGroup(id);\n    // }\n    //\n    // /**\n    //  * @deprecated Use getGroupByName(name) instead.\n    //  * @param name {string}\n    //  * @returns {Promise<Entertainment|LightGroup|Lightsource|Luminaire|Room|Zone>}\n    //  */\n    // getByName(name) {\n    //   util.deprecatedFunction('5.x', 'groups.getByName(name)', 'Use groups.getGroupByName(name) instead.');\n    //   return this.getGroupByName(name);\n    // }\n    /**\n     * @param name {string}\n     * @returns {Promise<Array<Entertainment|LightGroup|Lightsource|Luminaire|Room|Zone>>}\n     */\n    getGroupByName(name) {\n        return this.getAll()\n            .then(allGroups => {\n            return allGroups.filter(group => group.name === name);\n        });\n    }\n    createGroup(group) {\n        const self = this;\n        return this.execute(groups_1.groupsApi.createGroup, { group: group })\n            .then(result => {\n            return self.getGroup(result.id);\n        });\n        // if (arguments.length === 1 && group instanceof Group) {\n        //   return this.execute(groupsApi.createGroup, {group: group})\n        //     .then(result => {\n        //       return self.getGroup(result.id);\n        //     });\n        // }\n        //\n        // util.deprecatedFunction('5.x', 'groups.createGroup(name, lights)', 'Use groups.createGroup(group) instead.');\n        // const newGroup = new LightGroup();\n        // newGroup.name = arguments[0];\n        // newGroup.lights = arguments[1];\n        // return self.createGroup(newGroup);\n    }\n    // /**\n    //  * @deprecated use createGroup(group) instead\n    //  */\n    // createRoom(name, lights, roomClass) {\n    //   util.deprecatedFunction('5.x', 'groups.createRoom(name, lights, roomClass)', 'Use groups.createGroup(group) instead.');\n    //\n    //   const group = new Room();\n    //   group.name = name;\n    //   group.lights = lights;\n    //   group.class = roomClass;\n    //   return this.createGroup(group);\n    // }\n    // /**\n    //  * @deprecated use createGroup(group) instead\n    //  */\n    // createZone(name, lights, roomClass) {\n    //   util.deprecatedFunction('5.x', 'groups.createZone(name, lights, roomClass)', 'Use groups.createGroup(group) instead.');\n    //\n    //   const group = new Zone();\n    //   group.name = name;\n    //   group.lights = lights;\n    //   group.class = roomClass;\n    //\n    //   return this.createGroup(group);\n    // }\n    /**\n     * Update the Group attributes on the bridge for the specified Group object.\n     * @param group The group with updates to be updated on the bridge.\n     * @returns {Promise<boolean>}\n     */\n    updateGroupAttributes(group) {\n        return this.execute(groups_1.groupsApi.setGroupAttributes, { id: group.id, group: group });\n    }\n    // /**\n    //  * Update the Group attributes on the bridge for the specified Group object.\n    //  * @param group {Group} The group with updates to be updated on the bridge.\n    //  * @returns {Promise<boolean>}\n    //  */\n    // updateAttributes(id, data) {\n    //   util.deprecatedFunction('5.x', 'groups.updateAttributes(id, data)', 'Use groups.updateGroupAttributes(group) instead.');\n    //   return this.execute(groupsApi.setGroupAttributes, {id: id, group: data});\n    // }\n    deleteGroup(id) {\n        return this.execute(groups_1.groupsApi.deleteGroup, { id: id });\n    }\n    getGroupState(id) {\n        return this.getGroup(id).then((group) => {\n            return group.state;\n        });\n    }\n    setGroupState(id, state) {\n        const self = this;\n        return self._groupStateLimiter.schedule(() => {\n            return self.execute(groups_1.groupsApi.setGroupState, { id: id, state: state });\n        });\n    }\n    getLightGroups() {\n        // @ts-ignore\n        return this._getByType('LightGroup');\n    }\n    getLuminaries() {\n        // @ts-ignore\n        return this._getByType('Luminaire');\n    }\n    getLightSources() {\n        // @ts-ignore\n        return this._getByType('Lightsource');\n    }\n    getRooms() {\n        // @ts-ignore\n        return this._getByType('Room');\n    }\n    getZones() {\n        // @ts-ignore\n        return this._getByType('Zone');\n    }\n    getEntertainment() {\n        // @ts-ignore\n        return this._getByType('Entertainment');\n    }\n    /** Enables the streaming functionality on an Entertainment Group */\n    enableStreaming(id) {\n        return this.execute(groups_1.groupsApi.setStreaming, { id: id, active: true });\n    }\n    /**\n     * Disabled the streaming functionality on an Entertainment Group\n     * @param id {int | Entertainment}\n     * @returns {Promise<boolean>}\n     */\n    disableStreaming(id) {\n        return this.execute(groups_1.groupsApi.setStreaming, { id: id, active: false });\n    }\n    _getByType(type) {\n        return this.getAll()\n            .then((groups) => {\n            return groups.filter(group => group.type === type);\n        });\n    }\n}\nexports.Groups = Groups;\n"]},"metadata":{},"sourceType":"script"}