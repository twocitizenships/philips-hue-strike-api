{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocalInsecureBootstrap = void 0;\n\nconst Transport_1 = require(\"./Transport\");\n\nconst Api_1 = require(\"../Api\");\n\nconst HttpClientFetch_1 = require(\"./HttpClientFetch\");\n\nconst urlUtil_1 = require(\"./urlUtil\");\n\nconst SUPPRESS_WARNING = process.env.NODE_HUE_API_USE_INSECURE_CONNECTION != null;\n\nclass LocalInsecureBootstrap {\n  constructor(hostname, rateLimits, port) {\n    this.baseUrl = (0, urlUtil_1.getHttpUrl)(hostname, port || 80);\n    this.hostname = hostname;\n    this.rateLimits = rateLimits;\n  }\n\n  connect(username, clientkey, timeout) {\n    const baseUrl = this.baseUrl,\n          rateLimits = this.rateLimits;\n\n    if (!SUPPRESS_WARNING) {\n      console.log('WARNING: You are using this library in an insecure way!\\n' + 'The Hue bridge supports HTTPS connections locally and it is highly recommended that you use an HTTPS\\n' + 'method to communicate with the bridge.');\n    }\n\n    return (0, HttpClientFetch_1.request)({\n      method: 'GET',\n      url: `${baseUrl.href}api/config`\n    }).then(() => {\n      const apiBaseUrl = `${baseUrl.href}api`,\n            fetchConfig = {\n        baseURL: apiBaseUrl,\n        timeout: getTimeout(timeout)\n      },\n            transport = new Transport_1.Transport((0, HttpClientFetch_1.create)(fetchConfig), rateLimits.transportRateLimit, username),\n            config = {\n        remote: false,\n        baseUrl: apiBaseUrl,\n        bridgeName: this.hostname,\n        clientKey: clientkey,\n        username: username\n      };\n      return new Api_1.Api(config, transport, rateLimits);\n    });\n  }\n\n}\n\nexports.LocalInsecureBootstrap = LocalInsecureBootstrap;\n\nfunction getTimeout(timeout) {\n  return timeout || 20000;\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/LocalInsecureBootstrap.js"],"names":["Object","defineProperty","exports","value","LocalInsecureBootstrap","Transport_1","require","Api_1","HttpClientFetch_1","urlUtil_1","SUPPRESS_WARNING","process","env","NODE_HUE_API_USE_INSECURE_CONNECTION","constructor","hostname","rateLimits","port","baseUrl","getHttpUrl","connect","username","clientkey","timeout","console","log","request","method","url","href","then","apiBaseUrl","fetchConfig","baseURL","getTimeout","transport","Transport","create","transportRateLimit","config","remote","bridgeName","clientKey","Api"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAArB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMI,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,oCAAZ,IAAoD,IAA7E;;AACA,MAAMT,sBAAN,CAA6B;AACzBU,EAAAA,WAAW,CAACC,QAAD,EAAWC,UAAX,EAAuBC,IAAvB,EAA6B;AACpC,SAAKC,OAAL,GAAe,CAAC,GAAGT,SAAS,CAACU,UAAd,EAA0BJ,QAA1B,EAAoCE,IAAI,IAAI,EAA5C,CAAf;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACDI,EAAAA,OAAO,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB,EAA+B;AAClC,UAAML,OAAO,GAAG,KAAKA,OAArB;AAAA,UAA8BF,UAAU,GAAG,KAAKA,UAAhD;;AACA,QAAI,CAACN,gBAAL,EAAuB;AACnBc,MAAAA,OAAO,CAACC,GAAR,CAAY,8DACN,wGADM,GAEN,wCAFN;AAGH;;AACD,WAAO,CAAC,GAAGjB,iBAAiB,CAACkB,OAAtB,EAA+B;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,GAAG,EAAG,GAAEV,OAAO,CAACW,IAAK;AAAtC,KAA/B,EACFC,IADE,CACG,MAAM;AACZ,YAAMC,UAAU,GAAI,GAAEb,OAAO,CAACW,IAAK,KAAnC;AAAA,YAAyCG,WAAW,GAAG;AACnDC,QAAAA,OAAO,EAAEF,UAD0C;AAEnDR,QAAAA,OAAO,EAAEW,UAAU,CAACX,OAAD;AAFgC,OAAvD;AAAA,YAGGY,SAAS,GAAG,IAAI9B,WAAW,CAAC+B,SAAhB,CAA0B,CAAC,GAAG5B,iBAAiB,CAAC6B,MAAtB,EAA8BL,WAA9B,CAA1B,EAAsEhB,UAAU,CAACsB,kBAAjF,EAAqGjB,QAArG,CAHf;AAAA,YAG+HkB,MAAM,GAAG;AACpIC,QAAAA,MAAM,EAAE,KAD4H;AAEpItB,QAAAA,OAAO,EAAEa,UAF2H;AAGpIU,QAAAA,UAAU,EAAE,KAAK1B,QAHmH;AAIpI2B,QAAAA,SAAS,EAAEpB,SAJyH;AAKpID,QAAAA,QAAQ,EAAEA;AAL0H,OAHxI;AAUA,aAAO,IAAId,KAAK,CAACoC,GAAV,CAAcJ,MAAd,EAAsBJ,SAAtB,EAAiCnB,UAAjC,CAAP;AACH,KAbM,CAAP;AAcH;;AA3BwB;;AA6B7Bd,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC;;AACA,SAAS8B,UAAT,CAAoBX,OAApB,EAA6B;AACzB,SAAOA,OAAO,IAAI,KAAlB;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocalInsecureBootstrap = void 0;\nconst Transport_1 = require(\"./Transport\");\nconst Api_1 = require(\"../Api\");\nconst HttpClientFetch_1 = require(\"./HttpClientFetch\");\nconst urlUtil_1 = require(\"./urlUtil\");\nconst SUPPRESS_WARNING = process.env.NODE_HUE_API_USE_INSECURE_CONNECTION != null;\nclass LocalInsecureBootstrap {\n    constructor(hostname, rateLimits, port) {\n        this.baseUrl = (0, urlUtil_1.getHttpUrl)(hostname, port || 80);\n        this.hostname = hostname;\n        this.rateLimits = rateLimits;\n    }\n    connect(username, clientkey, timeout) {\n        const baseUrl = this.baseUrl, rateLimits = this.rateLimits;\n        if (!SUPPRESS_WARNING) {\n            console.log('WARNING: You are using this library in an insecure way!\\n'\n                + 'The Hue bridge supports HTTPS connections locally and it is highly recommended that you use an HTTPS\\n'\n                + 'method to communicate with the bridge.');\n        }\n        return (0, HttpClientFetch_1.request)({ method: 'GET', url: `${baseUrl.href}api/config` })\n            .then(() => {\n            const apiBaseUrl = `${baseUrl.href}api`, fetchConfig = {\n                baseURL: apiBaseUrl,\n                timeout: getTimeout(timeout)\n            }, transport = new Transport_1.Transport((0, HttpClientFetch_1.create)(fetchConfig), rateLimits.transportRateLimit, username), config = {\n                remote: false,\n                baseUrl: apiBaseUrl,\n                bridgeName: this.hostname,\n                clientKey: clientkey,\n                username: username,\n            };\n            return new Api_1.Api(config, transport, rateLimits);\n        });\n    }\n}\nexports.LocalInsecureBootstrap = LocalInsecureBootstrap;\nfunction getTimeout(timeout) {\n    return timeout || 20000;\n}\n"]},"metadata":{},"sourceType":"script"}