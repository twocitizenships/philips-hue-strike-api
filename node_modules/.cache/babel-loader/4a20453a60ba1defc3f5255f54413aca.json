{"ast":null,"code":"import { BaseType } from './BaseType';\nimport { isValueDefined } from './BaseType';\nexport class StringType extends BaseType {\n  constructor(config) {\n    super({ ...config,\n      type: 'string'\n    });\n\n    if (isValueDefined(config.minLength)) {\n      this.minLength = config.minLength;\n    }\n\n    if (isValueDefined(config.maxLength)) {\n      this.maxLength = config.maxLength;\n    }\n  }\n\n  getValue(value) {\n    const checkedValue = super.getValue(value),\n          valueDefined = isValueDefined(checkedValue),\n          optional = this.optional; // If we are optional and have no value, prevent further checks as they will fail\n\n    if (optional && !valueDefined) {\n      return checkedValue;\n    } // 0 will not trigger this, but it is not a problem in this context\n\n\n    if (this.minLength) {\n      if (!valueDefined) {\n        throw new TypeError(`No value provided for ${this.name}, must have a minimum length of ${this.minLength}`);\n      } else {\n        // @ts-ignore\n        if (checkedValue.length < this.minLength) {\n          throw new TypeError(`'${value}' for ${this.name}, does not meet minimum length requirement of ${this.minLength}`);\n        }\n      }\n    } // 0 will not trigger this, but it is not a problem in this context, although max length of 0 is not really valid\n\n\n    if (this.maxLength) {\n      // @ts-ignore\n      if (valueDefined && checkedValue.length > this.maxLength) {\n        throw new TypeError(`'${value}' for ${this.name}, does not meet maximum length requirement of ${this.maxLength}`);\n      }\n    }\n\n    return checkedValue;\n  }\n\n  _convertToType(val) {\n    return `${val}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/types/StringType.js"],"names":["BaseType","isValueDefined","StringType","constructor","config","type","minLength","maxLength","getValue","value","checkedValue","valueDefined","optional","TypeError","name","length","_convertToType","val"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAO,MAAMC,UAAN,SAAyBF,QAAzB,CAAkC;AACrCG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAM,EAAE,GAAGA,MAAL;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAN;;AACA,QAAIJ,cAAc,CAACG,MAAM,CAACE,SAAR,CAAlB,EAAsC;AAClC,WAAKA,SAAL,GAAiBF,MAAM,CAACE,SAAxB;AACH;;AACD,QAAIL,cAAc,CAACG,MAAM,CAACG,SAAR,CAAlB,EAAsC;AAClC,WAAKA,SAAL,GAAiBH,MAAM,CAACG,SAAxB;AACH;AACJ;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,UAAMC,YAAY,GAAG,MAAMF,QAAN,CAAeC,KAAf,CAArB;AAAA,UAA4CE,YAAY,GAAGV,cAAc,CAACS,YAAD,CAAzE;AAAA,UAAyFE,QAAQ,GAAG,KAAKA,QAAzG,CADY,CAEZ;;AACA,QAAIA,QAAQ,IAAI,CAACD,YAAjB,EAA+B;AAC3B,aAAOD,YAAP;AACH,KALW,CAMZ;;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAChB,UAAI,CAACK,YAAL,EAAmB;AACf,cAAM,IAAIE,SAAJ,CAAe,yBAAwB,KAAKC,IAAK,mCAAkC,KAAKR,SAAU,EAAlG,CAAN;AACH,OAFD,MAGK;AAAE;AACH,YAAII,YAAY,CAACK,MAAb,GAAsB,KAAKT,SAA/B,EAA0C;AACtC,gBAAM,IAAIO,SAAJ,CAAe,IAAGJ,KAAM,SAAQ,KAAKK,IAAK,iDAAgD,KAAKR,SAAU,EAAzG,CAAN;AACH;AACJ;AACJ,KAhBW,CAiBZ;;;AACA,QAAI,KAAKC,SAAT,EAAoB;AAChB;AACA,UAAII,YAAY,IAAID,YAAY,CAACK,MAAb,GAAsB,KAAKR,SAA/C,EAA0D;AACtD,cAAM,IAAIM,SAAJ,CAAe,IAAGJ,KAAM,SAAQ,KAAKK,IAAK,iDAAgD,KAAKP,SAAU,EAAzG,CAAN;AACH;AACJ;;AACD,WAAOG,YAAP;AACH;;AACDM,EAAAA,cAAc,CAACC,GAAD,EAAM;AAChB,WAAQ,GAAEA,GAAI,EAAd;AACH;;AAtCoC","sourcesContent":["import { BaseType } from './BaseType';\nimport { isValueDefined } from './BaseType';\nexport class StringType extends BaseType {\n    constructor(config) {\n        super({ ...config, type: 'string' });\n        if (isValueDefined(config.minLength)) {\n            this.minLength = config.minLength;\n        }\n        if (isValueDefined(config.maxLength)) {\n            this.maxLength = config.maxLength;\n        }\n    }\n    getValue(value) {\n        const checkedValue = super.getValue(value), valueDefined = isValueDefined(checkedValue), optional = this.optional;\n        // If we are optional and have no value, prevent further checks as they will fail\n        if (optional && !valueDefined) {\n            return checkedValue;\n        }\n        // 0 will not trigger this, but it is not a problem in this context\n        if (this.minLength) {\n            if (!valueDefined) {\n                throw new TypeError(`No value provided for ${this.name}, must have a minimum length of ${this.minLength}`);\n            }\n            else { // @ts-ignore\n                if (checkedValue.length < this.minLength) {\n                    throw new TypeError(`'${value}' for ${this.name}, does not meet minimum length requirement of ${this.minLength}`);\n                }\n            }\n        }\n        // 0 will not trigger this, but it is not a problem in this context, although max length of 0 is not really valid\n        if (this.maxLength) {\n            // @ts-ignore\n            if (valueDefined && checkedValue.length > this.maxLength) {\n                throw new TypeError(`'${value}' for ${this.name}, does not meet maximum length requirement of ${this.maxLength}`);\n            }\n        }\n        return checkedValue;\n    }\n    _convertToType(val) {\n        return `${val}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}