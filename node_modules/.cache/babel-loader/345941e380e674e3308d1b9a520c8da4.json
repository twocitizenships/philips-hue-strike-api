{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.groupsApi = void 0;\n\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\n\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\n\nconst GroupIdPlaceholder_1 = require(\"../../placeholders/GroupIdPlaceholder\");\n\nconst ApiError_1 = require(\"../../../ApiError\");\n\nconst util_1 = require(\"../../../util\");\n\nconst GroupState = hue_bridge_model_1.model.GroupState,\n      instanceChecks = hue_bridge_model_1.model.instanceChecks;\nconst GROUP_ID_PLACEHOLDER = new GroupIdPlaceholder_1.GroupIdPlaceholder();\nconst groupsApi = {\n  getAllGroups: new ApiEndpoint_1.ApiEndpoint().get().uri('/<username>/groups').acceptJson().pureJson().postProcess(buildGroupsResult),\n  createGroup: new ApiEndpoint_1.ApiEndpoint().post().uri('/<username>/groups').payload(buildGroupBody).acceptJson().pureJson().postProcess(buildCreateGroupResult),\n  getGroupAttributes: new ApiEndpoint_1.ApiEndpoint().get().uri('/<username>/groups/<id>').placeholder(GROUP_ID_PLACEHOLDER).acceptJson().pureJson().postProcess(buildGroup),\n  setGroupAttributes: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/groups/<id>').placeholder(GROUP_ID_PLACEHOLDER).acceptJson().payload(buildGroupAttributeBody).pureJson().postProcess(util_1.wasSuccessful),\n  setGroupState: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/groups/<id>/action').placeholder(GROUP_ID_PLACEHOLDER).payload(buildGroupStateBody).pureJson().postProcess(util_1.wasSuccessful),\n  deleteGroup: new ApiEndpoint_1.ApiEndpoint().delete().uri('/<username>/groups/<id>').placeholder(GROUP_ID_PLACEHOLDER).pureJson().postProcess(validateGroupDeletion),\n  setStreaming: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/groups/<id>').placeholder(GROUP_ID_PLACEHOLDER).payload(buildStreamBody).pureJson().postProcess(util_1.wasSuccessful)\n};\nexports.groupsApi = groupsApi;\n\nfunction buildGroupsResult(result) {\n  const groups = [];\n  Object.keys(result).forEach(groupId => {\n    const payload = result[groupId],\n          type = payload.type.toLowerCase(),\n          group = hue_bridge_model_1.model.createFromBridge(type, groupId, payload);\n    groups.push(group);\n  });\n  return groups;\n} //TODO this is questionable\n\n\nfunction buildCreateGroupResult(result) {\n  const hueErrors = (0, util_1.parseErrors)(result); //TODO not sure if this still gets called as the request handles some of this\n\n  if (hueErrors) {\n    throw new ApiError_1.ApiError(`Error creating group: ${hueErrors[0].description}`, hueErrors[0]);\n  }\n\n  return {\n    id: Number(result[0].success.id)\n  };\n}\n\nfunction buildGroupStateBody(data) {\n  if (!data || !data.state) {\n    throw new ApiError_1.ApiError('A GroupState must be provided');\n  }\n\n  let state;\n\n  if (data.state instanceof GroupState) {\n    state = data.state;\n  } else {\n    state = new GroupState().populate(data.state);\n  }\n\n  return {\n    type: 'application/json',\n    body: state.getPayload()\n  };\n}\n\nfunction buildGroupBody(parameters) {\n  const group = parameters.group;\n\n  if (!group) {\n    throw new ApiError_1.ApiError('A group must be provided');\n  }\n\n  if (!instanceChecks.isGroupInstance(group)) {\n    throw new ApiError_1.ApiError('group parameter must be an instance of a Group');\n  }\n\n  const result = {\n    type: 'application/json',\n    body: {\n      name: group.name,\n      type: group.type\n    }\n  };\n\n  if (group.lights) {\n    // @ts-ignore\n    result.body.lights = group.lights;\n  } else if (group.type === 'Entertainment') {\n    // Entertainment requires a empty array to be passed in if no lights defined.\n    // @ts-ignore\n    result.body.lights = [];\n  }\n\n  if (group.class) {\n    // @ts-ignore\n    result.body.class = group.class;\n  } else {\n    // @ts-ignore\n    result.body.recycle = group.recycle;\n  }\n\n  return result;\n}\n\nfunction buildGroupAttributeBody(parameters) {\n  const body = {},\n        group = parameters.group;\n\n  if (!group) {\n    throw new ApiError_1.ApiError('A group is required to update attributes');\n  } //TODO if you have an entertainment group and are updating the lights, they must be capabilities.streaming.renderer = true\n\n\n  let payload;\n\n  if (instanceChecks.isGroupInstance(group)) {\n    payload = group.getHuePayload();\n  } else {\n    payload = group;\n  }\n\n  ['name', 'lights', 'class'].forEach(key => {\n    if (payload[key]) {\n      body[key] = payload[key];\n    }\n  });\n  return {\n    type: 'application/json',\n    body: body\n  };\n}\n\nfunction buildStreamBody(parameters) {\n  const body = {\n    stream: {\n      active: !!parameters.active\n    }\n  };\n  return {\n    type: 'application/json',\n    body: body\n  };\n}\n\nfunction buildGroup(data, requestParameters) {\n  const type = data.type.toLowerCase(),\n        id = GROUP_ID_PLACEHOLDER.getValue(requestParameters);\n  return hue_bridge_model_1.model.createFromBridge(type, id, data);\n}\n\nfunction validateGroupDeletion(result) {\n  if (!(0, util_1.wasSuccessful)(result)) {\n    const parsed = (0, util_1.parseErrors)(result);\n    throw new ApiError_1.ApiError(parsed ? parsed.join(', ') : `Unexpected response for deletion: ${JSON.stringify(result)}`);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/endpoints/groups.js"],"names":["Object","defineProperty","exports","value","groupsApi","hue_bridge_model_1","require","ApiEndpoint_1","GroupIdPlaceholder_1","ApiError_1","util_1","GroupState","model","instanceChecks","GROUP_ID_PLACEHOLDER","GroupIdPlaceholder","getAllGroups","ApiEndpoint","get","uri","acceptJson","pureJson","postProcess","buildGroupsResult","createGroup","post","payload","buildGroupBody","buildCreateGroupResult","getGroupAttributes","placeholder","buildGroup","setGroupAttributes","put","buildGroupAttributeBody","wasSuccessful","setGroupState","buildGroupStateBody","deleteGroup","delete","validateGroupDeletion","setStreaming","buildStreamBody","result","groups","keys","forEach","groupId","type","toLowerCase","group","createFromBridge","push","hueErrors","parseErrors","ApiError","description","id","Number","success","data","state","populate","body","getPayload","parameters","isGroupInstance","name","lights","class","recycle","getHuePayload","key","stream","active","requestParameters","getValue","parsed","join","JSON","stringify"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.groupsApi = void 0;\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\nconst GroupIdPlaceholder_1 = require(\"../../placeholders/GroupIdPlaceholder\");\nconst ApiError_1 = require(\"../../../ApiError\");\nconst util_1 = require(\"../../../util\");\nconst GroupState = hue_bridge_model_1.model.GroupState, instanceChecks = hue_bridge_model_1.model.instanceChecks;\nconst GROUP_ID_PLACEHOLDER = new GroupIdPlaceholder_1.GroupIdPlaceholder();\nconst groupsApi = {\n    getAllGroups: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .uri('/<username>/groups')\n        .acceptJson()\n        .pureJson()\n        .postProcess(buildGroupsResult),\n    createGroup: new ApiEndpoint_1.ApiEndpoint()\n        .post()\n        .uri('/<username>/groups')\n        .payload(buildGroupBody)\n        .acceptJson()\n        .pureJson()\n        .postProcess(buildCreateGroupResult),\n    getGroupAttributes: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .uri('/<username>/groups/<id>')\n        .placeholder(GROUP_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n        .postProcess(buildGroup),\n    setGroupAttributes: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/groups/<id>')\n        .placeholder(GROUP_ID_PLACEHOLDER)\n        .acceptJson()\n        .payload(buildGroupAttributeBody)\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    setGroupState: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/groups/<id>/action')\n        .placeholder(GROUP_ID_PLACEHOLDER)\n        .payload(buildGroupStateBody)\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    deleteGroup: new ApiEndpoint_1.ApiEndpoint()\n        .delete()\n        .uri('/<username>/groups/<id>')\n        .placeholder(GROUP_ID_PLACEHOLDER)\n        .pureJson()\n        .postProcess(validateGroupDeletion),\n    setStreaming: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/groups/<id>')\n        .placeholder(GROUP_ID_PLACEHOLDER)\n        .payload(buildStreamBody)\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n};\nexports.groupsApi = groupsApi;\nfunction buildGroupsResult(result) {\n    const groups = [];\n    Object.keys(result).forEach(groupId => {\n        const payload = result[groupId], type = payload.type.toLowerCase(), group = hue_bridge_model_1.model.createFromBridge(type, groupId, payload);\n        groups.push(group);\n    });\n    return groups;\n}\n//TODO this is questionable\nfunction buildCreateGroupResult(result) {\n    const hueErrors = (0, util_1.parseErrors)(result); //TODO not sure if this still gets called as the request handles some of this\n    if (hueErrors) {\n        throw new ApiError_1.ApiError(`Error creating group: ${hueErrors[0].description}`, hueErrors[0]);\n    }\n    return { id: Number(result[0].success.id) };\n}\nfunction buildGroupStateBody(data) {\n    if (!data || !data.state) {\n        throw new ApiError_1.ApiError('A GroupState must be provided');\n    }\n    let state;\n    if (data.state instanceof GroupState) {\n        state = data.state;\n    }\n    else {\n        state = new GroupState().populate(data.state);\n    }\n    return {\n        type: 'application/json',\n        body: state.getPayload()\n    };\n}\nfunction buildGroupBody(parameters) {\n    const group = parameters.group;\n    if (!group) {\n        throw new ApiError_1.ApiError('A group must be provided');\n    }\n    if (!instanceChecks.isGroupInstance(group)) {\n        throw new ApiError_1.ApiError('group parameter must be an instance of a Group');\n    }\n    const result = {\n        type: 'application/json',\n        body: {\n            name: group.name,\n            type: group.type,\n        }\n    };\n    if (group.lights) {\n        // @ts-ignore\n        result.body.lights = group.lights;\n    }\n    else if (group.type === 'Entertainment') {\n        // Entertainment requires a empty array to be passed in if no lights defined.\n        // @ts-ignore\n        result.body.lights = [];\n    }\n    if (group.class) {\n        // @ts-ignore\n        result.body.class = group.class;\n    }\n    else {\n        // @ts-ignore\n        result.body.recycle = group.recycle;\n    }\n    return result;\n}\nfunction buildGroupAttributeBody(parameters) {\n    const body = {}, group = parameters.group;\n    if (!group) {\n        throw new ApiError_1.ApiError('A group is required to update attributes');\n    }\n    //TODO if you have an entertainment group and are updating the lights, they must be capabilities.streaming.renderer = true\n    let payload;\n    if (instanceChecks.isGroupInstance(group)) {\n        payload = group.getHuePayload();\n    }\n    else {\n        payload = group;\n    }\n    ['name', 'lights', 'class'].forEach(key => {\n        if (payload[key]) {\n            body[key] = payload[key];\n        }\n    });\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\nfunction buildStreamBody(parameters) {\n    const body = {\n        stream: {\n            active: !!parameters.active\n        }\n    };\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\nfunction buildGroup(data, requestParameters) {\n    const type = data.type.toLowerCase(), id = GROUP_ID_PLACEHOLDER.getValue(requestParameters);\n    return hue_bridge_model_1.model.createFromBridge(type, id, data);\n}\nfunction validateGroupDeletion(result) {\n    if (!(0, util_1.wasSuccessful)(result)) {\n        const parsed = (0, util_1.parseErrors)(result);\n        throw new ApiError_1.ApiError(parsed ? parsed.join(', ') : `Unexpected response for deletion: ${JSON.stringify(result)}`);\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"script"}