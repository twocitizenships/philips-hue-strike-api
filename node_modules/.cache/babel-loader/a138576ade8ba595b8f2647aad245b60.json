{"ast":null,"code":"import { BridgeTime } from './BridgeTime';\nimport { RANDOMIZED_TIME_REGEX } from './timeUtil';\nimport { HueTime } from './HueTime';\nimport { HueDate } from './HueDate';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nexport class RandomizedTime extends BridgeTime {\n  constructor(value) {\n    super();\n    this.date = new HueDate();\n    this.time = new HueTime();\n    this.random = new HueTime();\n    this.time = new HueTime();\n    this.date = new HueDate();\n    this.random = new HueTime();\n\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  static matches(value) {\n    return RANDOMIZED_TIME_REGEX.test(value);\n  }\n\n  set value(value) {\n    if (value instanceof RandomizedTime) {\n      // Re-enter this function using string value\n      this.value = value.toString();\n    } else if (value instanceof Date) {\n      this.time.fromDate(value);\n      this.date.fromDate(value);\n      this.random = new HueTime();\n    } else {\n      const parsed = RANDOMIZED_TIME_REGEX.exec(value);\n\n      if (parsed) {\n        const time = this.time; // @ts-ignore\n\n        time.hours = parsed.groups.hours; // @ts-ignore\n\n        time.minutes = parsed.groups.minutes; // @ts-ignore\n\n        time.seconds = parsed.groups.seconds;\n        const date = this.date; // @ts-ignore\n\n        date.year = parsed.groups.year; // @ts-ignore\n\n        date.month = parsed.groups.month; // @ts-ignore\n\n        date.day = parsed.groups.day;\n        const random = this.random; // @ts-ignore\n\n        random.hours = parsed.groups.randomhours; // @ts-ignore\n\n        random.minutes = parsed.groups.randomminutes; // @ts-ignore\n\n        random.seconds = parsed.groups.randomseconds;\n      } else {\n        throw new HueBridgeModelError(`Cannot create a randomized time from ${value}`);\n      }\n    }\n  }\n\n  year(value) {\n    this.date.year = value;\n    return this;\n  }\n\n  month(value) {\n    this.date.month = value;\n    return this;\n  }\n\n  day(value) {\n    this.date.day = value;\n    return this;\n  }\n\n  hours(value) {\n    this.time.hours = value;\n    return this;\n  }\n\n  minutes(value) {\n    this.time.minutes = value;\n    return this;\n  }\n\n  seconds(value) {\n    this.time.seconds = value;\n    return this;\n  }\n\n  randomHours(value) {\n    this.random.hours = value;\n    return this;\n  }\n\n  randomMinutes(value) {\n    this.random.minutes = value;\n    return this;\n  }\n\n  randomSeconds(value) {\n    this.random.seconds = value;\n    return this;\n  }\n\n  toString() {\n    return `${this.date.toString()}T${this.time.toString()}A${this.random.toString()}`;\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/RandomizedTime.js"],"names":["BridgeTime","RANDOMIZED_TIME_REGEX","HueTime","HueDate","HueBridgeModelError","RandomizedTime","constructor","value","date","time","random","matches","test","toString","Date","fromDate","parsed","exec","hours","groups","minutes","seconds","year","month","day","randomhours","randomminutes","randomseconds","randomHours","randomMinutes","randomSeconds"],"mappings":"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","sourcesContent":["import { BridgeTime } from './BridgeTime';\nimport { RANDOMIZED_TIME_REGEX } from './timeUtil';\nimport { HueTime } from './HueTime';\nimport { HueDate } from './HueDate';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nexport class RandomizedTime extends BridgeTime {\n    constructor(value) {\n        super();\n        this.date = new HueDate();\n        this.time = new HueTime();\n        this.random = new HueTime();\n        this.time = new HueTime();\n        this.date = new HueDate();\n        this.random = new HueTime();\n        if (value) {\n            this.value = value;\n        }\n    }\n    static matches(value) {\n        return RANDOMIZED_TIME_REGEX.test(value);\n    }\n    set value(value) {\n        if (value instanceof RandomizedTime) {\n            // Re-enter this function using string value\n            this.value = value.toString();\n        }\n        else if (value instanceof Date) {\n            this.time.fromDate(value);\n            this.date.fromDate(value);\n            this.random = new HueTime();\n        }\n        else {\n            const parsed = RANDOMIZED_TIME_REGEX.exec(value);\n            if (parsed) {\n                const time = this.time;\n                // @ts-ignore\n                time.hours = parsed.groups.hours;\n                // @ts-ignore\n                time.minutes = parsed.groups.minutes;\n                // @ts-ignore\n                time.seconds = parsed.groups.seconds;\n                const date = this.date;\n                // @ts-ignore\n                date.year = parsed.groups.year;\n                // @ts-ignore\n                date.month = parsed.groups.month;\n                // @ts-ignore\n                date.day = parsed.groups.day;\n                const random = this.random;\n                // @ts-ignore\n                random.hours = parsed.groups.randomhours;\n                // @ts-ignore\n                random.minutes = parsed.groups.randomminutes;\n                // @ts-ignore\n                random.seconds = parsed.groups.randomseconds;\n            }\n            else {\n                throw new HueBridgeModelError(`Cannot create a randomized time from ${value}`);\n            }\n        }\n    }\n    year(value) {\n        this.date.year = value;\n        return this;\n    }\n    month(value) {\n        this.date.month = value;\n        return this;\n    }\n    day(value) {\n        this.date.day = value;\n        return this;\n    }\n    hours(value) {\n        this.time.hours = value;\n        return this;\n    }\n    minutes(value) {\n        this.time.minutes = value;\n        return this;\n    }\n    seconds(value) {\n        this.time.seconds = value;\n        return this;\n    }\n    randomHours(value) {\n        this.random.hours = value;\n        return this;\n    }\n    randomMinutes(value) {\n        this.random.minutes = value;\n        return this;\n    }\n    randomSeconds(value) {\n        this.random.seconds = value;\n        return this;\n    }\n    toString() {\n        return `${this.date.toString()}T${this.time.toString()}A${this.random.toString()}`;\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}