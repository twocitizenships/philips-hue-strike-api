{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HueApiRateLimitLogger = void 0; //TODO this is a different debug item otherwise we turn on the standar logging too\n\nconst DEBUG = /node-hue-rate-limits/.test(process.env['NODE_DEBUG'] || '');\n\nclass HueApiRateLimitLogger {\n  constructor(name) {\n    this.name = name;\n  }\n\n  static install(name, bottleneck) {\n    if (HueApiRateLimitLogger.isDebug()) {\n      const logger = new HueApiRateLimitLogger(name);\n      bottleneck.on('error', err => {\n        logger.log('error', err);\n      });\n      bottleneck.on('failed', err => {\n        logger.log('failed', err);\n      });\n      bottleneck.on('received', err => {\n        logger.log('received', err);\n      });\n      bottleneck.on('queued', err => {\n        logger.log('queued', err);\n      });\n      bottleneck.on('executing', err => {\n        logger.log('executing', err);\n      });\n      bottleneck.on('done', err => {\n        logger.log('done', err);\n      });\n    }\n  }\n\n  static isDebug() {\n    return DEBUG;\n  }\n\n  log(event, payload) {\n    if (HueApiRateLimitLogger.isDebug()) {\n      let detail = `${event}`;\n\n      if (payload) {\n        detail += `\\n${JSON.stringify(payload)}`;\n      }\n\n      console.log(`HueApiRateLimiter [${this.name}] :: ${detail}`);\n    }\n  }\n\n}\n\nexports.HueApiRateLimitLogger = HueApiRateLimitLogger;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/HueApiRateLimitLogger.js"],"names":["Object","defineProperty","exports","value","HueApiRateLimitLogger","DEBUG","test","process","env","constructor","name","install","bottleneck","isDebug","logger","on","err","log","event","payload","detail","JSON","stringify","console"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC,C,CACA;;AACA,MAAMC,KAAK,GAAG,uBAAuBC,IAAvB,CAA4BC,OAAO,CAACC,GAAR,CAAY,YAAZ,KAA6B,EAAzD,CAAd;;AACA,MAAMJ,qBAAN,CAA4B;AACxBK,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACa,SAAPC,OAAO,CAACD,IAAD,EAAOE,UAAP,EAAmB;AAC7B,QAAIR,qBAAqB,CAACS,OAAtB,EAAJ,EAAqC;AACjC,YAAMC,MAAM,GAAG,IAAIV,qBAAJ,CAA0BM,IAA1B,CAAf;AACAE,MAAAA,UAAU,CAACG,EAAX,CAAc,OAAd,EAAwBC,GAAD,IAAS;AAC5BF,QAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBD,GAApB;AACH,OAFD;AAGAJ,MAAAA,UAAU,CAACG,EAAX,CAAc,QAAd,EAAyBC,GAAD,IAAS;AAC7BF,QAAAA,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBD,GAArB;AACH,OAFD;AAGAJ,MAAAA,UAAU,CAACG,EAAX,CAAc,UAAd,EAA2BC,GAAD,IAAS;AAC/BF,QAAAA,MAAM,CAACG,GAAP,CAAW,UAAX,EAAuBD,GAAvB;AACH,OAFD;AAGAJ,MAAAA,UAAU,CAACG,EAAX,CAAc,QAAd,EAAyBC,GAAD,IAAS;AAC7BF,QAAAA,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBD,GAArB;AACH,OAFD;AAGAJ,MAAAA,UAAU,CAACG,EAAX,CAAc,WAAd,EAA4BC,GAAD,IAAS;AAChCF,QAAAA,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwBD,GAAxB;AACH,OAFD;AAGAJ,MAAAA,UAAU,CAACG,EAAX,CAAc,MAAd,EAAuBC,GAAD,IAAS;AAC3BF,QAAAA,MAAM,CAACG,GAAP,CAAW,MAAX,EAAmBD,GAAnB;AACH,OAFD;AAGH;AACJ;;AACa,SAAPH,OAAO,GAAG;AACb,WAAOR,KAAP;AACH;;AACDY,EAAAA,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAChB,QAAIf,qBAAqB,CAACS,OAAtB,EAAJ,EAAqC;AACjC,UAAIO,MAAM,GAAI,GAAEF,KAAM,EAAtB;;AACA,UAAIC,OAAJ,EAAa;AACTC,QAAAA,MAAM,IAAK,KAAIC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAwB,EAAvC;AACH;;AACDI,MAAAA,OAAO,CAACN,GAAR,CAAa,sBAAqB,KAAKP,IAAK,QAAOU,MAAO,EAA1D;AACH;AACJ;;AAtCuB;;AAwC5BlB,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HueApiRateLimitLogger = void 0;\n//TODO this is a different debug item otherwise we turn on the standar logging too\nconst DEBUG = /node-hue-rate-limits/.test(process.env['NODE_DEBUG'] || '');\nclass HueApiRateLimitLogger {\n    constructor(name) {\n        this.name = name;\n    }\n    static install(name, bottleneck) {\n        if (HueApiRateLimitLogger.isDebug()) {\n            const logger = new HueApiRateLimitLogger(name);\n            bottleneck.on('error', (err) => {\n                logger.log('error', err);\n            });\n            bottleneck.on('failed', (err) => {\n                logger.log('failed', err);\n            });\n            bottleneck.on('received', (err) => {\n                logger.log('received', err);\n            });\n            bottleneck.on('queued', (err) => {\n                logger.log('queued', err);\n            });\n            bottleneck.on('executing', (err) => {\n                logger.log('executing', err);\n            });\n            bottleneck.on('done', (err) => {\n                logger.log('done', err);\n            });\n        }\n    }\n    static isDebug() {\n        return DEBUG;\n    }\n    log(event, payload) {\n        if (HueApiRateLimitLogger.isDebug()) {\n            let detail = `${event}`;\n            if (payload) {\n                detail += `\\n${JSON.stringify(payload)}`;\n            }\n            console.log(`HueApiRateLimiter [${this.name}] :: ${detail}`);\n        }\n    }\n}\nexports.HueApiRateLimitLogger = HueApiRateLimitLogger;\n"]},"metadata":{},"sourceType":"script"}