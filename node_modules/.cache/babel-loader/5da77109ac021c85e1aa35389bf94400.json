{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SSDPSearch = void 0;\n\nconst dgram = __importStar(require(\"dgram\"));\n\nconst events = __importStar(require(\"events\"));\n\nclass SSDPSearch {\n  constructor() {\n    const self = this;\n    this.responseEmitter = new events.EventEmitter();\n    this.socket = dgram.createSocket('udp4');\n    this.socket.on('error', function (err) {\n      self.responseEmitter.emit('error', err);\n    });\n    this.socket.on('message', function onMessage(msg, rinfo) {\n      const msgStrings = msg.toString().split('\\r\\n'); // HTTP/#.# ### Response\n\n      if (msgStrings[0].match(/HTTP\\/(\\d{1})\\.(\\d{1}) (\\d+) (.*)/)) {\n        self.responseEmitter.emit('response', _parseSearchResponse(msgStrings.slice(1)));\n      }\n    }); // Ensure the socket is released on exit of the process (in case of errors)\n\n    process.on('exit', this.finished.bind(this));\n  }\n\n  search(timeout) {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      const results = [];\n      self.responseEmitter.on('error', err => {\n        self.finished();\n        reject(err);\n      });\n      self.responseEmitter.on('response', value => {\n        results.push(value);\n      }); // Await our timeout before returning any results\n\n      setTimeout(() => {\n        self.finished();\n        resolve(_processResults(results));\n      }, timeout || 5000);\n\n      self._start();\n    });\n  }\n\n  _start() {\n    if (this.socket) {\n      const ip = '239.255.255.250',\n            port = 1900;\n      const pkt = Buffer.from(_buildSearchPacket({\n        'HOST': ip + ':' + port,\n        'MAN': 'ssdp:discover',\n        'MX': 10,\n        //            \"ST\": \"SsdpSearch:all\"\n        'ST': 'urn:schemas-upnp-org:device:Basic:1'\n      }));\n      this.socket.send(pkt, 0, pkt.length, port, ip);\n    }\n  }\n\n  finished() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = undefined;\n    }\n  }\n\n}\n\nexports.SSDPSearch = SSDPSearch;\n\nfunction _buildSearchPacket(vars) {\n  let packet = 'M-SEARCH * HTTP/1.1\\r\\n';\n  Object.keys(vars).forEach(function (n) {\n    packet += `${n}: ${vars[n]}\\r\\n`;\n  });\n  return `${packet}\\r\\n`;\n}\n\nfunction _parseSearchResponse(lines) {\n  const result = {};\n  lines.forEach(line => {\n    const separatorIndex = line.indexOf(':');\n\n    if (separatorIndex > 0 && separatorIndex < line.length) {\n      const key = line.substring(0, separatorIndex).toLowerCase();\n      const value = line.substring(separatorIndex + 1, line.length).trim();\n      result[key] = value;\n    }\n  });\n  return result;\n}\n\nfunction _processResults(responses) {\n  const results = {};\n  responses.forEach(response => {\n    const location = response.location; // Older versions used to use hue-bridgeId, now newer software versions use hue-bridgeid, remove the older fallback\n    // once they are outdated.\n\n    let hueBridgeId = response['hue-bridgeid'];\n\n    if (hueBridgeId == undefined) {\n      hueBridgeId = response['hue-bridgeId'];\n    }\n\n    if (location && hueBridgeId) {\n      if (!results[location]) {\n        const ipAddress = /\\/\\/(.*):/.exec(location);\n\n        if (ipAddress) {\n          results[location] = {\n            id: hueBridgeId,\n            internalipaddress: ipAddress[1]\n          };\n        }\n      }\n    }\n  });\n  return Object.values(results);\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/discovery/UPnP.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","SSDPSearch","dgram","require","events","constructor","self","responseEmitter","EventEmitter","socket","createSocket","on","err","emit","onMessage","msg","rinfo","msgStrings","toString","split","match","_parseSearchResponse","slice","process","finished","bind","search","timeout","Promise","resolve","reject","results","push","setTimeout","_processResults","_start","ip","port","pkt","Buffer","from","_buildSearchPacket","send","length","close","vars","packet","keys","forEach","n","lines","line","separatorIndex","indexOf","key","substring","toLowerCase","trim","responses","response","location","hueBridgeId","ipAddress","exec","id","internalipaddress","values"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SSDPSearch = void 0;\nconst dgram = __importStar(require(\"dgram\"));\nconst events = __importStar(require(\"events\"));\nclass SSDPSearch {\n    constructor() {\n        const self = this;\n        this.responseEmitter = new events.EventEmitter();\n        this.socket = dgram.createSocket('udp4');\n        this.socket.on('error', function (err) {\n            self.responseEmitter.emit('error', err);\n        });\n        this.socket.on('message', function onMessage(msg, rinfo) {\n            const msgStrings = msg.toString().split('\\r\\n');\n            // HTTP/#.# ### Response\n            if (msgStrings[0].match(/HTTP\\/(\\d{1})\\.(\\d{1}) (\\d+) (.*)/)) {\n                self.responseEmitter.emit('response', _parseSearchResponse(msgStrings.slice(1)));\n            }\n        });\n        // Ensure the socket is released on exit of the process (in case of errors)\n        process.on('exit', this.finished.bind(this));\n    }\n    search(timeout) {\n        const self = this;\n        return new Promise((resolve, reject) => {\n            const results = [];\n            self.responseEmitter.on('error', err => {\n                self.finished();\n                reject(err);\n            });\n            self.responseEmitter.on('response', value => {\n                results.push(value);\n            });\n            // Await our timeout before returning any results\n            setTimeout(() => {\n                self.finished();\n                resolve(_processResults(results));\n            }, timeout || 5000);\n            self._start();\n        });\n    }\n    _start() {\n        if (this.socket) {\n            const ip = '239.255.255.250', port = 1900;\n            const pkt = Buffer.from(_buildSearchPacket({\n                'HOST': ip + ':' + port,\n                'MAN': 'ssdp:discover',\n                'MX': 10,\n                //            \"ST\": \"SsdpSearch:all\"\n                'ST': 'urn:schemas-upnp-org:device:Basic:1'\n            }));\n            this.socket.send(pkt, 0, pkt.length, port, ip);\n        }\n    }\n    finished() {\n        if (this.socket) {\n            this.socket.close();\n            this.socket = undefined;\n        }\n    }\n}\nexports.SSDPSearch = SSDPSearch;\nfunction _buildSearchPacket(vars) {\n    let packet = 'M-SEARCH * HTTP/1.1\\r\\n';\n    Object.keys(vars).forEach(function (n) {\n        packet += `${n}: ${vars[n]}\\r\\n`;\n    });\n    return `${packet}\\r\\n`;\n}\nfunction _parseSearchResponse(lines) {\n    const result = {};\n    lines.forEach(line => {\n        const separatorIndex = line.indexOf(':');\n        if (separatorIndex > 0 && separatorIndex < line.length) {\n            const key = line.substring(0, separatorIndex).toLowerCase();\n            const value = line.substring(separatorIndex + 1, line.length).trim();\n            result[key] = value;\n        }\n    });\n    return result;\n}\nfunction _processResults(responses) {\n    const results = {};\n    responses.forEach(response => {\n        const location = response.location;\n        // Older versions used to use hue-bridgeId, now newer software versions use hue-bridgeid, remove the older fallback\n        // once they are outdated.\n        let hueBridgeId = response['hue-bridgeid'];\n        if (hueBridgeId == undefined) {\n            hueBridgeId = response['hue-bridgeId'];\n        }\n        if (location && hueBridgeId) {\n            if (!results[location]) {\n                const ipAddress = /\\/\\/(.*):/.exec(location);\n                if (ipAddress) {\n                    results[location] = {\n                        id: hueBridgeId,\n                        internalipaddress: ipAddress[1]\n                    };\n                }\n            }\n        }\n    });\n    return Object.values(results);\n}\n"]},"metadata":{},"sourceType":"script"}