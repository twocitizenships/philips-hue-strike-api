{"ast":null,"code":"import { BaseType, isValueDefined } from './BaseType';\nimport { createFromString, isTimePattern } from '../time';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { BridgeTime } from '../time/BridgeTime';\nexport class TimePatternType extends BaseType {\n  constructor(config) {\n    super({ ...config,\n      type: 'timePattern'\n    });\n  }\n\n  getValue(value) {\n    const checkedValue = super.getValue(value),\n          isDefined = isValueDefined(checkedValue),\n          optional = this.optional; // If we are optional and have no value, prevent further checks as they will fail\n\n    if (optional && !isDefined) {\n      return checkedValue;\n    }\n\n    if (value instanceof BridgeTime) {\n      return value.toString();\n    } else if (isTimePattern(value)) {\n      return createFromString(value).toString();\n    } else {\n      //TODO may need to cater for a string\n      throw new HueBridgeModelError(`Cannot convert value \"${value}\" to a valid TimePatten`);\n    }\n  }\n\n  _convertToType(val) {\n    return createFromString(`${val}`);\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/types/TimePatternType.js"],"names":["BaseType","isValueDefined","createFromString","isTimePattern","HueBridgeModelError","BridgeTime","TimePatternType","constructor","config","type","getValue","value","checkedValue","isDefined","optional","toString","_convertToType","val"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,YAAzC;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,SAAhD;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAO,MAAMC,eAAN,SAA8BN,QAA9B,CAAuC;AAC1CO,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAM,EAAE,GAAGA,MAAL;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAN;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,UAAMC,YAAY,GAAG,MAAMF,QAAN,CAAeC,KAAf,CAArB;AAAA,UAA4CE,SAAS,GAAGZ,cAAc,CAACW,YAAD,CAAtE;AAAA,UAAsFE,QAAQ,GAAG,KAAKA,QAAtG,CADY,CAEZ;;AACA,QAAIA,QAAQ,IAAI,CAACD,SAAjB,EAA4B;AACxB,aAAOD,YAAP;AACH;;AACD,QAAID,KAAK,YAAYN,UAArB,EAAiC;AAC7B,aAAOM,KAAK,CAACI,QAAN,EAAP;AACH,KAFD,MAGK,IAAIZ,aAAa,CAACQ,KAAD,CAAjB,EAA0B;AAC3B,aAAOT,gBAAgB,CAACS,KAAD,CAAhB,CAAwBI,QAAxB,EAAP;AACH,KAFI,MAGA;AACD;AACA,YAAM,IAAIX,mBAAJ,CAAyB,yBAAwBO,KAAM,yBAAvD,CAAN;AACH;AACJ;;AACDK,EAAAA,cAAc,CAACC,GAAD,EAAM;AAChB,WAAOf,gBAAgB,CAAE,GAAEe,GAAI,EAAR,CAAvB;AACH;;AAvByC","sourcesContent":["import { BaseType, isValueDefined } from './BaseType';\nimport { createFromString, isTimePattern } from '../time';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { BridgeTime } from '../time/BridgeTime';\nexport class TimePatternType extends BaseType {\n    constructor(config) {\n        super({ ...config, type: 'timePattern' });\n    }\n    getValue(value) {\n        const checkedValue = super.getValue(value), isDefined = isValueDefined(checkedValue), optional = this.optional;\n        // If we are optional and have no value, prevent further checks as they will fail\n        if (optional && !isDefined) {\n            return checkedValue;\n        }\n        if (value instanceof BridgeTime) {\n            return value.toString();\n        }\n        else if (isTimePattern(value)) {\n            return createFromString(value).toString();\n        }\n        else {\n            //TODO may need to cater for a string\n            throw new HueBridgeModelError(`Cannot convert value \"${value}\" to a valid TimePatten`);\n        }\n    }\n    _convertToType(val) {\n        return createFromString(`${val}`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}