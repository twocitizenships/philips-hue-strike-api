{"ast":null,"code":"import { AttributeObject } from '../AttributeObject';\nexport class BridgeObject extends AttributeObject {\n  constructor(attributes) {\n    super(attributes);\n    this.populationData = null;\n  }\n\n  toStringDetailed() {\n    let result = `${this.constructor.name}`;\n    Object.keys(this.data).forEach(key => {\n      result += `\\n  ${key}: ${JSON.stringify(this.data[key])}`;\n    });\n    return result;\n  }\n  /**\n   * Obtains a node-hue-api specific JSON payload of the BridgeObject. This can be used for serialization purposes.\n   *\n   * This functionality exists to support use cases where server backends need to send data to a web based client to\n   * work around CORS or custom backend functionality, whilst preserving and providing reusability of the API objects.\n   *\n   * @returns {BridgeObjectJsonData} A node-hue-api specific payload that represents the Bridge Object, this can be reconstructed into\n   * a valid BridgeObject instance via the model.createFromJson() function.\n   */\n\n\n  getJsonPayload() {\n    const data = this._bridgeData;\n    data.node_hue_api = {\n      type: this.constructor.name.toLowerCase(),\n      version: 1\n    }; // @ts-ignore\n\n    return data;\n  }\n  /**\n   * Obtains a Hue API compatible representation of the Bridge Object that can be used over the RESTful API.\n   * @returns {BridgeObjectHueData} The payload that is compatible with the Hue RESTful API documentation.\n   */\n\n\n  getHuePayload() {\n    const result = {};\n    Object.keys(this.attributes).forEach(name => {\n      const value = this.getAttributeValue(name);\n\n      if (value !== null && value !== undefined) {\n        result[name] = value;\n      }\n    });\n    return result;\n  } // /**\n  //  * @returns {any | {}}\n  //  * @private\n  //  */\n  // get _bridgeData() {\n  //   // Return a copy so that it cannot be modified from outside\n  //   return Object.assign({}, this.data);\n  // }\n\n  /**\n   * @param data {*}\n   * @returns {BridgeObject}\n   * @private\n   */\n\n\n  _populate(data) {\n    const self = this; //TODO Maybe need to support api data and bridge data separately in this call, but treat as the same for now\n\n    if (data) {\n      Object.keys(data).forEach(key => {\n        if (self.attributes[key]) {\n          self.setAttributeValue(key, data[key]);\n        }\n      });\n    } // Store this so we can do a diff on it later to help with support of new devices and changes in the API results in the future\n\n\n    this.populationData = data;\n    return self;\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/BridgeObject.js"],"names":["AttributeObject","BridgeObject","constructor","attributes","populationData","toStringDetailed","result","name","Object","keys","data","forEach","key","JSON","stringify","getJsonPayload","_bridgeData","node_hue_api","type","toLowerCase","version","getHuePayload","value","getAttributeValue","undefined","_populate","self","setAttributeValue"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAO,MAAMC,YAAN,SAA2BD,eAA3B,CAA2C;AAC9CE,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,UAAMA,UAAN;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,QAAIC,MAAM,GAAI,GAAE,KAAKJ,WAAL,CAAiBK,IAAK,EAAtC;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKC,IAAjB,EAAuBC,OAAvB,CAA+BC,GAAG,IAAI;AAClCN,MAAAA,MAAM,IAAK,OAAMM,GAAI,KAAIC,IAAI,CAACC,SAAL,CAAe,KAAKJ,IAAL,CAAUE,GAAV,CAAf,CAA+B,EAAxD;AACH,KAFD;AAGA,WAAON,MAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,cAAc,GAAG;AACb,UAAML,IAAI,GAAG,KAAKM,WAAlB;AACAN,IAAAA,IAAI,CAACO,YAAL,GAAoB;AAChBC,MAAAA,IAAI,EAAE,KAAKhB,WAAL,CAAiBK,IAAjB,CAAsBY,WAAtB,EADU;AAEhBC,MAAAA,OAAO,EAAE;AAFO,KAApB,CAFa,CAMb;;AACA,WAAOV,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIW,EAAAA,aAAa,GAAG;AACZ,UAAMf,MAAM,GAAG,EAAf;AACAE,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKN,UAAjB,EAA6BQ,OAA7B,CAAqCJ,IAAI,IAAI;AACzC,YAAMe,KAAK,GAAG,KAAKC,iBAAL,CAAuBhB,IAAvB,CAAd;;AACA,UAAIe,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAAhC,EAA2C;AACvClB,QAAAA,MAAM,CAACC,IAAD,CAAN,GAAee,KAAf;AACH;AACJ,KALD;AAMA,WAAOhB,MAAP;AACH,GA3C6C,CA4C9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;;;AACImB,EAAAA,SAAS,CAACf,IAAD,EAAO;AACZ,UAAMgB,IAAI,GAAG,IAAb,CADY,CAEZ;;AACA,QAAIhB,IAAJ,EAAU;AACNF,MAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,EAAkBC,OAAlB,CAA0BC,GAAG,IAAI;AAC7B,YAAIc,IAAI,CAACvB,UAAL,CAAgBS,GAAhB,CAAJ,EAA0B;AACtBc,UAAAA,IAAI,CAACC,iBAAL,CAAuBf,GAAvB,EAA4BF,IAAI,CAACE,GAAD,CAAhC;AACH;AACJ,OAJD;AAKH,KATW,CAUZ;;;AACA,SAAKR,cAAL,GAAsBM,IAAtB;AACA,WAAOgB,IAAP;AACH;;AAtE6C","sourcesContent":["import { AttributeObject } from '../AttributeObject';\nexport class BridgeObject extends AttributeObject {\n    constructor(attributes) {\n        super(attributes);\n        this.populationData = null;\n    }\n    toStringDetailed() {\n        let result = `${this.constructor.name}`;\n        Object.keys(this.data).forEach(key => {\n            result += `\\n  ${key}: ${JSON.stringify(this.data[key])}`;\n        });\n        return result;\n    }\n    /**\n     * Obtains a node-hue-api specific JSON payload of the BridgeObject. This can be used for serialization purposes.\n     *\n     * This functionality exists to support use cases where server backends need to send data to a web based client to\n     * work around CORS or custom backend functionality, whilst preserving and providing reusability of the API objects.\n     *\n     * @returns {BridgeObjectJsonData} A node-hue-api specific payload that represents the Bridge Object, this can be reconstructed into\n     * a valid BridgeObject instance via the model.createFromJson() function.\n     */\n    getJsonPayload() {\n        const data = this._bridgeData;\n        data.node_hue_api = {\n            type: this.constructor.name.toLowerCase(),\n            version: 1\n        };\n        // @ts-ignore\n        return data;\n    }\n    /**\n     * Obtains a Hue API compatible representation of the Bridge Object that can be used over the RESTful API.\n     * @returns {BridgeObjectHueData} The payload that is compatible with the Hue RESTful API documentation.\n     */\n    getHuePayload() {\n        const result = {};\n        Object.keys(this.attributes).forEach(name => {\n            const value = this.getAttributeValue(name);\n            if (value !== null && value !== undefined) {\n                result[name] = value;\n            }\n        });\n        return result;\n    }\n    // /**\n    //  * @returns {any | {}}\n    //  * @private\n    //  */\n    // get _bridgeData() {\n    //   // Return a copy so that it cannot be modified from outside\n    //   return Object.assign({}, this.data);\n    // }\n    /**\n     * @param data {*}\n     * @returns {BridgeObject}\n     * @private\n     */\n    _populate(data) {\n        const self = this;\n        //TODO Maybe need to support api data and bridge data separately in this call, but treat as the same for now\n        if (data) {\n            Object.keys(data).forEach(key => {\n                if (self.attributes[key]) {\n                    self.setAttributeValue(key, data[key]);\n                }\n            });\n        }\n        // Store this so we can do a diff on it later to help with support of new devices and changes in the API results in the future\n        this.populationData = data;\n        return self;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}