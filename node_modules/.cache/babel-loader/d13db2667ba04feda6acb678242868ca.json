{"ast":null,"code":"\"use strict\";\n\nvar Batcher, Events, parser;\nparser = require(\"./parser\");\nEvents = require(\"./Events\");\n\nBatcher = function () {\n  class Batcher {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.options = options;\n      parser.load(this.options, this.defaults, this);\n      this.Events = new Events(this);\n      this._arr = [];\n\n      this._resetPromise();\n\n      this._lastFlush = Date.now();\n    }\n\n    _resetPromise() {\n      return this._promise = new this.Promise((res, rej) => {\n        return this._resolve = res;\n      });\n    }\n\n    _flush() {\n      clearTimeout(this._timeout);\n      this._lastFlush = Date.now();\n\n      this._resolve();\n\n      this.Events.trigger(\"batch\", this._arr);\n      this._arr = [];\n      return this._resetPromise();\n    }\n\n    add(data) {\n      var ret;\n\n      this._arr.push(data);\n\n      ret = this._promise;\n\n      if (this._arr.length === this.maxSize) {\n        this._flush();\n      } else if (this.maxTime != null && this._arr.length === 1) {\n        this._timeout = setTimeout(() => {\n          return this._flush();\n        }, this.maxTime);\n      }\n\n      return ret;\n    }\n\n  }\n\n  ;\n  Batcher.prototype.defaults = {\n    maxTime: null,\n    maxSize: null,\n    Promise: Promise\n  };\n  return Batcher;\n}.call(void 0);\n\nmodule.exports = Batcher;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/bottleneck/lib/Batcher.js"],"names":["Batcher","Events","parser","require","constructor","options","load","defaults","_arr","_resetPromise","_lastFlush","Date","now","_promise","Promise","res","rej","_resolve","_flush","clearTimeout","_timeout","trigger","add","data","ret","push","length","maxSize","maxTime","setTimeout","prototype","call","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAJ,EAAaC,MAAb,EAAqBC,MAArB;AACAA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAhB;AACAF,MAAM,GAAGE,OAAO,CAAC,UAAD,CAAhB;;AAEAH,OAAO,GAAG,YAAY;AACpB,QAAMA,OAAN,CAAc;AACZI,IAAAA,WAAW,GAAe;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AACxB,WAAKA,OAAL,GAAeA,OAAf;AACAH,MAAAA,MAAM,CAACI,IAAP,CAAY,KAAKD,OAAjB,EAA0B,KAAKE,QAA/B,EAAyC,IAAzC;AACA,WAAKN,MAAL,GAAc,IAAIA,MAAJ,CAAW,IAAX,CAAd;AACA,WAAKO,IAAL,GAAY,EAAZ;;AAEA,WAAKC,aAAL;;AAEA,WAAKC,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB;AACD;;AAEDH,IAAAA,aAAa,GAAG;AACd,aAAO,KAAKI,QAAL,GAAgB,IAAI,KAAKC,OAAT,CAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpD,eAAO,KAAKC,QAAL,GAAgBF,GAAvB;AACD,OAFsB,CAAvB;AAGD;;AAEDG,IAAAA,MAAM,GAAG;AACPC,MAAAA,YAAY,CAAC,KAAKC,QAAN,CAAZ;AACA,WAAKV,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB;;AAEA,WAAKK,QAAL;;AAEA,WAAKhB,MAAL,CAAYoB,OAAZ,CAAoB,OAApB,EAA6B,KAAKb,IAAlC;AACA,WAAKA,IAAL,GAAY,EAAZ;AACA,aAAO,KAAKC,aAAL,EAAP;AACD;;AAEDa,IAAAA,GAAG,CAACC,IAAD,EAAO;AACR,UAAIC,GAAJ;;AAEA,WAAKhB,IAAL,CAAUiB,IAAV,CAAeF,IAAf;;AAEAC,MAAAA,GAAG,GAAG,KAAKX,QAAX;;AAEA,UAAI,KAAKL,IAAL,CAAUkB,MAAV,KAAqB,KAAKC,OAA9B,EAAuC;AACrC,aAAKT,MAAL;AACD,OAFD,MAEO,IAAI,KAAKU,OAAL,IAAgB,IAAhB,IAAwB,KAAKpB,IAAL,CAAUkB,MAAV,KAAqB,CAAjD,EAAoD;AACzD,aAAKN,QAAL,GAAgBS,UAAU,CAAC,MAAM;AAC/B,iBAAO,KAAKX,MAAL,EAAP;AACD,SAFyB,EAEvB,KAAKU,OAFkB,CAA1B;AAGD;;AAED,aAAOJ,GAAP;AACD;;AA7CW;;AAiDd;AACAxB,EAAAA,OAAO,CAAC8B,SAAR,CAAkBvB,QAAlB,GAA6B;AAC3BqB,IAAAA,OAAO,EAAE,IADkB;AAE3BD,IAAAA,OAAO,EAAE,IAFkB;AAG3Bb,IAAAA,OAAO,EAAEA;AAHkB,GAA7B;AAKA,SAAOd,OAAP;AACD,CAzDS,CAyDR+B,IAzDQ,CAyDH,KAAK,CAzDF,CAAV;;AA2DAC,MAAM,CAACC,OAAP,GAAiBjC,OAAjB","sourcesContent":["\"use strict\";\n\nvar Batcher, Events, parser;\nparser = require(\"./parser\");\nEvents = require(\"./Events\");\n\nBatcher = function () {\n  class Batcher {\n    constructor(options = {}) {\n      this.options = options;\n      parser.load(this.options, this.defaults, this);\n      this.Events = new Events(this);\n      this._arr = [];\n\n      this._resetPromise();\n\n      this._lastFlush = Date.now();\n    }\n\n    _resetPromise() {\n      return this._promise = new this.Promise((res, rej) => {\n        return this._resolve = res;\n      });\n    }\n\n    _flush() {\n      clearTimeout(this._timeout);\n      this._lastFlush = Date.now();\n\n      this._resolve();\n\n      this.Events.trigger(\"batch\", this._arr);\n      this._arr = [];\n      return this._resetPromise();\n    }\n\n    add(data) {\n      var ret;\n\n      this._arr.push(data);\n\n      ret = this._promise;\n\n      if (this._arr.length === this.maxSize) {\n        this._flush();\n      } else if (this.maxTime != null && this._arr.length === 1) {\n        this._timeout = setTimeout(() => {\n          return this._flush();\n        }, this.maxTime);\n      }\n\n      return ret;\n    }\n\n  }\n\n  ;\n  Batcher.prototype.defaults = {\n    maxTime: null,\n    maxSize: null,\n    Promise: Promise\n  };\n  return Batcher;\n}.call(void 0);\n\nmodule.exports = Batcher;"]},"metadata":{},"sourceType":"script"}