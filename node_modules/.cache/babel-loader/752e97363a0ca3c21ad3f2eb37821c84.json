{"ast":null,"code":"import { BridgeObjectWithId } from './BridgeObjectWithId';\nimport { getColorGamut } from './ColorGamuts';\nimport { ObjectType, StringType, UInt8Type } from '../types';\nconst MODEL_TO_COLOR_GAMUT = {\n  'LCT001': 'B',\n  'LCT007': 'B',\n  'LCT010': 'C',\n  'LCT014': 'C',\n  'LCT015': 'C',\n  'LCT016': 'C',\n  'LCT002': 'B',\n  'LCT003': 'B',\n  'LCT011': 'C',\n  // 'LCT024': 'C', //TODO this can be read from capabilities.control.colorgamut and colorgamuttype now - REMOVE THIS\n  'LTW011': '2200K-6500K',\n  'LST001': 'A',\n  'LLC010': 'A',\n  'LLC011': 'A',\n  'LLC012': 'A',\n  'LLC006': 'A',\n  'LLC005': 'A',\n  'LLC007': 'A',\n  'LLC014': 'A',\n  'LLC013': 'A',\n  'LLM001': 'B',\n  'LLM010': '2200K-6500K',\n  'LLM011': '2200K-6500K',\n  'LTW001': '2200K-6500K',\n  'LTW004': '2200K-6500K',\n  'LTW010': '2200K-6500K',\n  'LTW015': '2200K-6500K',\n  'LTW013': '2200K-6500K',\n  'LTW014': '2200K-6500K',\n  'LLC020': 'C',\n  'LST002': 'C',\n  'LCT012': 'C',\n  'LTW012': '2200K-6500K',\n  // Lamps\n  'LTP001': '2200K-6500K',\n  'LTP002': '2200K-6500K',\n  'LTP003': '2200K-6500K',\n  'LTP004': '2200K-6500K',\n  'LTP005': '2200K-6500K',\n  'LTF001': '2200K-6500K',\n  'LTF002': '2200K-6500K',\n  'LTC001': '2200K-6500K',\n  'LTC002': '2200K-6500K',\n  'LTC003': '2200K-6500K',\n  'LTC004': '2200K-6500K',\n  'LTC011': '2200K-6500K',\n  'LTC012': '2200K-6500K',\n  'LTD001': '2200K-6500K',\n  'LTD002': '2200K-6500K',\n  'LFF001': '2200K-6500K',\n  'LTT001': '2200K-6500K',\n  'LDT001': '2200K-6500K'\n};\nconst ATTRIBUTES = [new UInt8Type({\n  name: 'id'\n}), new StringType({\n  name: 'name',\n  minLength: 0,\n  maxLength: 32\n}), new StringType({\n  name: 'type'\n}), new StringType({\n  name: 'modelid'\n}), new StringType({\n  name: 'manufacturername'\n}), new StringType({\n  name: 'uniqueid'\n}), new StringType({\n  name: 'productname'\n}), new StringType({\n  name: 'productid'\n}), new ObjectType({\n  name: 'state'\n}), new ObjectType({\n  name: 'capabilities'\n}), new ObjectType({\n  name: 'config'\n}), new ObjectType({\n  name: 'swupdate',\n  types: [new StringType({\n    name: 'state'\n  }), new StringType({\n    name: 'lastinstall'\n  })]\n}), new StringType({\n  name: 'swversion'\n}), new StringType({\n  name: 'swconfigid'\n})]; //TODO add support for making it easier to set power failure modes config.startup.mode = 'powerfail'\n\nexport class Light extends BridgeObjectWithId {\n  constructor(id) {\n    super(ATTRIBUTES, id);\n    this.mappedColorGamut = null;\n  }\n\n  get name() {\n    return this.getAttributeValue('name');\n  }\n\n  set name(value) {\n    this.setAttributeValue('name', value);\n  }\n\n  get type() {\n    return this.getAttributeValue('type');\n  }\n\n  get modelid() {\n    return this.getAttributeValue('modelid');\n  }\n\n  get manufacturername() {\n    return this.getAttributeValue('manufacturername');\n  }\n\n  get uniqueid() {\n    return this.getAttributeValue('uniqueid');\n  }\n\n  get productid() {\n    return this.getAttributeValue('productid');\n  }\n\n  get productname() {\n    return this.getAttributeValue('productname');\n  }\n\n  get swversion() {\n    return this.getAttributeValue('swversion');\n  }\n\n  get swupdate() {\n    return this.getAttributeValue('swupdate');\n  }\n\n  get state() {\n    return this.getAttributeValue('state');\n  }\n\n  get capabilities() {\n    return this.getAttributeValue('capabilities');\n  }\n\n  get colorGamut() {\n    if (this.mappedColorGamut && this.mappedColorGamut !== '2200K-6500K') {\n      return getColorGamut(this.mappedColorGamut);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Gets the supported states that the light will accept.\n   */\n\n\n  getSupportedStates() {\n    const states = Object.keys(this.state); // transitiontime is no longer provided in the light state raw data values from the Hue API\n\n    states.push('transitiontime'); // If there is a corresponding settings, then include the xxx_inc variant\n\n    ['bri', 'sat', 'hue', 'ct', 'xy'].forEach(key => {\n      if (states.indexOf(key) > -1) {\n        states.push(`${key}_inc`);\n      }\n    });\n    return states;\n  }\n\n  _populate(data) {\n    if (data) {\n      this.mappedColorGamut = resolveColorGamutFromData(data);\n    } else {\n      this.mappedColorGamut = null;\n    }\n\n    return super._populate(data);\n  }\n\n}\n\nfunction getValueforKey(key, data) {\n  // Use dot notation to get nested values\n  const path = key.split('.');\n  let target = data,\n      value = null;\n  path.forEach(part => {\n    if (target != null) {\n      // @ts-ignore\n      value = target[part];\n      target = value;\n    } else {\n      target = null;\n    }\n  });\n  return `${value}`;\n}\n\nfunction resolveColorGamutFromData(data) {\n  // Newer Hue devices report their own color gamuts under 'capabilities.control.colorgamuttype'\n  let colorGamutType = getValueforKey('capabilities.control.colorgamuttype', data);\n\n  if (!colorGamutType) {\n    colorGamutType = MODEL_TO_COLOR_GAMUT[data.modelid];\n  }\n\n  return colorGamutType;\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/Light.js"],"names":["BridgeObjectWithId","getColorGamut","ObjectType","StringType","UInt8Type","MODEL_TO_COLOR_GAMUT","ATTRIBUTES","name","minLength","maxLength","types","Light","constructor","id","mappedColorGamut","getAttributeValue","value","setAttributeValue","type","modelid","manufacturername","uniqueid","productid","productname","swversion","swupdate","state","capabilities","colorGamut","getSupportedStates","states","Object","keys","push","forEach","key","indexOf","_populate","data","resolveColorGamutFromData","getValueforKey","path","split","target","part","colorGamutType"],"mappings":"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","sourcesContent":["import { BridgeObjectWithId } from './BridgeObjectWithId';\nimport { getColorGamut } from './ColorGamuts';\nimport { ObjectType, StringType, UInt8Type } from '../types';\nconst MODEL_TO_COLOR_GAMUT = {\n    'LCT001': 'B',\n    'LCT007': 'B',\n    'LCT010': 'C',\n    'LCT014': 'C',\n    'LCT015': 'C',\n    'LCT016': 'C',\n    'LCT002': 'B',\n    'LCT003': 'B',\n    'LCT011': 'C',\n    // 'LCT024': 'C', //TODO this can be read from capabilities.control.colorgamut and colorgamuttype now - REMOVE THIS\n    'LTW011': '2200K-6500K',\n    'LST001': 'A',\n    'LLC010': 'A',\n    'LLC011': 'A',\n    'LLC012': 'A',\n    'LLC006': 'A',\n    'LLC005': 'A',\n    'LLC007': 'A',\n    'LLC014': 'A',\n    'LLC013': 'A',\n    'LLM001': 'B',\n    'LLM010': '2200K-6500K',\n    'LLM011': '2200K-6500K',\n    'LTW001': '2200K-6500K',\n    'LTW004': '2200K-6500K',\n    'LTW010': '2200K-6500K',\n    'LTW015': '2200K-6500K',\n    'LTW013': '2200K-6500K',\n    'LTW014': '2200K-6500K',\n    'LLC020': 'C',\n    'LST002': 'C',\n    'LCT012': 'C',\n    'LTW012': '2200K-6500K',\n    // Lamps\n    'LTP001': '2200K-6500K',\n    'LTP002': '2200K-6500K',\n    'LTP003': '2200K-6500K',\n    'LTP004': '2200K-6500K',\n    'LTP005': '2200K-6500K',\n    'LTF001': '2200K-6500K',\n    'LTF002': '2200K-6500K',\n    'LTC001': '2200K-6500K',\n    'LTC002': '2200K-6500K',\n    'LTC003': '2200K-6500K',\n    'LTC004': '2200K-6500K',\n    'LTC011': '2200K-6500K',\n    'LTC012': '2200K-6500K',\n    'LTD001': '2200K-6500K',\n    'LTD002': '2200K-6500K',\n    'LFF001': '2200K-6500K',\n    'LTT001': '2200K-6500K',\n    'LDT001': '2200K-6500K',\n};\nconst ATTRIBUTES = [\n    new UInt8Type({ name: 'id' }),\n    new StringType({ name: 'name', minLength: 0, maxLength: 32 }),\n    new StringType({ name: 'type' }),\n    new StringType({ name: 'modelid' }),\n    new StringType({ name: 'manufacturername' }),\n    new StringType({ name: 'uniqueid' }),\n    new StringType({ name: 'productname' }),\n    new StringType({ name: 'productid' }),\n    new ObjectType({ name: 'state' }),\n    new ObjectType({ name: 'capabilities' }),\n    new ObjectType({ name: 'config' }),\n    new ObjectType({\n        name: 'swupdate',\n        types: [\n            new StringType({ name: 'state' }),\n            new StringType({ name: 'lastinstall' }),\n        ]\n    }),\n    new StringType({ name: 'swversion' }),\n    new StringType({ name: 'swconfigid' }),\n];\n//TODO add support for making it easier to set power failure modes config.startup.mode = 'powerfail'\nexport class Light extends BridgeObjectWithId {\n    constructor(id) {\n        super(ATTRIBUTES, id);\n        this.mappedColorGamut = null;\n    }\n    get name() {\n        return this.getAttributeValue('name');\n    }\n    set name(value) {\n        this.setAttributeValue('name', value);\n    }\n    get type() {\n        return this.getAttributeValue('type');\n    }\n    get modelid() {\n        return this.getAttributeValue('modelid');\n    }\n    get manufacturername() {\n        return this.getAttributeValue('manufacturername');\n    }\n    get uniqueid() {\n        return this.getAttributeValue('uniqueid');\n    }\n    get productid() {\n        return this.getAttributeValue('productid');\n    }\n    get productname() {\n        return this.getAttributeValue('productname');\n    }\n    get swversion() {\n        return this.getAttributeValue('swversion');\n    }\n    get swupdate() {\n        return this.getAttributeValue('swupdate');\n    }\n    get state() {\n        return this.getAttributeValue('state');\n    }\n    get capabilities() {\n        return this.getAttributeValue('capabilities');\n    }\n    get colorGamut() {\n        if (this.mappedColorGamut && this.mappedColorGamut !== '2200K-6500K') {\n            return getColorGamut(this.mappedColorGamut);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the supported states that the light will accept.\n     */\n    getSupportedStates() {\n        const states = Object.keys(this.state);\n        // transitiontime is no longer provided in the light state raw data values from the Hue API\n        states.push('transitiontime');\n        // If there is a corresponding settings, then include the xxx_inc variant\n        ['bri', 'sat', 'hue', 'ct', 'xy'].forEach(key => {\n            if (states.indexOf(key) > -1) {\n                states.push(`${key}_inc`);\n            }\n        });\n        return states;\n    }\n    _populate(data) {\n        if (data) {\n            this.mappedColorGamut = resolveColorGamutFromData(data);\n        }\n        else {\n            this.mappedColorGamut = null;\n        }\n        return super._populate(data);\n    }\n}\nfunction getValueforKey(key, data) {\n    // Use dot notation to get nested values\n    const path = key.split('.');\n    let target = data, value = null;\n    path.forEach(part => {\n        if (target != null) {\n            // @ts-ignore\n            value = target[part];\n            target = value;\n        }\n        else {\n            target = null;\n        }\n    });\n    return `${value}`;\n}\nfunction resolveColorGamutFromData(data) {\n    // Newer Hue devices report their own color gamuts under 'capabilities.control.colorgamuttype'\n    let colorGamutType = getValueforKey('capabilities.control.colorgamuttype', data);\n    if (!colorGamutType) {\n        colorGamutType = MODEL_TO_COLOR_GAMUT[data.modelid];\n    }\n    return colorGamutType;\n}\n"]},"metadata":{},"sourceType":"module"}