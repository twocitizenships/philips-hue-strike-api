{"ast":null,"code":"import { getDatePattern } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { AttributeObject } from '../AttributeObject';\nimport { UInt8Type } from '../types/UInt8Type';\nimport { ChoiceType } from '../types/ChoiceType';\nconst DATE_STRING_REGEX = new RegExp(`^${getDatePattern()}`);\nconst MONTHS = ['January', 'Feburary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst ATTRIBUTES = [new UInt8Type({\n  name: 'year',\n  min: 1900,\n  max: 3000\n}), new ChoiceType({\n  name: 'month',\n  validValues: MONTHS\n}), new UInt8Type({\n  name: 'day',\n  min: 0,\n  max: 31\n})];\nexport class HueDate extends AttributeObject {\n  constructor(value) {\n    super(ATTRIBUTES);\n\n    if (value instanceof Date) {\n      this.fromDate(value);\n    } else {\n      this.fromString(value);\n    }\n  }\n\n  get year() {\n    return this.getAttributeValue('year');\n  }\n\n  get yearString() {\n    return `${this.year}`;\n  }\n\n  set year(value) {\n    this.setAttributeValue('year', value);\n  }\n\n  get month() {\n    const idx = MONTHS.indexOf(this.getAttributeValue('month')); //TODO make mandatory then will not need this?\n\n    if (idx === -1) {\n      throw new HueBridgeModelError(`Month value has not been set`);\n    }\n\n    return idx + 1;\n  }\n\n  get monthString() {\n    const month = this.month;\n    return `${month}`.padStart(2, '0');\n  }\n  /**\n   * Sets the Month for the Date.\n   * @param value {number | string} If a number, it is a 1 based index on the month number (1 === Jan), otherwise as a String the name of the month.\n   * @returns {BridgeObject}\n   */\n\n\n  set month(value) {\n    const monthNumber = parseInt(`${value}`);\n\n    if (Number.isNaN(monthNumber)) {\n      this.setAttributeValue('month', value);\n    } else {\n      const monthName = MONTHS[monthNumber - 1];\n      this.setAttributeValue('month', monthName);\n    }\n  }\n\n  get day() {\n    return this.getAttributeValue('day');\n  }\n\n  get dayString() {\n    return `${this.day}`.padStart(2, '0');\n  }\n\n  set day(value) {\n    this.setAttributeValue('day', value);\n  }\n\n  toString() {\n    return `${this.yearString}-${this.monthString}-${this.dayString}`;\n  }\n\n  fromString(value) {\n    if (!value) {\n      return this.fromDate(new Date());\n    } else {\n      const parsed = DATE_STRING_REGEX.exec(value);\n\n      if (parsed) {\n        // @ts-ignore\n        this.year = parsed.groups.year; // @ts-ignore\n\n        this.month = parsed.groups.month; // @ts-ignore\n\n        this.day = parsed.groups.day;\n        return this;\n      }\n\n      return this.fromDate(new Date());\n    }\n  }\n\n  fromDate(value) {\n    this.year = value.getUTCFullYear();\n    this.month = value.getUTCMonth() + 1;\n    this.day = value.getUTCDate();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/HueDate.js"],"names":["getDatePattern","HueBridgeModelError","AttributeObject","UInt8Type","ChoiceType","DATE_STRING_REGEX","RegExp","MONTHS","ATTRIBUTES","name","min","max","validValues","HueDate","constructor","value","Date","fromDate","fromString","year","getAttributeValue","yearString","setAttributeValue","month","idx","indexOf","monthString","padStart","monthNumber","parseInt","Number","isNaN","monthName","day","dayString","toString","parsed","exec","groups","getUTCFullYear","getUTCMonth","getUTCDate"],"mappings":"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","sourcesContent":["import { getDatePattern } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { AttributeObject } from '../AttributeObject';\nimport { UInt8Type } from '../types/UInt8Type';\nimport { ChoiceType } from '../types/ChoiceType';\nconst DATE_STRING_REGEX = new RegExp(`^${getDatePattern()}`);\nconst MONTHS = [\n    'January',\n    'Feburary',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\nconst ATTRIBUTES = [\n    new UInt8Type({ name: 'year', min: 1900, max: 3000 }),\n    new ChoiceType({ name: 'month', validValues: MONTHS }),\n    new UInt8Type({ name: 'day', min: 0, max: 31 }),\n];\nexport class HueDate extends AttributeObject {\n    constructor(value) {\n        super(ATTRIBUTES);\n        if (value instanceof Date) {\n            this.fromDate(value);\n        }\n        else {\n            this.fromString(value);\n        }\n    }\n    get year() {\n        return this.getAttributeValue('year');\n    }\n    get yearString() {\n        return `${this.year}`;\n    }\n    set year(value) {\n        this.setAttributeValue('year', value);\n    }\n    get month() {\n        const idx = MONTHS.indexOf(this.getAttributeValue('month'));\n        //TODO make mandatory then will not need this?\n        if (idx === -1) {\n            throw new HueBridgeModelError(`Month value has not been set`);\n        }\n        return idx + 1;\n    }\n    get monthString() {\n        const month = this.month;\n        return `${month}`.padStart(2, '0');\n    }\n    /**\n     * Sets the Month for the Date.\n     * @param value {number | string} If a number, it is a 1 based index on the month number (1 === Jan), otherwise as a String the name of the month.\n     * @returns {BridgeObject}\n     */\n    set month(value) {\n        const monthNumber = parseInt(`${value}`);\n        if (Number.isNaN(monthNumber)) {\n            this.setAttributeValue('month', value);\n        }\n        else {\n            const monthName = MONTHS[monthNumber - 1];\n            this.setAttributeValue('month', monthName);\n        }\n    }\n    get day() {\n        return this.getAttributeValue('day');\n    }\n    get dayString() {\n        return `${this.day}`.padStart(2, '0');\n    }\n    set day(value) {\n        this.setAttributeValue('day', value);\n    }\n    toString() {\n        return `${this.yearString}-${this.monthString}-${this.dayString}`;\n    }\n    fromString(value) {\n        if (!value) {\n            return this.fromDate(new Date());\n        }\n        else {\n            const parsed = DATE_STRING_REGEX.exec(value);\n            if (parsed) {\n                // @ts-ignore\n                this.year = parsed.groups.year;\n                // @ts-ignore\n                this.month = parsed.groups.month;\n                // @ts-ignore\n                this.day = parsed.groups.day;\n                return this;\n            }\n            return this.fromDate(new Date());\n        }\n    }\n    fromDate(value) {\n        this.year = value.getUTCFullYear();\n        this.month = value.getUTCMonth() + 1;\n        this.day = value.getUTCDate();\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}