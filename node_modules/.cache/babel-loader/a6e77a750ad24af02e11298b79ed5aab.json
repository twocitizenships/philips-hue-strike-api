{"ast":null,"code":"import { BaseType } from './BaseType';\nexport class ChoiceType extends BaseType {\n  constructor(config) {\n    super({ ...{\n        type: 'choice'\n      },\n      ...config\n    }); //TODO this may not be necessary with TypeScript\n    // const validValues = config.validValues;\n    // if (!isValueDefined(validValues)) {\n    //   throw new TypeError('validValues config property is required for choice type');\n    // }\n\n    this.validValues = config.validValues;\n  }\n\n  _convertToType(val) {\n    if (this.validValues.indexOf(val) > -1) {\n      return val;\n    } else {\n      throw new TypeError(`Value '${val}' is not one of the allowed values [${this.validValues}]`);\n    }\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/types/ChoiceType.js"],"names":["BaseType","ChoiceType","constructor","config","type","validValues","_convertToType","val","indexOf","TypeError"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,OAAO,MAAMC,UAAN,SAAyBD,QAAzB,CAAkC;AACrCE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAM,EAAE,GAAG;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAL;AAAyB,SAAGD;AAA5B,KAAN,EADgB,CAEhB;AACA;AACA;AACA;AACA;;AACA,SAAKE,WAAL,GAAmBF,MAAM,CAACE,WAA1B;AACH;;AACDC,EAAAA,cAAc,CAACC,GAAD,EAAM;AAChB,QAAI,KAAKF,WAAL,CAAiBG,OAAjB,CAAyBD,GAAzB,IAAgC,CAAC,CAArC,EAAwC;AACpC,aAAOA,GAAP;AACH,KAFD,MAGK;AACD,YAAM,IAAIE,SAAJ,CAAe,UAASF,GAAI,uCAAsC,KAAKF,WAAY,GAAnF,CAAN;AACH;AACJ;;AAjBoC;AAmBzC","sourcesContent":["import { BaseType } from './BaseType';\nexport class ChoiceType extends BaseType {\n    constructor(config) {\n        super({ ...{ type: 'choice' }, ...config });\n        //TODO this may not be necessary with TypeScript\n        // const validValues = config.validValues;\n        // if (!isValueDefined(validValues)) {\n        //   throw new TypeError('validValues config property is required for choice type');\n        // }\n        this.validValues = config.validValues;\n    }\n    _convertToType(val) {\n        if (this.validValues.indexOf(val) > -1) {\n            return val;\n        }\n        else {\n            throw new TypeError(`Value '${val}' is not one of the allowed values [${this.validValues}]`);\n        }\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}