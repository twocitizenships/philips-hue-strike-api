{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deprecatedFunction = exports.extractUpdatedAttributes = exports.wasSuccessful = exports.parseErrors = void 0;\n\nconst HueError_1 = require(\"./HueError\");\n\nconst ApiError_1 = require(\"./ApiError\");\n\nconst suppressDeprecationWarnings = process.env.NODE_HUE_API_SUPPRESS_DEPRICATION_WARNINGS || false;\n/**\n * Parses a JSON response looking for the errors in the result(s) returned.\n * @param results The results to look for errors in.\n * @returns {Array} Of errors found.\n */\n\nfunction parseErrors(results) {\n  let errors = [];\n\n  if (Array.isArray(results)) {\n    results.forEach(result => {\n      if (!result.success) {\n        const error = parseErrors(result);\n\n        if (error) {\n          errors = errors.concat(error);\n        }\n      }\n    });\n  } else {\n    if (results.error) {\n      // Due to the handling of remote and local errors, we need to differentiate description and message in the errors,\n      // as the remote API uses both, whilst local uses only description. -- TODO need to review this\n      if (results.error.description && !results.error.message) {\n        const payload = Object.assign({\n          message: results.error.description\n        }, results.error);\n        errors.push(new HueError_1.HueError(payload));\n      } else {\n        errors.push(new HueError_1.HueError(results.error));\n      }\n    }\n  }\n\n  return errors.length > 0 ? errors : undefined;\n}\n\nexports.parseErrors = parseErrors;\n/**\n * Parses a JSON response checking for success on all changes.\n * @param result The JSON object to parse for success messages.\n * @returns true if all changes were successful.\n */\n\nfunction wasSuccessful(result) {\n  let success = true,\n      idx,\n      len;\n\n  if (Array.isArray(result)) {\n    for (idx = 0, len = result.length; idx < len; idx++) {\n      success = success && wasSuccessful(result[idx]);\n    }\n  } else {\n    success = result.success !== undefined;\n  }\n\n  return success;\n}\n\nexports.wasSuccessful = wasSuccessful;\n\nfunction extractUpdatedAttributes(result) {\n  if (wasSuccessful(result)) {\n    const values = {};\n\n    const updatedAttribute = function (update) {\n      const success = update.success;\n      Object.keys(success).forEach(key => {\n        const matched = /.*\\/(.*)$/.exec(key);\n\n        if (matched) {\n          const attribute = matched[1];\n          values[attribute] = true; //success[key];\n        }\n      });\n    };\n\n    if (result instanceof Array) {\n      result.forEach(update => {\n        updatedAttribute(update);\n      });\n    } else {\n      updatedAttribute(result);\n    }\n\n    return values;\n  } else {\n    throw new ApiError_1.ApiError('Error in response'); //TODO extract the error\n  }\n}\n\nexports.extractUpdatedAttributes = extractUpdatedAttributes; // //TODO the type system could replace this function now\n// function asStringArray(value) {\n//   if (!value) {\n//     return null;\n//   }\n//\n//   if (Array.isArray(value)) {\n//     const result = [];\n//\n//     value.forEach(val => {\n//       result.push(`${val}`);\n//     });\n//\n//     return result;\n//   } else {\n//     return [`${value}`];\n//   }\n// }\n// function getValueforKey(key, data) {\n//   //Use dot notation to get nested values\n//   const path = key.split('.');\n//\n//   let target = data\n//     , value = null\n//   ;\n//\n//   path.forEach(part => {\n//     if (target != null) {\n//       value = target[part];\n//       target = value;\n//     } else {\n//       target = null;\n//     }\n//   });\n//\n//   return value;\n// }\n// function mergeArrays() {\n//   // TODO this can be replaced with [[], [], ...].flat under Node.js 12+\n//   let result = [];\n//\n//   Array.from(arguments).forEach(arg => {\n//     if (arg) {\n//       result = result.concat(arg);\n//     }\n//   });\n//\n//   return result;\n// }\n\nfunction deprecatedFunction(version, func, message) {\n  if (suppressDeprecationWarnings) {\n    return;\n  }\n\n  console.log(`**************************************************************************************************`);\n  console.log(`Deprecated Function Usage: ${func}\\n`);\n  console.log(`  ${message}\\n`);\n  console.log(`  Function will be removed from node-hue-api in version ${version}`);\n  console.log(`**************************************************************************************************`);\n}\n\nexports.deprecatedFunction = deprecatedFunction;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/util.js"],"names":["Object","defineProperty","exports","value","deprecatedFunction","extractUpdatedAttributes","wasSuccessful","parseErrors","HueError_1","require","ApiError_1","suppressDeprecationWarnings","process","env","NODE_HUE_API_SUPPRESS_DEPRICATION_WARNINGS","results","errors","Array","isArray","forEach","result","success","error","concat","description","message","payload","assign","push","HueError","length","undefined","idx","len","values","updatedAttribute","update","keys","key","matched","exec","attribute","ApiError","version","func","console","log"],"mappings":"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gBAAgB,CAACf,MAAD,CAAhB;AACH;;AACD,WAAOc,MAAP;AACH,GArBD,MAsBK;AACD,UAAM,IAAIxB,UAAU,CAACgC,QAAf,CAAwB,mBAAxB,CAAN,CADC,CACmD;AACvD;AACJ;;AACDxC,OAAO,CAACG,wBAAR,GAAmCA,wBAAnC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,kBAAT,CAA4BuC,OAA5B,EAAqCC,IAArC,EAA2CnB,OAA3C,EAAoD;AAChD,MAAId,2BAAJ,EAAiC;AAC7B;AACH;;AACDkC,EAAAA,OAAO,CAACC,GAAR,CAAa,oGAAb;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BF,IAAK,IAA/C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,KAAIrB,OAAQ,IAAzB;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAa,2DAA0DH,OAAQ,EAA/E;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAa,oGAAb;AACH;;AACD5C,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deprecatedFunction = exports.extractUpdatedAttributes = exports.wasSuccessful = exports.parseErrors = void 0;\nconst HueError_1 = require(\"./HueError\");\nconst ApiError_1 = require(\"./ApiError\");\nconst suppressDeprecationWarnings = process.env.NODE_HUE_API_SUPPRESS_DEPRICATION_WARNINGS || false;\n/**\n * Parses a JSON response looking for the errors in the result(s) returned.\n * @param results The results to look for errors in.\n * @returns {Array} Of errors found.\n */\nfunction parseErrors(results) {\n    let errors = [];\n    if (Array.isArray(results)) {\n        results.forEach(result => {\n            if (!result.success) {\n                const error = parseErrors(result);\n                if (error) {\n                    errors = errors.concat(error);\n                }\n            }\n        });\n    }\n    else {\n        if (results.error) {\n            // Due to the handling of remote and local errors, we need to differentiate description and message in the errors,\n            // as the remote API uses both, whilst local uses only description. -- TODO need to review this\n            if (results.error.description && !results.error.message) {\n                const payload = Object.assign({ message: results.error.description }, results.error);\n                errors.push(new HueError_1.HueError(payload));\n            }\n            else {\n                errors.push(new HueError_1.HueError(results.error));\n            }\n        }\n    }\n    return errors.length > 0 ? errors : undefined;\n}\nexports.parseErrors = parseErrors;\n/**\n * Parses a JSON response checking for success on all changes.\n * @param result The JSON object to parse for success messages.\n * @returns true if all changes were successful.\n */\nfunction wasSuccessful(result) {\n    let success = true, idx, len;\n    if (Array.isArray(result)) {\n        for (idx = 0, len = result.length; idx < len; idx++) {\n            success = success && wasSuccessful(result[idx]);\n        }\n    }\n    else {\n        success = result.success !== undefined;\n    }\n    return success;\n}\nexports.wasSuccessful = wasSuccessful;\nfunction extractUpdatedAttributes(result) {\n    if (wasSuccessful(result)) {\n        const values = {};\n        const updatedAttribute = function (update) {\n            const success = update.success;\n            Object.keys(success).forEach(key => {\n                const matched = /.*\\/(.*)$/.exec(key);\n                if (matched) {\n                    const attribute = matched[1];\n                    values[attribute] = true; //success[key];\n                }\n            });\n        };\n        if (result instanceof Array) {\n            result.forEach(update => {\n                updatedAttribute(update);\n            });\n        }\n        else {\n            updatedAttribute(result);\n        }\n        return values;\n    }\n    else {\n        throw new ApiError_1.ApiError('Error in response'); //TODO extract the error\n    }\n}\nexports.extractUpdatedAttributes = extractUpdatedAttributes;\n// //TODO the type system could replace this function now\n// function asStringArray(value) {\n//   if (!value) {\n//     return null;\n//   }\n//\n//   if (Array.isArray(value)) {\n//     const result = [];\n//\n//     value.forEach(val => {\n//       result.push(`${val}`);\n//     });\n//\n//     return result;\n//   } else {\n//     return [`${value}`];\n//   }\n// }\n// function getValueforKey(key, data) {\n//   //Use dot notation to get nested values\n//   const path = key.split('.');\n//\n//   let target = data\n//     , value = null\n//   ;\n//\n//   path.forEach(part => {\n//     if (target != null) {\n//       value = target[part];\n//       target = value;\n//     } else {\n//       target = null;\n//     }\n//   });\n//\n//   return value;\n// }\n// function mergeArrays() {\n//   // TODO this can be replaced with [[], [], ...].flat under Node.js 12+\n//   let result = [];\n//\n//   Array.from(arguments).forEach(arg => {\n//     if (arg) {\n//       result = result.concat(arg);\n//     }\n//   });\n//\n//   return result;\n// }\nfunction deprecatedFunction(version, func, message) {\n    if (suppressDeprecationWarnings) {\n        return;\n    }\n    console.log(`**************************************************************************************************`);\n    console.log(`Deprecated Function Usage: ${func}\\n`);\n    console.log(`  ${message}\\n`);\n    console.log(`  Function will be removed from node-hue-api in version ${version}`);\n    console.log(`**************************************************************************************************`);\n}\nexports.deprecatedFunction = deprecatedFunction;\n"]},"metadata":{},"sourceType":"script"}