{"ast":null,"code":"import { BooleanType, ObjectType, StringType, UInt8Type } from '../../types';\nimport { BridgeObjectWithId } from '../BridgeObjectWithId';\nconst COMMON_ATTRIBUTES = [new UInt8Type({\n  name: 'id'\n}), new StringType({\n  name: 'name'\n}), new StringType({\n  name: 'type'\n}), new StringType({\n  name: 'modelid'\n}), new StringType({\n  name: 'manufacturername'\n}), new StringType({\n  name: 'uniqueid'\n}), new StringType({\n  name: 'swversion'\n}), new StringType({\n  name: 'swconfigid'\n}), new ObjectType({\n  name: 'capabilities'\n}), // TODO this is for zllswitch, need to check other z** sensors and refactor accordingly\nnew StringType({\n  name: 'productname'\n}), new ObjectType({\n  name: 'swupdate'\n}), new StringType({\n  name: 'diversityid'\n}), //TODO this is for CLIP, need to inject this in the constructor\nnew BooleanType({\n  name: 'recycle'\n})];\nconst COMMON_STATE_ATTRIBUTES = [new StringType({\n  name: 'lastupdated',\n  defaultValue: 'none'\n})];\nconst COMMON_CONFIG_ATTRIBUTES = [new BooleanType({\n  name: 'on',\n  defaultValue: true\n})];\nexport class Sensor extends BridgeObjectWithId {\n  //TODO consider removing data from here as we have _populate to do this\n  constructor(configAttributes, stateAttributes, id, data) {\n    const stateAttribute = new ObjectType({\n      name: 'state',\n      types: [...COMMON_STATE_ATTRIBUTES, ...stateAttributes]\n    }),\n          configAttribute = new ObjectType({\n      name: 'config',\n      types: [...COMMON_CONFIG_ATTRIBUTES, ...configAttributes]\n    }),\n          allAttributes = [...COMMON_ATTRIBUTES, stateAttribute, configAttribute];\n    super(allAttributes, id);\n\n    if (data) {\n      this._populate(data);\n    } // inject the name of the class as the type for the sensor\n\n\n    this.setAttributeValue('type', this.constructor.name);\n    this._configAttributes = {}; // @ts-ignore\n\n    configAttribute.types.forEach(attr => {\n      this._configAttributes[attr.name] = attr;\n    });\n    this._stateAttributes = {}; // @ts-ignore\n\n    stateAttribute.types.forEach(attr => {\n      this._stateAttributes[attr.name] = attr;\n    });\n  }\n\n  set name(value) {\n    this.setAttributeValue('name', value);\n  }\n\n  get name() {\n    return this.getAttributeValue('name');\n  }\n\n  get modelid() {\n    return this.getAttributeValue('modelid');\n  }\n\n  get manufacturername() {\n    return this.getAttributeValue('manufacturername');\n  }\n\n  get swversion() {\n    return this.getAttributeValue('swversion');\n  }\n\n  get swconfigid() {\n    return this.getAttributeValue('swconfigid');\n  }\n\n  get type() {\n    return this.getAttributeValue('type');\n  }\n\n  get uniqueid() {\n    return this.getAttributeValue('uniqueid');\n  }\n\n  get capabilities() {\n    return this.getAttributeValue('capabilities');\n  }\n\n  get lastupdated() {\n    return this.getStateAttributeValue('lastupdated');\n  }\n\n  get on() {\n    return this.getConfigAttributeValue('on');\n  }\n\n  set on(value) {\n    this._updateConfigAttributeValue('on', value);\n  }\n\n  getConfig() {\n    return this.getAttributeValue('config');\n  }\n\n  getConfigAttribute(name) {\n    return this._configAttributes[name];\n  }\n\n  getStateAttribute(name) {\n    return this._stateAttributes[name];\n  }\n\n  getStateAttributeNames() {\n    return Object.keys(this._stateAttributes);\n  }\n\n  getConfigAttributeValue(name) {\n    const config = this.getAttributeValue('config'),\n          definition = this.getConfigAttribute(name);\n\n    if (definition) {\n      return definition.getValue(config[name]);\n    } else {\n      const value = config[name];\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    return null;\n  }\n\n  getStateAttributeValue(name) {\n    const state = this.getAttributeValue('state'),\n          definition = this.getStateAttribute(name);\n\n    if (definition) {\n      return definition.getValue(state[name]);\n    } else {\n      const value = state[name];\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    return null;\n  }\n\n  _updateStateAttributeValue(name, value) {\n    let state = this.getAttributeValue('state') || {};\n    state[name] = value; // The object we are working on is a copy, so we need to set it back on the sensor, which will use the types to validate\n\n    return this.setAttributeValue('state', state);\n  }\n\n  _updateConfigAttributeValue(name, value) {\n    const config = this.getAttributeValue('config') || {};\n    config[name] = value; // The object we are working on is a copy, so we need to set it back on the sensor, which will use the types to validate\n\n    return this.setAttributeValue('config', config);\n  }\n\n  getHuePayload() {\n    const data = super.getHuePayload();\n    Sensor.removeNullValues(data.config);\n    Sensor.removeNullValues(data.state);\n    return data;\n  } //TODO util function\n\n\n  static removeNullValues(data) {\n    if (data) {\n      Object.keys(data).forEach(key => {\n        // @ts-ignore\n        const value = data[key];\n\n        if (value === null) {\n          // @ts-ignore\n          delete data[key];\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/sensors/Sensor.js"],"names":["BooleanType","ObjectType","StringType","UInt8Type","BridgeObjectWithId","COMMON_ATTRIBUTES","name","COMMON_STATE_ATTRIBUTES","defaultValue","COMMON_CONFIG_ATTRIBUTES","Sensor","constructor","configAttributes","stateAttributes","id","data","stateAttribute","types","configAttribute","allAttributes","_populate","setAttributeValue","_configAttributes","forEach","attr","_stateAttributes","value","getAttributeValue","modelid","manufacturername","swversion","swconfigid","type","uniqueid","capabilities","lastupdated","getStateAttributeValue","on","getConfigAttributeValue","_updateConfigAttributeValue","getConfig","getConfigAttribute","getStateAttribute","getStateAttributeNames","Object","keys","config","definition","getValue","undefined","state","_updateStateAttributeValue","getHuePayload","removeNullValues","key"],"mappings":"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","sourcesContent":["import { BooleanType, ObjectType, StringType, UInt8Type } from '../../types';\nimport { BridgeObjectWithId } from '../BridgeObjectWithId';\nconst COMMON_ATTRIBUTES = [\n    new UInt8Type({ name: 'id' }),\n    new StringType({ name: 'name' }),\n    new StringType({ name: 'type' }),\n    new StringType({ name: 'modelid' }),\n    new StringType({ name: 'manufacturername' }),\n    new StringType({ name: 'uniqueid' }),\n    new StringType({ name: 'swversion' }),\n    new StringType({ name: 'swconfigid' }),\n    new ObjectType({ name: 'capabilities' }),\n    // TODO this is for zllswitch, need to check other z** sensors and refactor accordingly\n    new StringType({ name: 'productname' }),\n    new ObjectType({ name: 'swupdate' }),\n    new StringType({ name: 'diversityid' }),\n    //TODO this is for CLIP, need to inject this in the constructor\n    new BooleanType({ name: 'recycle' }),\n];\nconst COMMON_STATE_ATTRIBUTES = [\n    new StringType({ name: 'lastupdated', defaultValue: 'none' }),\n];\nconst COMMON_CONFIG_ATTRIBUTES = [\n    new BooleanType({ name: 'on', defaultValue: true }),\n];\nexport class Sensor extends BridgeObjectWithId {\n    //TODO consider removing data from here as we have _populate to do this\n    constructor(configAttributes, stateAttributes, id, data) {\n        const stateAttribute = new ObjectType({\n            name: 'state',\n            types: [...COMMON_STATE_ATTRIBUTES, ...stateAttributes]\n        }), configAttribute = new ObjectType({\n            name: 'config',\n            types: [...COMMON_CONFIG_ATTRIBUTES, ...configAttributes]\n        }), allAttributes = [...COMMON_ATTRIBUTES, stateAttribute, configAttribute];\n        super(allAttributes, id);\n        if (data) {\n            this._populate(data);\n        }\n        // inject the name of the class as the type for the sensor\n        this.setAttributeValue('type', this.constructor.name);\n        this._configAttributes = {};\n        // @ts-ignore\n        configAttribute.types.forEach(attr => {\n            this._configAttributes[attr.name] = attr;\n        });\n        this._stateAttributes = {};\n        // @ts-ignore\n        stateAttribute.types.forEach(attr => {\n            this._stateAttributes[attr.name] = attr;\n        });\n    }\n    set name(value) {\n        this.setAttributeValue('name', value);\n    }\n    get name() {\n        return this.getAttributeValue('name');\n    }\n    get modelid() {\n        return this.getAttributeValue('modelid');\n    }\n    get manufacturername() {\n        return this.getAttributeValue('manufacturername');\n    }\n    get swversion() {\n        return this.getAttributeValue('swversion');\n    }\n    get swconfigid() {\n        return this.getAttributeValue('swconfigid');\n    }\n    get type() {\n        return this.getAttributeValue('type');\n    }\n    get uniqueid() {\n        return this.getAttributeValue('uniqueid');\n    }\n    get capabilities() {\n        return this.getAttributeValue('capabilities');\n    }\n    get lastupdated() {\n        return this.getStateAttributeValue('lastupdated');\n    }\n    get on() {\n        return this.getConfigAttributeValue('on');\n    }\n    set on(value) {\n        this._updateConfigAttributeValue('on', value);\n    }\n    getConfig() {\n        return this.getAttributeValue('config');\n    }\n    getConfigAttribute(name) {\n        return this._configAttributes[name];\n    }\n    getStateAttribute(name) {\n        return this._stateAttributes[name];\n    }\n    getStateAttributeNames() {\n        return Object.keys(this._stateAttributes);\n    }\n    getConfigAttributeValue(name) {\n        const config = this.getAttributeValue('config'), definition = this.getConfigAttribute(name);\n        if (definition) {\n            return definition.getValue(config[name]);\n        }\n        else {\n            const value = config[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return null;\n    }\n    getStateAttributeValue(name) {\n        const state = this.getAttributeValue('state'), definition = this.getStateAttribute(name);\n        if (definition) {\n            return definition.getValue(state[name]);\n        }\n        else {\n            const value = state[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return null;\n    }\n    _updateStateAttributeValue(name, value) {\n        let state = this.getAttributeValue('state') || {};\n        state[name] = value;\n        // The object we are working on is a copy, so we need to set it back on the sensor, which will use the types to validate\n        return this.setAttributeValue('state', state);\n    }\n    _updateConfigAttributeValue(name, value) {\n        const config = this.getAttributeValue('config') || {};\n        config[name] = value;\n        // The object we are working on is a copy, so we need to set it back on the sensor, which will use the types to validate\n        return this.setAttributeValue('config', config);\n    }\n    getHuePayload() {\n        const data = super.getHuePayload();\n        Sensor.removeNullValues(data.config);\n        Sensor.removeNullValues(data.state);\n        return data;\n    }\n    //TODO util function\n    static removeNullValues(data) {\n        if (data) {\n            Object.keys(data).forEach(key => {\n                // @ts-ignore\n                const value = data[key];\n                if (value === null) {\n                    // @ts-ignore\n                    delete data[key];\n                }\n            });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}