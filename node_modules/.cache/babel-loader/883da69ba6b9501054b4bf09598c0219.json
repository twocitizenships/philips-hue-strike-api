{"ast":null,"code":"import { States } from './States';\nexport class BaseStates extends States {\n  constructor(attributes) {\n    super([...['on', 'bri', 'hue', 'sat', 'xy', 'ct', 'effect', 'transitiontime'], ...(attributes ? attributes : [])]);\n  }\n\n  on(on) {\n    if (on !== undefined) {\n      return this._setStateValue('on', on);\n    } else {\n      return this._setStateValue('on', true);\n    }\n  }\n\n  off(off) {\n    if (off !== undefined) {\n      return this._setStateValue('on', !off);\n    } else {\n      return this._setStateValue('on', false);\n    }\n  }\n\n  bri(value) {\n    return this._setStateValue('bri', value);\n  }\n\n  hue(value) {\n    return this._setStateValue('hue', value);\n  }\n\n  sat(value) {\n    return this._setStateValue('sat', value);\n  }\n\n  xy(x, y) {\n    if (Array.isArray(x)) {\n      return this._setStateValue('xy', x);\n    } else {\n      return this._setStateValue('xy', [x, y]);\n    }\n  }\n\n  ct(value) {\n    return this._setStateValue('ct', value);\n  }\n\n  effect(value) {\n    return this._setStateValue('effect', value);\n  }\n\n  transitiontime(value) {\n    return this._setStateValue('transitiontime', value);\n  }\n  /**\n   * Sets a percentage brightness value\n   * @param value\n   */\n\n\n  brightness(value) {\n    const bri = this._convertPercentageToStateValue(value, 'bri');\n\n    return this.bri(bri);\n  }\n  /**\n   * Sets a percentage saturation value\n   * @param value\n   */\n\n\n  saturation(value) {\n    const sat = this._convertPercentageToStateValue(value, 'sat');\n\n    return this.sat(sat);\n  }\n\n  effectColorLoop() {\n    return this.effect('colorloop');\n  }\n\n  effectNone() {\n    return this.effect('none');\n  }\n\n  transition(value) {\n    return this.transitionInMillis(value);\n  }\n\n  transitionSlow() {\n    return this.transitiontime(8);\n  }\n\n  transitionFast() {\n    return this.transitiontime(2);\n  }\n\n  transitionInstant() {\n    return this.transitiontime(0);\n  }\n\n  transitionInMillis(value) {\n    return this.transitiontime(value / 100);\n  }\n\n  transitionDefault() {\n    return this.transitiontime(4);\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/lightstate/BaseStates.js"],"names":["States","BaseStates","constructor","attributes","on","undefined","_setStateValue","off","bri","value","hue","sat","xy","x","y","Array","isArray","ct","effect","transitiontime","brightness","_convertPercentageToStateValue","saturation","effectColorLoop","effectNone","transition","transitionInMillis","transitionSlow","transitionFast","transitionInstant","transitionDefault"],"mappings":"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","sourcesContent":["import { States } from './States';\nexport class BaseStates extends States {\n    constructor(attributes) {\n        super([\n            ...[\n                'on',\n                'bri',\n                'hue',\n                'sat',\n                'xy',\n                'ct',\n                'effect',\n                'transitiontime'\n            ],\n            ...(attributes ? attributes : [])\n        ]);\n    }\n    on(on) {\n        if (on !== undefined) {\n            return this._setStateValue('on', on);\n        }\n        else {\n            return this._setStateValue('on', true);\n        }\n    }\n    off(off) {\n        if (off !== undefined) {\n            return this._setStateValue('on', !off);\n        }\n        else {\n            return this._setStateValue('on', false);\n        }\n    }\n    bri(value) {\n        return this._setStateValue('bri', value);\n    }\n    hue(value) {\n        return this._setStateValue('hue', value);\n    }\n    sat(value) {\n        return this._setStateValue('sat', value);\n    }\n    xy(x, y) {\n        if (Array.isArray(x)) {\n            return this._setStateValue('xy', x);\n        }\n        else {\n            return this._setStateValue('xy', [x, y]);\n        }\n    }\n    ct(value) {\n        return this._setStateValue('ct', value);\n    }\n    effect(value) {\n        return this._setStateValue('effect', value);\n    }\n    transitiontime(value) {\n        return this._setStateValue('transitiontime', value);\n    }\n    /**\n     * Sets a percentage brightness value\n     * @param value\n     */\n    brightness(value) {\n        const bri = this._convertPercentageToStateValue(value, 'bri');\n        return this.bri(bri);\n    }\n    /**\n     * Sets a percentage saturation value\n     * @param value\n     */\n    saturation(value) {\n        const sat = this._convertPercentageToStateValue(value, 'sat');\n        return this.sat(sat);\n    }\n    effectColorLoop() {\n        return this.effect('colorloop');\n    }\n    effectNone() {\n        return this.effect('none');\n    }\n    transition(value) {\n        return this.transitionInMillis(value);\n    }\n    transitionSlow() {\n        return this.transitiontime(8);\n    }\n    transitionFast() {\n        return this.transitiontime(2);\n    }\n    transitionInstant() {\n        return this.transitiontime(0);\n    }\n    transitionInMillis(value) {\n        return this.transitiontime(value / 100);\n    }\n    transitionDefault() {\n        return this.transitiontime(4);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}