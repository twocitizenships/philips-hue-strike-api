{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Api = void 0;\n\nconst Remote_1 = require(\"./Remote\");\n\nconst Cache_1 = require(\"./Cache\");\n\nconst HueApiConfig_1 = require(\"./HueApiConfig\");\n\nconst Capabilities_1 = require(\"./Capabilities\");\n\nconst Configuration_1 = require(\"./Configuration\");\n\nconst Groups_1 = require(\"./Groups\");\n\nconst Lights_1 = require(\"./Lights\");\n\nconst ResourceLinks_1 = require(\"./ResourceLinks\");\n\nconst Rules_1 = require(\"./Rules\");\n\nconst Scenes_1 = require(\"./Scenes\");\n\nconst Schedules_1 = require(\"./Schedules\");\n\nconst Sensors_1 = require(\"./Sensors\");\n\nconst Users_1 = require(\"./Users\");\n\nclass Api {\n  constructor(config, transport, rateLimits, remote) {\n    this._lastSyncTime = -1;\n    this._state = undefined;\n    this._config = new HueApiConfig_1.HueApiConfig(config, transport, remote);\n    this.rateLimitConfig = rateLimits;\n    this._api = {\n      capabilities: new Capabilities_1.Capabilities(this),\n      configuration: new Configuration_1.Configuration(this),\n      lights: new Lights_1.Lights(this),\n      groups: new Groups_1.Groups(this),\n      sensors: new Sensors_1.Sensors(this),\n      schedules: new Schedules_1.Schedules(this),\n      scenes: new Scenes_1.Scenes(this),\n      users: new Users_1.Users(this),\n      rules: new Rules_1.Rules(this),\n      resourceLinks: new ResourceLinks_1.ResourceLinks(this)\n    }; // Add the remote API if this is a remote instance of the API\n\n    if (this._config.isRemote) {\n      this._api.remote = new Remote_1.Remote(this);\n    } //TODO initial investigation in to the Streaming API for Entertainment\n    // if (config.clientkey) {\n    //   self.entertainment = new EntertainmentApi(self);\n    // }\n    // Load the initial state upon first connection\n\n\n    this.syncWithBridge();\n  }\n\n  get capabilities() {\n    return this._api.capabilities;\n  }\n\n  get configuration() {\n    return this._api.configuration;\n  }\n\n  get lights() {\n    return this._api.lights;\n  }\n\n  get groups() {\n    return this._api.groups;\n  }\n\n  get sensors() {\n    return this._api.sensors;\n  }\n\n  get schedules() {\n    return this._api.schedules;\n  }\n\n  get scenes() {\n    return this._api.scenes;\n  }\n\n  get users() {\n    return this._api.users;\n  }\n\n  get rules() {\n    return this._api.rules;\n  }\n\n  get resourceLinks() {\n    return this._api.resourceLinks;\n  }\n  /**\n   * Obtains the remote API endpoints, this will only be present if you have a remote connection established.\n   */\n\n\n  get remote() {\n    return this._api.remote;\n  }\n  /**\n   * Obtains the previously cached state that was obtained from the bridge.\n   */\n\n\n  getCachedState() {\n    const self = this;\n\n    if (self.isSyncing() && self._syncPromise) {\n      return self._syncPromise.then(() => {\n        return self._state;\n      });\n    } else {\n      return Promise.resolve(self._state);\n    }\n  }\n  /**\n   * Checks to see if the API is still syncing with the Hue bridge.\n   */\n\n\n  isSyncing() {\n    return this._syncPromise != undefined;\n  }\n  /**\n   * The timestamp of the last sync for the cached state.\n   */\n\n\n  getLastSyncTime() {\n    return this._lastSyncTime;\n  }\n  /**\n   * Performs an async synchronization activity with the hue bridge to cache the state of things like lights, etc...\n   */\n\n\n  syncWithBridge() {\n    const self = this;\n\n    if (!self.isSyncing()) {\n      let dataSync;\n\n      if (self._config.username) {\n        // We can only sync if there is a username passed to us, which will not be the case if we are creating the user\n        // first.\n        dataSync = self.configuration.getAll();\n      } else {\n        // We can only obtain the open config when no user is passed in\n        dataSync = self.configuration.getUnauthenticatedConfig();\n      }\n\n      self._syncPromise = dataSync.then(data => {\n        self._state = new Cache_1.Cache(data);\n        self._lastSyncTime = new Date().getTime();\n        self._syncPromise = undefined;\n      }).catch(err => {\n        // This is an informational message for now as we do not yet want to blow up as it is difficult to see the\n        // context of this reported error from users so far.\n        console.error(`Failed to async load the bridge configuration data; ${err}`);\n        self._syncPromise = undefined;\n      });\n    }\n  }\n\n  getLightDefinition(id) {\n    return this.getCachedState().then(() => {\n      var _a;\n\n      return (_a = this._state) === null || _a === void 0 ? void 0 : _a.getLight(id);\n    });\n  }\n\n  get name() {\n    return this._config.bridgeName;\n  }\n\n  _getConfig() {\n    return this._config;\n  }\n\n  _getTransport() {\n    return this._config.transport;\n  }\n\n  _getRemote() {\n    return this._config.remote;\n  }\n\n}\n\nexports.Api = Api;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Api.js"],"names":["Object","defineProperty","exports","value","Api","Remote_1","require","Cache_1","HueApiConfig_1","Capabilities_1","Configuration_1","Groups_1","Lights_1","ResourceLinks_1","Rules_1","Scenes_1","Schedules_1","Sensors_1","Users_1","constructor","config","transport","rateLimits","remote","_lastSyncTime","_state","undefined","_config","HueApiConfig","rateLimitConfig","_api","capabilities","Capabilities","configuration","Configuration","lights","Lights","groups","Groups","sensors","Sensors","schedules","Schedules","scenes","Scenes","users","Users","rules","Rules","resourceLinks","ResourceLinks","isRemote","Remote","syncWithBridge","getCachedState","self","isSyncing","_syncPromise","then","Promise","resolve","getLastSyncTime","dataSync","username","getAll","getUnauthenticatedConfig","data","Cache","Date","getTime","catch","err","console","error","getLightDefinition","id","_a","getLight","name","bridgeName","_getConfig","_getTransport","_getRemote"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Api = void 0;\nconst Remote_1 = require(\"./Remote\");\nconst Cache_1 = require(\"./Cache\");\nconst HueApiConfig_1 = require(\"./HueApiConfig\");\nconst Capabilities_1 = require(\"./Capabilities\");\nconst Configuration_1 = require(\"./Configuration\");\nconst Groups_1 = require(\"./Groups\");\nconst Lights_1 = require(\"./Lights\");\nconst ResourceLinks_1 = require(\"./ResourceLinks\");\nconst Rules_1 = require(\"./Rules\");\nconst Scenes_1 = require(\"./Scenes\");\nconst Schedules_1 = require(\"./Schedules\");\nconst Sensors_1 = require(\"./Sensors\");\nconst Users_1 = require(\"./Users\");\nclass Api {\n    constructor(config, transport, rateLimits, remote) {\n        this._lastSyncTime = -1;\n        this._state = undefined;\n        this._config = new HueApiConfig_1.HueApiConfig(config, transport, remote);\n        this.rateLimitConfig = rateLimits;\n        this._api = {\n            capabilities: new Capabilities_1.Capabilities(this),\n            configuration: new Configuration_1.Configuration(this),\n            lights: new Lights_1.Lights(this),\n            groups: new Groups_1.Groups(this),\n            sensors: new Sensors_1.Sensors(this),\n            schedules: new Schedules_1.Schedules(this),\n            scenes: new Scenes_1.Scenes(this),\n            users: new Users_1.Users(this),\n            rules: new Rules_1.Rules(this),\n            resourceLinks: new ResourceLinks_1.ResourceLinks(this)\n        };\n        // Add the remote API if this is a remote instance of the API\n        if (this._config.isRemote) {\n            this._api.remote = new Remote_1.Remote(this);\n        }\n        //TODO initial investigation in to the Streaming API for Entertainment\n        // if (config.clientkey) {\n        //   self.entertainment = new EntertainmentApi(self);\n        // }\n        // Load the initial state upon first connection\n        this.syncWithBridge();\n    }\n    get capabilities() {\n        return this._api.capabilities;\n    }\n    get configuration() {\n        return this._api.configuration;\n    }\n    get lights() {\n        return this._api.lights;\n    }\n    get groups() {\n        return this._api.groups;\n    }\n    get sensors() {\n        return this._api.sensors;\n    }\n    get schedules() {\n        return this._api.schedules;\n    }\n    get scenes() {\n        return this._api.scenes;\n    }\n    get users() {\n        return this._api.users;\n    }\n    get rules() {\n        return this._api.rules;\n    }\n    get resourceLinks() {\n        return this._api.resourceLinks;\n    }\n    /**\n     * Obtains the remote API endpoints, this will only be present if you have a remote connection established.\n     */\n    get remote() {\n        return this._api.remote;\n    }\n    /**\n     * Obtains the previously cached state that was obtained from the bridge.\n     */\n    getCachedState() {\n        const self = this;\n        if (self.isSyncing() && self._syncPromise) {\n            return self._syncPromise.then(() => {\n                return self._state;\n            });\n        }\n        else {\n            return Promise.resolve(self._state);\n        }\n    }\n    /**\n     * Checks to see if the API is still syncing with the Hue bridge.\n     */\n    isSyncing() {\n        return this._syncPromise != undefined;\n    }\n    /**\n     * The timestamp of the last sync for the cached state.\n     */\n    getLastSyncTime() {\n        return this._lastSyncTime;\n    }\n    /**\n     * Performs an async synchronization activity with the hue bridge to cache the state of things like lights, etc...\n     */\n    syncWithBridge() {\n        const self = this;\n        if (!self.isSyncing()) {\n            let dataSync;\n            if (self._config.username) {\n                // We can only sync if there is a username passed to us, which will not be the case if we are creating the user\n                // first.\n                dataSync = self.configuration.getAll();\n            }\n            else {\n                // We can only obtain the open config when no user is passed in\n                dataSync = self.configuration.getUnauthenticatedConfig();\n            }\n            self._syncPromise = dataSync.then(data => {\n                self._state = new Cache_1.Cache(data);\n                self._lastSyncTime = new Date().getTime();\n                self._syncPromise = undefined;\n            }).catch(err => {\n                // This is an informational message for now as we do not yet want to blow up as it is difficult to see the\n                // context of this reported error from users so far.\n                console.error(`Failed to async load the bridge configuration data; ${err}`);\n                self._syncPromise = undefined;\n            });\n        }\n    }\n    getLightDefinition(id) {\n        return this.getCachedState()\n            .then(() => {\n            var _a;\n            return (_a = this._state) === null || _a === void 0 ? void 0 : _a.getLight(id);\n        });\n    }\n    get name() {\n        return this._config.bridgeName;\n    }\n    _getConfig() {\n        return this._config;\n    }\n    _getTransport() {\n        return this._config.transport;\n    }\n    _getRemote() {\n        return this._config.remote;\n    }\n}\nexports.Api = Api;\n"]},"metadata":{},"sourceType":"script"}