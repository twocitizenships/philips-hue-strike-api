{"ast":null,"code":"\"use strict\";\n\nvar DLList;\nDLList = class DLList {\n  constructor(incr, decr) {\n    this.incr = incr;\n    this.decr = decr;\n    this._first = null;\n    this._last = null;\n    this.length = 0;\n  }\n\n  push(value) {\n    var node;\n    this.length++;\n\n    if (typeof this.incr === \"function\") {\n      this.incr();\n    }\n\n    node = {\n      value,\n      prev: this._last,\n      next: null\n    };\n\n    if (this._last != null) {\n      this._last.next = node;\n      this._last = node;\n    } else {\n      this._first = this._last = node;\n    }\n\n    return void 0;\n  }\n\n  shift() {\n    var value;\n\n    if (this._first == null) {\n      return;\n    } else {\n      this.length--;\n\n      if (typeof this.decr === \"function\") {\n        this.decr();\n      }\n    }\n\n    value = this._first.value;\n\n    if ((this._first = this._first.next) != null) {\n      this._first.prev = null;\n    } else {\n      this._last = null;\n    }\n\n    return value;\n  }\n\n  first() {\n    if (this._first != null) {\n      return this._first.value;\n    }\n  }\n\n  getArray() {\n    var node, ref, results;\n    node = this._first;\n    results = [];\n\n    while (node != null) {\n      results.push((ref = node, node = node.next, ref.value));\n    }\n\n    return results;\n  }\n\n  forEachShift(cb) {\n    var node;\n    node = this.shift();\n\n    while (node != null) {\n      cb(node), node = this.shift();\n    }\n\n    return void 0;\n  }\n\n  debug() {\n    var node, ref, ref1, ref2, results;\n    node = this._first;\n    results = [];\n\n    while (node != null) {\n      results.push((ref = node, node = node.next, {\n        value: ref.value,\n        prev: (ref1 = ref.prev) != null ? ref1.value : void 0,\n        next: (ref2 = ref.next) != null ? ref2.value : void 0\n      }));\n    }\n\n    return results;\n  }\n\n};\nmodule.exports = DLList;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/bottleneck/lib/DLList.js"],"names":["DLList","constructor","incr","decr","_first","_last","length","push","value","node","prev","next","shift","first","getArray","ref","results","forEachShift","cb","debug","ref1","ref2","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar DLList;\nDLList = class DLList {\n  constructor(incr, decr) {\n    this.incr = incr;\n    this.decr = decr;\n    this._first = null;\n    this._last = null;\n    this.length = 0;\n  }\n\n  push(value) {\n    var node;\n    this.length++;\n\n    if (typeof this.incr === \"function\") {\n      this.incr();\n    }\n\n    node = {\n      value,\n      prev: this._last,\n      next: null\n    };\n\n    if (this._last != null) {\n      this._last.next = node;\n      this._last = node;\n    } else {\n      this._first = this._last = node;\n    }\n\n    return void 0;\n  }\n\n  shift() {\n    var value;\n\n    if (this._first == null) {\n      return;\n    } else {\n      this.length--;\n\n      if (typeof this.decr === \"function\") {\n        this.decr();\n      }\n    }\n\n    value = this._first.value;\n\n    if ((this._first = this._first.next) != null) {\n      this._first.prev = null;\n    } else {\n      this._last = null;\n    }\n\n    return value;\n  }\n\n  first() {\n    if (this._first != null) {\n      return this._first.value;\n    }\n  }\n\n  getArray() {\n    var node, ref, results;\n    node = this._first;\n    results = [];\n\n    while (node != null) {\n      results.push((ref = node, node = node.next, ref.value));\n    }\n\n    return results;\n  }\n\n  forEachShift(cb) {\n    var node;\n    node = this.shift();\n\n    while (node != null) {\n      cb(node), node = this.shift();\n    }\n\n    return void 0;\n  }\n\n  debug() {\n    var node, ref, ref1, ref2, results;\n    node = this._first;\n    results = [];\n\n    while (node != null) {\n      results.push((ref = node, node = node.next, {\n        value: ref.value,\n        prev: (ref1 = ref.prev) != null ? ref1.value : void 0,\n        next: (ref2 = ref.next) != null ? ref2.value : void 0\n      }));\n    }\n\n    return results;\n  }\n\n};\nmodule.exports = DLList;"]},"metadata":{},"sourceType":"script"}