{"ast":null,"code":"import { BooleanType, ChoiceType, ObjectType, StringType, UInt16Type, UInt8Type } from '../types';\nimport { BridgeObject } from './BridgeObject';\nconst ATTRIBUTES = [// Modifiable Attributes\nnew UInt16Type({\n  name: 'proxyport'\n}), new StringType({\n  name: 'proxyaddress',\n  minLength: 0,\n  maxLength: 40\n}), new StringType({\n  name: 'name',\n  minLength: 4,\n  maxLength: 16\n}), new BooleanType({\n  name: 'linkbutton'\n}), new StringType({\n  name: 'ipaddress'\n}), new StringType({\n  name: 'netmask'\n}), new StringType({\n  name: 'gateway'\n}), new BooleanType({\n  name: 'dhcp'\n}), new StringType({\n  name: 'timezone'\n}), new BooleanType({\n  name: 'touchlink'\n}), new ChoiceType({\n  name: 'zigbeechannel',\n  validValues: [11, 15, 20, 25]\n}), new StringType({\n  name: 'UTC'\n}), // R/O attributes\nnew StringType({\n  name: 'localtime'\n}), new ObjectType({\n  name: 'swupdate2',\n  types: [new BooleanType({\n    name: 'checkforupdate'\n  }), new StringType({\n    name: 'lastchange'\n  }), new ChoiceType({\n    name: 'state',\n    validValues: ['unknown', 'noupdates', 'transferring', 'anyreadytoinstall', 'allreadytoinstall', 'installing']\n  }), new ObjectType({\n    name: 'autoinstall',\n    types: [new StringType({\n      name: 'updatetime'\n    }), new BooleanType({\n      name: 'on'\n    })]\n  }), new ObjectType({\n    name: 'bridge',\n    types: [new StringType({\n      name: 'state'\n    }), new StringType({\n      name: 'lastinstall'\n    })]\n  })]\n}), new ObjectType({\n  name: 'whitelist'\n}), new BooleanType({\n  name: 'portalservices'\n}), new StringType({\n  name: 'portalconnection'\n}), new ObjectType({\n  name: 'portalstate',\n  types: [new BooleanType({\n    name: 'signedon'\n  }), new BooleanType({\n    name: 'incoming'\n  }), new BooleanType({\n    name: 'outgoing'\n  }), new StringType({\n    name: 'communication'\n  })]\n}), new ObjectType({\n  name: 'internetservices',\n  types: [new ChoiceType({\n    name: 'internet',\n    validValues: ['connected', 'disconnected']\n  }), new ChoiceType({\n    name: 'remoteaccess',\n    validValues: ['connected', 'disconnected']\n  }), new ChoiceType({\n    name: 'time',\n    validValues: ['connected', 'disconnected']\n  }), new ChoiceType({\n    name: 'swupdate',\n    validValues: ['connected', 'disconnected']\n  })]\n}), new ObjectType({\n  name: 'backup',\n  types: [new ChoiceType({\n    name: 'status',\n    validValues: ['idle', 'startmigration', 'fileready_disabled', 'prepare_restore', 'restoring']\n  }), new UInt8Type({\n    name: 'errorcode'\n  })]\n}), new StringType({\n  name: 'apiversion'\n}), new StringType({\n  name: 'swversion'\n}), new StringType({\n  name: 'mac'\n}), new StringType({\n  name: 'modelid'\n}), new StringType({\n  name: 'bridgeid'\n}), new BooleanType({\n  name: 'factorynew'\n}), new StringType({\n  name: 'replacesbridgeid'\n}), new StringType({\n  name: 'datastoreversion'\n}), new StringType({\n  name: 'starterkitid'\n})];\nexport class BridgeConfiguration extends BridgeObject {\n  constructor() {\n    super(ATTRIBUTES);\n  }\n\n  set proxyport(value) {\n    this.setAttributeValue('proxyport', value);\n  }\n\n  set proxyaddress(value) {\n    this.setAttributeValue('proxyaddress', value);\n  }\n\n  set name(value) {\n    this.setAttributeValue('name', value);\n  }\n\n  set linkbutton(value) {\n    this.setAttributeValue('linkbutton', value);\n  }\n\n  set ipaddress(value) {\n    this.setAttributeValue('ipaddress', value);\n  }\n\n  set netmask(value) {\n    this.setAttributeValue('netmask', value);\n  }\n\n  set gateway(value) {\n    this.setAttributeValue('gateway', value);\n  }\n\n  set dhcp(value) {\n    this.setAttributeValue('dhcp', value);\n  }\n\n  set timezone(value) {\n    this.setAttributeValue('timezone', value);\n  }\n\n  set touchlink(value) {\n    this.setAttributeValue('touchlink', value);\n  }\n\n  set zigbeechannel(value) {\n    this.setAttributeValue('zigbeechannel', value);\n  }\n  /**\n   * Sets the time in UTC on the bridge, but only if there is internet connection (as it will use the internet for the time)\n   * @param value An iso time format\n   * @returns {BridgeObject}\n   */\n\n\n  set UTC(value) {\n    this.setAttributeValue('UTC', value);\n  }\n\n  get portalservices() {\n    return this.getAttributeValue('portalservices');\n  }\n\n  get portalconnection() {\n    return this.getAttributeValue('portalconnection');\n  }\n\n  get portalstate() {\n    return this.getAttributeValue('portalstate');\n  }\n\n  get localtime() {\n    return this.getAttributeValue('localtime');\n  }\n\n  get proxyport() {\n    return this.getAttributeValue('proxyport');\n  }\n\n  get proxyaddress() {\n    return this.getAttributeValue('proxyaddress');\n  }\n\n  get name() {\n    return this.getAttributeValue('name');\n  }\n\n  get linkbutton() {\n    return this.getAttributeValue('linkbutton');\n  }\n\n  get ipaddress() {\n    return this.getAttributeValue('ipaddress');\n  }\n\n  get netmask() {\n    return this.getAttributeValue('netmask');\n  }\n\n  get gateway() {\n    return this.getAttributeValue('gateway');\n  }\n\n  get dhcp() {\n    return this.getAttributeValue('dhcp');\n  }\n\n  get timezone() {\n    return this.getAttributeValue('timezone');\n  }\n\n  get zigbeechannel() {\n    return this.getAttributeValue('zigbeechannel');\n  }\n\n  get UTC() {\n    return this.getAttributeValue('UTC');\n  }\n\n  get swupdate2() {\n    return this.getAttributeValue('swupdate2');\n  }\n\n  get whitelist() {\n    return this.getAttributeValue('whitelist');\n  }\n\n  get internetservices() {\n    return this.getAttributeValue('internetservices');\n  }\n\n  get backup() {\n    return this.getAttributeValue('backup');\n  }\n\n  get apiversion() {\n    return this.getAttributeValue('apiversion');\n  }\n\n  get swversion() {\n    return this.getAttributeValue('swversion');\n  }\n\n  get mac() {\n    return this.getAttributeValue('mac');\n  }\n\n  get modelid() {\n    return this.getAttributeValue('modelid');\n  }\n\n  get bridgeid() {\n    return this.getAttributeValue('bridgeid');\n  }\n\n  get factorynew() {\n    return this.getAttributeValue('factorynew');\n  }\n\n  get replacesbridgeid() {\n    return this.getAttributeValue('replacesbridgeid');\n  }\n\n  get datastoreversion() {\n    return this.getAttributeValue('datastoreversion');\n  }\n\n  get starterkitid() {\n    return this.getAttributeValue('starterkitid');\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/BridgeConfiguration.js"],"names":["BooleanType","ChoiceType","ObjectType","StringType","UInt16Type","UInt8Type","BridgeObject","ATTRIBUTES","name","minLength","maxLength","validValues","types","BridgeConfiguration","constructor","proxyport","value","setAttributeValue","proxyaddress","linkbutton","ipaddress","netmask","gateway","dhcp","timezone","touchlink","zigbeechannel","UTC","portalservices","getAttributeValue","portalconnection","portalstate","localtime","swupdate2","whitelist","internetservices","backup","apiversion","swversion","mac","modelid","bridgeid","factorynew","replacesbridgeid","datastoreversion","starterkitid"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,UAA1D,EAAsEC,SAAtE,QAAuF,UAAvF;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,MAAMC,UAAU,GAAG,CACf;AACA,IAAIH,UAAJ,CAAe;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAf,CAFe,EAGf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,SAAS,EAAE,CAAnC;AAAsCC,EAAAA,SAAS,EAAE;AAAjD,CAAf,CAHe,EAIf,IAAIP,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,SAAS,EAAE,CAA3B;AAA8BC,EAAAA,SAAS,EAAE;AAAzC,CAAf,CAJe,EAKf,IAAIV,WAAJ,CAAgB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAhB,CALe,EAMf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CANe,EAOf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAPe,EAQf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CARe,EASf,IAAIR,WAAJ,CAAgB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAhB,CATe,EAUf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAVe,EAWf,IAAIR,WAAJ,CAAgB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAhB,CAXe,EAYf,IAAIP,UAAJ,CAAe;AAAEO,EAAAA,IAAI,EAAE,eAAR;AAAyBG,EAAAA,WAAW,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb;AAAtC,CAAf,CAZe,EAaf,IAAIR,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAbe,EAcf;AACA,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAfe,EAgBf,IAAIN,UAAJ,CAAe;AACXM,EAAAA,IAAI,EAAE,WADK;AAEXI,EAAAA,KAAK,EAAE,CACH,IAAIZ,WAAJ,CAAgB;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAhB,CADG,EAEH,IAAIL,UAAJ,CAAe;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAAf,CAFG,EAGH,IAAIP,UAAJ,CAAe;AACXO,IAAAA,IAAI,EAAE,OADK;AAEXG,IAAAA,WAAW,EAAE,CACT,SADS,EAET,WAFS,EAGT,cAHS,EAIT,mBAJS,EAKT,mBALS,EAMT,YANS;AAFF,GAAf,CAHG,EAcH,IAAIT,UAAJ,CAAe;AACXM,IAAAA,IAAI,EAAE,aADK;AAEXI,IAAAA,KAAK,EAAE,CACH,IAAIT,UAAJ,CAAe;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAf,CADG,EAEH,IAAIR,WAAJ,CAAgB;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAFG;AAFI,GAAf,CAdG,EAqBH,IAAIN,UAAJ,CAAe;AACXM,IAAAA,IAAI,EAAE,QADK;AAEXI,IAAAA,KAAK,EAAE,CACH,IAAIT,UAAJ,CAAe;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAf,CADG,EAEH,IAAIL,UAAJ,CAAe;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAf,CAFG;AAFI,GAAf,CArBG;AAFI,CAAf,CAhBe,EAgDf,IAAIN,UAAJ,CAAe;AAAEM,EAAAA,IAAI,EAAE;AAAR,CAAf,CAhDe,EAiDf,IAAIR,WAAJ,CAAgB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAhB,CAjDe,EAkDf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAlDe,EAmDf,IAAIN,UAAJ,CAAe;AACXM,EAAAA,IAAI,EAAE,aADK;AAEXI,EAAAA,KAAK,EAAE,CACH,IAAIZ,WAAJ,CAAgB;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAhB,CADG,EAEH,IAAIR,WAAJ,CAAgB;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAhB,CAFG,EAGH,IAAIR,WAAJ,CAAgB;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAhB,CAHG,EAIH,IAAIL,UAAJ,CAAe;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAAf,CAJG;AAFI,CAAf,CAnDe,EA4Df,IAAIN,UAAJ,CAAe;AACXM,EAAAA,IAAI,EAAE,kBADK;AAEXI,EAAAA,KAAK,EAAE,CACH,IAAIX,UAAJ,CAAe;AAAEO,IAAAA,IAAI,EAAE,UAAR;AAAoBG,IAAAA,WAAW,EAAE,CAAC,WAAD,EAAc,cAAd;AAAjC,GAAf,CADG,EAEH,IAAIV,UAAJ,CAAe;AAAEO,IAAAA,IAAI,EAAE,cAAR;AAAwBG,IAAAA,WAAW,EAAE,CAAC,WAAD,EAAc,cAAd;AAArC,GAAf,CAFG,EAGH,IAAIV,UAAJ,CAAe;AAAEO,IAAAA,IAAI,EAAE,MAAR;AAAgBG,IAAAA,WAAW,EAAE,CAAC,WAAD,EAAc,cAAd;AAA7B,GAAf,CAHG,EAIH,IAAIV,UAAJ,CAAe;AAAEO,IAAAA,IAAI,EAAE,UAAR;AAAoBG,IAAAA,WAAW,EAAE,CAAC,WAAD,EAAc,cAAd;AAAjC,GAAf,CAJG;AAFI,CAAf,CA5De,EAqEf,IAAIT,UAAJ,CAAe;AACXM,EAAAA,IAAI,EAAE,QADK;AAEXI,EAAAA,KAAK,EAAE,CACH,IAAIX,UAAJ,CAAe;AACXO,IAAAA,IAAI,EAAE,QADK;AAEXG,IAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,gBAAT,EAA2B,oBAA3B,EAAiD,iBAAjD,EAAoE,WAApE;AAFF,GAAf,CADG,EAKH,IAAIN,SAAJ,CAAc;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAd,CALG;AAFI,CAAf,CArEe,EA+Ef,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CA/Ee,EAgFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAhFe,EAiFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAjFe,EAkFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAlFe,EAmFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAnFe,EAoFf,IAAIR,WAAJ,CAAgB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAhB,CApFe,EAqFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CArFe,EAsFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAtFe,EAuFf,IAAIL,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAf,CAvFe,CAAnB;AAyFA,OAAO,MAAMK,mBAAN,SAAkCP,YAAlC,CAA+C;AAClDQ,EAAAA,WAAW,GAAG;AACV,UAAMP,UAAN;AACH;;AACY,MAATQ,SAAS,CAACC,KAAD,EAAQ;AACjB,SAAKC,iBAAL,CAAuB,WAAvB,EAAoCD,KAApC;AACH;;AACe,MAAZE,YAAY,CAACF,KAAD,EAAQ;AACpB,SAAKC,iBAAL,CAAuB,cAAvB,EAAuCD,KAAvC;AACH;;AACO,MAAJR,IAAI,CAACQ,KAAD,EAAQ;AACZ,SAAKC,iBAAL,CAAuB,MAAvB,EAA+BD,KAA/B;AACH;;AACa,MAAVG,UAAU,CAACH,KAAD,EAAQ;AAClB,SAAKC,iBAAL,CAAuB,YAAvB,EAAqCD,KAArC;AACH;;AACY,MAATI,SAAS,CAACJ,KAAD,EAAQ;AACjB,SAAKC,iBAAL,CAAuB,WAAvB,EAAoCD,KAApC;AACH;;AACU,MAAPK,OAAO,CAACL,KAAD,EAAQ;AACf,SAAKC,iBAAL,CAAuB,SAAvB,EAAkCD,KAAlC;AACH;;AACU,MAAPM,OAAO,CAACN,KAAD,EAAQ;AACf,SAAKC,iBAAL,CAAuB,SAAvB,EAAkCD,KAAlC;AACH;;AACO,MAAJO,IAAI,CAACP,KAAD,EAAQ;AACZ,SAAKC,iBAAL,CAAuB,MAAvB,EAA+BD,KAA/B;AACH;;AACW,MAARQ,QAAQ,CAACR,KAAD,EAAQ;AAChB,SAAKC,iBAAL,CAAuB,UAAvB,EAAmCD,KAAnC;AACH;;AACY,MAATS,SAAS,CAACT,KAAD,EAAQ;AACjB,SAAKC,iBAAL,CAAuB,WAAvB,EAAoCD,KAApC;AACH;;AACgB,MAAbU,aAAa,CAACV,KAAD,EAAQ;AACrB,SAAKC,iBAAL,CAAuB,eAAvB,EAAwCD,KAAxC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACW,MAAHW,GAAG,CAACX,KAAD,EAAQ;AACX,SAAKC,iBAAL,CAAuB,KAAvB,EAA8BD,KAA9B;AACH;;AACiB,MAAdY,cAAc,GAAG;AACjB,WAAO,KAAKC,iBAAL,CAAuB,gBAAvB,CAAP;AACH;;AACmB,MAAhBC,gBAAgB,GAAG;AACnB,WAAO,KAAKD,iBAAL,CAAuB,kBAAvB,CAAP;AACH;;AACc,MAAXE,WAAW,GAAG;AACd,WAAO,KAAKF,iBAAL,CAAuB,aAAvB,CAAP;AACH;;AACY,MAATG,SAAS,GAAG;AACZ,WAAO,KAAKH,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AACY,MAATd,SAAS,GAAG;AACZ,WAAO,KAAKc,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AACe,MAAZX,YAAY,GAAG;AACf,WAAO,KAAKW,iBAAL,CAAuB,cAAvB,CAAP;AACH;;AACO,MAAJrB,IAAI,GAAG;AACP,WAAO,KAAKqB,iBAAL,CAAuB,MAAvB,CAAP;AACH;;AACa,MAAVV,UAAU,GAAG;AACb,WAAO,KAAKU,iBAAL,CAAuB,YAAvB,CAAP;AACH;;AACY,MAATT,SAAS,GAAG;AACZ,WAAO,KAAKS,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AACU,MAAPR,OAAO,GAAG;AACV,WAAO,KAAKQ,iBAAL,CAAuB,SAAvB,CAAP;AACH;;AACU,MAAPP,OAAO,GAAG;AACV,WAAO,KAAKO,iBAAL,CAAuB,SAAvB,CAAP;AACH;;AACO,MAAJN,IAAI,GAAG;AACP,WAAO,KAAKM,iBAAL,CAAuB,MAAvB,CAAP;AACH;;AACW,MAARL,QAAQ,GAAG;AACX,WAAO,KAAKK,iBAAL,CAAuB,UAAvB,CAAP;AACH;;AACgB,MAAbH,aAAa,GAAG;AAChB,WAAO,KAAKG,iBAAL,CAAuB,eAAvB,CAAP;AACH;;AACM,MAAHF,GAAG,GAAG;AACN,WAAO,KAAKE,iBAAL,CAAuB,KAAvB,CAAP;AACH;;AACY,MAATI,SAAS,GAAG;AACZ,WAAO,KAAKJ,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AACY,MAATK,SAAS,GAAG;AACZ,WAAO,KAAKL,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AACmB,MAAhBM,gBAAgB,GAAG;AACnB,WAAO,KAAKN,iBAAL,CAAuB,kBAAvB,CAAP;AACH;;AACS,MAANO,MAAM,GAAG;AACT,WAAO,KAAKP,iBAAL,CAAuB,QAAvB,CAAP;AACH;;AACa,MAAVQ,UAAU,GAAG;AACb,WAAO,KAAKR,iBAAL,CAAuB,YAAvB,CAAP;AACH;;AACY,MAATS,SAAS,GAAG;AACZ,WAAO,KAAKT,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AACM,MAAHU,GAAG,GAAG;AACN,WAAO,KAAKV,iBAAL,CAAuB,KAAvB,CAAP;AACH;;AACU,MAAPW,OAAO,GAAG;AACV,WAAO,KAAKX,iBAAL,CAAuB,SAAvB,CAAP;AACH;;AACW,MAARY,QAAQ,GAAG;AACX,WAAO,KAAKZ,iBAAL,CAAuB,UAAvB,CAAP;AACH;;AACa,MAAVa,UAAU,GAAG;AACb,WAAO,KAAKb,iBAAL,CAAuB,YAAvB,CAAP;AACH;;AACmB,MAAhBc,gBAAgB,GAAG;AACnB,WAAO,KAAKd,iBAAL,CAAuB,kBAAvB,CAAP;AACH;;AACmB,MAAhBe,gBAAgB,GAAG;AACnB,WAAO,KAAKf,iBAAL,CAAuB,kBAAvB,CAAP;AACH;;AACe,MAAZgB,YAAY,GAAG;AACf,WAAO,KAAKhB,iBAAL,CAAuB,cAAvB,CAAP;AACH;;AAhIiD;AAkItD","sourcesContent":["import { BooleanType, ChoiceType, ObjectType, StringType, UInt16Type, UInt8Type } from '../types';\nimport { BridgeObject } from './BridgeObject';\nconst ATTRIBUTES = [\n    // Modifiable Attributes\n    new UInt16Type({ name: 'proxyport' }),\n    new StringType({ name: 'proxyaddress', minLength: 0, maxLength: 40 }),\n    new StringType({ name: 'name', minLength: 4, maxLength: 16 }),\n    new BooleanType({ name: 'linkbutton' }),\n    new StringType({ name: 'ipaddress' }),\n    new StringType({ name: 'netmask' }),\n    new StringType({ name: 'gateway' }),\n    new BooleanType({ name: 'dhcp' }),\n    new StringType({ name: 'timezone' }),\n    new BooleanType({ name: 'touchlink' }),\n    new ChoiceType({ name: 'zigbeechannel', validValues: [11, 15, 20, 25] }),\n    new StringType({ name: 'UTC' }),\n    // R/O attributes\n    new StringType({ name: 'localtime' }),\n    new ObjectType({\n        name: 'swupdate2',\n        types: [\n            new BooleanType({ name: 'checkforupdate' }),\n            new StringType({ name: 'lastchange' }),\n            new ChoiceType({\n                name: 'state',\n                validValues: [\n                    'unknown',\n                    'noupdates',\n                    'transferring',\n                    'anyreadytoinstall',\n                    'allreadytoinstall',\n                    'installing',\n                ]\n            }),\n            new ObjectType({\n                name: 'autoinstall',\n                types: [\n                    new StringType({ name: 'updatetime' }),\n                    new BooleanType({ name: 'on' }),\n                ]\n            }),\n            new ObjectType({\n                name: 'bridge',\n                types: [\n                    new StringType({ name: 'state' }),\n                    new StringType({ name: 'lastinstall' }),\n                ]\n            }),\n        ]\n    }),\n    new ObjectType({ name: 'whitelist' }),\n    new BooleanType({ name: 'portalservices' }),\n    new StringType({ name: 'portalconnection' }),\n    new ObjectType({\n        name: 'portalstate',\n        types: [\n            new BooleanType({ name: 'signedon' }),\n            new BooleanType({ name: 'incoming' }),\n            new BooleanType({ name: 'outgoing' }),\n            new StringType({ name: 'communication' }),\n        ]\n    }),\n    new ObjectType({\n        name: 'internetservices',\n        types: [\n            new ChoiceType({ name: 'internet', validValues: ['connected', 'disconnected'] }),\n            new ChoiceType({ name: 'remoteaccess', validValues: ['connected', 'disconnected'] }),\n            new ChoiceType({ name: 'time', validValues: ['connected', 'disconnected'] }),\n            new ChoiceType({ name: 'swupdate', validValues: ['connected', 'disconnected'] }),\n        ]\n    }),\n    new ObjectType({\n        name: 'backup',\n        types: [\n            new ChoiceType({\n                name: 'status',\n                validValues: ['idle', 'startmigration', 'fileready_disabled', 'prepare_restore', 'restoring']\n            }),\n            new UInt8Type({ name: 'errorcode' }),\n        ]\n    }),\n    new StringType({ name: 'apiversion' }),\n    new StringType({ name: 'swversion' }),\n    new StringType({ name: 'mac' }),\n    new StringType({ name: 'modelid' }),\n    new StringType({ name: 'bridgeid' }),\n    new BooleanType({ name: 'factorynew' }),\n    new StringType({ name: 'replacesbridgeid' }),\n    new StringType({ name: 'datastoreversion' }),\n    new StringType({ name: 'starterkitid' }),\n];\nexport class BridgeConfiguration extends BridgeObject {\n    constructor() {\n        super(ATTRIBUTES);\n    }\n    set proxyport(value) {\n        this.setAttributeValue('proxyport', value);\n    }\n    set proxyaddress(value) {\n        this.setAttributeValue('proxyaddress', value);\n    }\n    set name(value) {\n        this.setAttributeValue('name', value);\n    }\n    set linkbutton(value) {\n        this.setAttributeValue('linkbutton', value);\n    }\n    set ipaddress(value) {\n        this.setAttributeValue('ipaddress', value);\n    }\n    set netmask(value) {\n        this.setAttributeValue('netmask', value);\n    }\n    set gateway(value) {\n        this.setAttributeValue('gateway', value);\n    }\n    set dhcp(value) {\n        this.setAttributeValue('dhcp', value);\n    }\n    set timezone(value) {\n        this.setAttributeValue('timezone', value);\n    }\n    set touchlink(value) {\n        this.setAttributeValue('touchlink', value);\n    }\n    set zigbeechannel(value) {\n        this.setAttributeValue('zigbeechannel', value);\n    }\n    /**\n     * Sets the time in UTC on the bridge, but only if there is internet connection (as it will use the internet for the time)\n     * @param value An iso time format\n     * @returns {BridgeObject}\n     */\n    set UTC(value) {\n        this.setAttributeValue('UTC', value);\n    }\n    get portalservices() {\n        return this.getAttributeValue('portalservices');\n    }\n    get portalconnection() {\n        return this.getAttributeValue('portalconnection');\n    }\n    get portalstate() {\n        return this.getAttributeValue('portalstate');\n    }\n    get localtime() {\n        return this.getAttributeValue('localtime');\n    }\n    get proxyport() {\n        return this.getAttributeValue('proxyport');\n    }\n    get proxyaddress() {\n        return this.getAttributeValue('proxyaddress');\n    }\n    get name() {\n        return this.getAttributeValue('name');\n    }\n    get linkbutton() {\n        return this.getAttributeValue('linkbutton');\n    }\n    get ipaddress() {\n        return this.getAttributeValue('ipaddress');\n    }\n    get netmask() {\n        return this.getAttributeValue('netmask');\n    }\n    get gateway() {\n        return this.getAttributeValue('gateway');\n    }\n    get dhcp() {\n        return this.getAttributeValue('dhcp');\n    }\n    get timezone() {\n        return this.getAttributeValue('timezone');\n    }\n    get zigbeechannel() {\n        return this.getAttributeValue('zigbeechannel');\n    }\n    get UTC() {\n        return this.getAttributeValue('UTC');\n    }\n    get swupdate2() {\n        return this.getAttributeValue('swupdate2');\n    }\n    get whitelist() {\n        return this.getAttributeValue('whitelist');\n    }\n    get internetservices() {\n        return this.getAttributeValue('internetservices');\n    }\n    get backup() {\n        return this.getAttributeValue('backup');\n    }\n    get apiversion() {\n        return this.getAttributeValue('apiversion');\n    }\n    get swversion() {\n        return this.getAttributeValue('swversion');\n    }\n    get mac() {\n        return this.getAttributeValue('mac');\n    }\n    get modelid() {\n        return this.getAttributeValue('modelid');\n    }\n    get bridgeid() {\n        return this.getAttributeValue('bridgeid');\n    }\n    get factorynew() {\n        return this.getAttributeValue('factorynew');\n    }\n    get replacesbridgeid() {\n        return this.getAttributeValue('replacesbridgeid');\n    }\n    get datastoreversion() {\n        return this.getAttributeValue('datastoreversion');\n    }\n    get starterkitid() {\n        return this.getAttributeValue('starterkitid');\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}