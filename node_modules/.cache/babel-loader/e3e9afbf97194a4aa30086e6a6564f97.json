{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Scenes = void 0;\n\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\n\nconst scenes_1 = require(\"./http/endpoints/scenes\");\n\nconst SceneIdPlaceholder_1 = require(\"./placeholders/SceneIdPlaceholder\");\n\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\n\nconst SCENE_ID_PLACEHOLDER = new SceneIdPlaceholder_1.SceneIdPlaceholder();\n\nclass Scenes extends ApiDefinition_1.ApiDefinition {\n  constructor(hueApi) {\n    super(hueApi);\n  }\n\n  getAll() {\n    return this.execute(scenes_1.scenesApi.getAll);\n  } // /**\n  //  * @deprecated since 4.x use getScene(id) instead.\n  //  */\n  // get(id) {\n  //   util.deprecatedFunction('5.x', 'scenes.get(id)', 'Use scenes.getScene(id) instead.');\n  //   return this.getScene(id);\n  // }\n\n\n  getScene(id) {\n    return this.execute(scenes_1.scenesApi.getScene, {\n      id: id\n    });\n  } // /**\n  //  * @deprecated since 4.x use getSceneByName(name) instead.\n  //  */\n  // getByName(name) {\n  //   util.deprecatedFunction('5.x', 'scenes.getByName(name)', 'Use scenes.getSceneByName(name) instead.');\n  //   return this.getSceneByName(name);\n  // }\n\n\n  getSceneByName(name) {\n    return this.getAll().then(allScenes => {\n      return allScenes.filter(scene => scene.name === name);\n    });\n  }\n\n  createScene(scene) {\n    const self = this;\n    return this.execute(scenes_1.scenesApi.createScene, {\n      scene: scene\n    }).then(data => {\n      return self.getScene(data.id);\n    });\n  } // /**\n  //  * @deprecated since 4.x use updateScene(scene) instead.\n  //  */\n  // update(id, scene) {\n  //   util.deprecatedFunction('5.x', 'scenes.update(id, scene)', 'Use scenes.updateScene(scene) instead.');\n  //   return this.execute(scenesApi.updateScene, {id: id, scene: scene});\n  // }\n\n\n  updateScene(scene) {\n    return this.execute(scenes_1.scenesApi.updateScene, {\n      id: scene,\n      scene: scene\n    });\n  }\n  /**\n   * Updates the light state for a specific light in the scene\n   */\n\n\n  updateLightState(id, lightId, sceneLightState) {\n    return this.execute(scenes_1.scenesApi.updateSceneLightState, {\n      id: id,\n      lightStateId: lightId,\n      lightState: sceneLightState\n    });\n  }\n\n  deleteScene(id) {\n    return this.execute(scenes_1.scenesApi.deleteScene, {\n      id: id\n    });\n  }\n\n  activateScene(id) {\n    // Scene activation is done as an intersection of setting a group light state to a scene id, the intersection of the\n    // scene light ids and that of the group is the lights that are targeted to change.\n    const sceneId = SCENE_ID_PLACEHOLDER.getValue({\n      id: id\n    }); // We target the all lights group here, so that all the lights in the scene are targeted.\n\n    return this.hueApi.groups.setGroupState(0, new hue_bridge_model_1.model.GroupState().scene(sceneId));\n  }\n\n}\n\nexports.Scenes = Scenes;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Scenes.js"],"names":["Object","defineProperty","exports","value","Scenes","ApiDefinition_1","require","scenes_1","SceneIdPlaceholder_1","hue_bridge_model_1","SCENE_ID_PLACEHOLDER","SceneIdPlaceholder","ApiDefinition","constructor","hueApi","getAll","execute","scenesApi","getScene","id","getSceneByName","name","then","allScenes","filter","scene","createScene","self","data","updateScene","updateLightState","lightId","sceneLightState","updateSceneLightState","lightStateId","lightState","deleteScene","activateScene","sceneId","getValue","groups","setGroupState","model","GroupState"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Scenes = void 0;\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\nconst scenes_1 = require(\"./http/endpoints/scenes\");\nconst SceneIdPlaceholder_1 = require(\"./placeholders/SceneIdPlaceholder\");\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\nconst SCENE_ID_PLACEHOLDER = new SceneIdPlaceholder_1.SceneIdPlaceholder();\nclass Scenes extends ApiDefinition_1.ApiDefinition {\n    constructor(hueApi) {\n        super(hueApi);\n    }\n    getAll() {\n        return this.execute(scenes_1.scenesApi.getAll);\n    }\n    // /**\n    //  * @deprecated since 4.x use getScene(id) instead.\n    //  */\n    // get(id) {\n    //   util.deprecatedFunction('5.x', 'scenes.get(id)', 'Use scenes.getScene(id) instead.');\n    //   return this.getScene(id);\n    // }\n    getScene(id) {\n        return this.execute(scenes_1.scenesApi.getScene, { id: id });\n    }\n    // /**\n    //  * @deprecated since 4.x use getSceneByName(name) instead.\n    //  */\n    // getByName(name) {\n    //   util.deprecatedFunction('5.x', 'scenes.getByName(name)', 'Use scenes.getSceneByName(name) instead.');\n    //   return this.getSceneByName(name);\n    // }\n    getSceneByName(name) {\n        return this.getAll().then((allScenes) => {\n            return allScenes.filter(scene => scene.name === name);\n        });\n    }\n    createScene(scene) {\n        const self = this;\n        return this.execute(scenes_1.scenesApi.createScene, { scene: scene })\n            .then(data => {\n            return self.getScene(data.id);\n        });\n    }\n    // /**\n    //  * @deprecated since 4.x use updateScene(scene) instead.\n    //  */\n    // update(id, scene) {\n    //   util.deprecatedFunction('5.x', 'scenes.update(id, scene)', 'Use scenes.updateScene(scene) instead.');\n    //   return this.execute(scenesApi.updateScene, {id: id, scene: scene});\n    // }\n    updateScene(scene) {\n        return this.execute(scenes_1.scenesApi.updateScene, { id: scene, scene: scene });\n    }\n    /**\n     * Updates the light state for a specific light in the scene\n     */\n    updateLightState(id, lightId, sceneLightState) {\n        return this.execute(scenes_1.scenesApi.updateSceneLightState, { id: id, lightStateId: lightId, lightState: sceneLightState });\n    }\n    deleteScene(id) {\n        return this.execute(scenes_1.scenesApi.deleteScene, { id: id });\n    }\n    activateScene(id) {\n        // Scene activation is done as an intersection of setting a group light state to a scene id, the intersection of the\n        // scene light ids and that of the group is the lights that are targeted to change.\n        const sceneId = SCENE_ID_PLACEHOLDER.getValue({ id: id });\n        // We target the all lights group here, so that all the lights in the scene are targeted.\n        return this.hueApi.groups.setGroupState(0, new hue_bridge_model_1.model.GroupState().scene(sceneId));\n    }\n}\nexports.Scenes = Scenes;\n"]},"metadata":{},"sourceType":"script"}