{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sensors = void 0;\n\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\n\nconst sensors_1 = require(\"./http/endpoints/sensors\");\n\nclass Sensors extends ApiDefinition_1.ApiDefinition {\n  constructor(hueApi) {\n    super(hueApi);\n  }\n\n  getAll() {\n    return this.execute(sensors_1.sensorsApi.getAllSensors);\n  }\n\n  getSensor(id) {\n    return this.execute(sensors_1.sensorsApi.getSensor, {\n      id: id\n    });\n  }\n\n  searchForNew() {\n    return this.execute(sensors_1.sensorsApi.findNewSensors);\n  }\n\n  getNew() {\n    return this.execute(sensors_1.sensorsApi.getNewSensors);\n  }\n\n  renameSensor(sensor) {\n    return this.execute(sensors_1.sensorsApi.updateSensor, {\n      id: sensor,\n      name: sensor.name\n    });\n  }\n  /** Creates a new Sensor (CLIP based) */\n\n\n  createSensor(sensor) {\n    const self = this;\n    return self.execute(sensors_1.sensorsApi.createSensor, {\n      sensor: sensor\n    }).then(data => {\n      // @ts-ignore\n      return self.getSensor(data.id);\n    });\n  }\n\n  deleteSensor(id) {\n    return this.execute(sensors_1.sensorsApi.deleteSensor, {\n      id: id\n    });\n  }\n  /** Will update the configuration attributes of the Sensor in the bridge. */\n\n\n  updateSensorConfig(sensor) {\n    return this.execute(sensors_1.sensorsApi.changeSensorConfig, {\n      id: sensor.id,\n      sensor: sensor\n    });\n  }\n  /**\n   * Will update the state attributes of the Sensor in the bridge.\n   * @param limitToStateNames list of state attributes to limit the update to (should not be needed in practice, was added to get around a bug).\n   */\n\n\n  updateSensorState(sensor, limitToStateNames) {\n    return this.execute(sensors_1.sensorsApi.changeSensorState, {\n      id: sensor.id,\n      sensor: sensor,\n      filterStateNames: limitToStateNames\n    });\n  }\n\n}\n\nexports.Sensors = Sensors;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Sensors.js"],"names":["Object","defineProperty","exports","value","Sensors","ApiDefinition_1","require","sensors_1","ApiDefinition","constructor","hueApi","getAll","execute","sensorsApi","getAllSensors","getSensor","id","searchForNew","findNewSensors","getNew","getNewSensors","renameSensor","sensor","updateSensor","name","createSensor","self","then","data","deleteSensor","updateSensorConfig","changeSensorConfig","updateSensorState","limitToStateNames","changeSensorState","filterStateNames"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,sBAAD,CAA/B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,0BAAD,CAAzB;;AACA,MAAMF,OAAN,SAAsBC,eAAe,CAACG,aAAtC,CAAoD;AAChDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAMA,MAAN;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKC,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBC,aAAlC,CAAP;AACH;;AACDC,EAAAA,SAAS,CAACC,EAAD,EAAK;AACV,WAAO,KAAKJ,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBE,SAAlC,EAA6C;AAAEC,MAAAA,EAAE,EAAEA;AAAN,KAA7C,CAAP;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKL,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBK,cAAlC,CAAP;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKP,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBO,aAAlC,CAAP;AACH;;AACDC,EAAAA,YAAY,CAACC,MAAD,EAAS;AACjB,WAAO,KAAKV,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBU,YAAlC,EAAgD;AAAEP,MAAAA,EAAE,EAAEM,MAAN;AAAcE,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAA3B,KAAhD,CAAP;AACH;AACD;;;AACAC,EAAAA,YAAY,CAACH,MAAD,EAAS;AACjB,UAAMI,IAAI,GAAG,IAAb;AACA,WAAOA,IAAI,CAACd,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBY,YAAlC,EAAgD;AAAEH,MAAAA,MAAM,EAAEA;AAAV,KAAhD,EACFK,IADE,CACIC,IAAD,IAAU;AAChB;AACA,aAAOF,IAAI,CAACX,SAAL,CAAea,IAAI,CAACZ,EAApB,CAAP;AACH,KAJM,CAAP;AAKH;;AACDa,EAAAA,YAAY,CAACb,EAAD,EAAK;AACb,WAAO,KAAKJ,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBgB,YAAlC,EAAgD;AAAEb,MAAAA,EAAE,EAAEA;AAAN,KAAhD,CAAP;AACH;AACD;;;AACAc,EAAAA,kBAAkB,CAACR,MAAD,EAAS;AACvB,WAAO,KAAKV,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBkB,kBAAlC,EAAsD;AAAEf,MAAAA,EAAE,EAAEM,MAAM,CAACN,EAAb;AAAiBM,MAAAA,MAAM,EAAEA;AAAzB,KAAtD,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIU,EAAAA,iBAAiB,CAACV,MAAD,EAASW,iBAAT,EAA4B;AACzC,WAAO,KAAKrB,OAAL,CAAaL,SAAS,CAACM,UAAV,CAAqBqB,iBAAlC,EAAqD;AACxDlB,MAAAA,EAAE,EAAEM,MAAM,CAACN,EAD6C;AAExDM,MAAAA,MAAM,EAAEA,MAFgD;AAGxDa,MAAAA,gBAAgB,EAAEF;AAHsC,KAArD,CAAP;AAKH;;AA7C+C;;AA+CpD/B,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Sensors = void 0;\nconst ApiDefinition_1 = require(\"./http/ApiDefinition\");\nconst sensors_1 = require(\"./http/endpoints/sensors\");\nclass Sensors extends ApiDefinition_1.ApiDefinition {\n    constructor(hueApi) {\n        super(hueApi);\n    }\n    getAll() {\n        return this.execute(sensors_1.sensorsApi.getAllSensors);\n    }\n    getSensor(id) {\n        return this.execute(sensors_1.sensorsApi.getSensor, { id: id });\n    }\n    searchForNew() {\n        return this.execute(sensors_1.sensorsApi.findNewSensors);\n    }\n    getNew() {\n        return this.execute(sensors_1.sensorsApi.getNewSensors);\n    }\n    renameSensor(sensor) {\n        return this.execute(sensors_1.sensorsApi.updateSensor, { id: sensor, name: sensor.name });\n    }\n    /** Creates a new Sensor (CLIP based) */\n    createSensor(sensor) {\n        const self = this;\n        return self.execute(sensors_1.sensorsApi.createSensor, { sensor: sensor })\n            .then((data) => {\n            // @ts-ignore\n            return self.getSensor(data.id);\n        });\n    }\n    deleteSensor(id) {\n        return this.execute(sensors_1.sensorsApi.deleteSensor, { id: id });\n    }\n    /** Will update the configuration attributes of the Sensor in the bridge. */\n    updateSensorConfig(sensor) {\n        return this.execute(sensors_1.sensorsApi.changeSensorConfig, { id: sensor.id, sensor: sensor });\n    }\n    /**\n     * Will update the state attributes of the Sensor in the bridge.\n     * @param limitToStateNames list of state attributes to limit the update to (should not be needed in practice, was added to get around a bug).\n     */\n    updateSensorState(sensor, limitToStateNames) {\n        return this.execute(sensors_1.sensorsApi.changeSensorState, {\n            id: sensor.id,\n            sensor: sensor,\n            filterStateNames: limitToStateNames\n        });\n    }\n}\nexports.Sensors = Sensors;\n"]},"metadata":{},"sourceType":"script"}