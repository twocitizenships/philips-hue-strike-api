{"ast":null,"code":"import { getTimePattern } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { AttributeObject } from '../AttributeObject';\nimport { UInt8Type } from '../types/UInt8Type';\nconst ATTRIBUTES = [new UInt8Type({\n  name: 'hours',\n  min: 0,\n  max: 23\n}), new UInt8Type({\n  name: 'minutes',\n  min: 0,\n  max: 59\n}), new UInt8Type({\n  name: 'seconds',\n  min: 0,\n  max: 59\n})];\nconst TIME_REGEX = new RegExp(getTimePattern());\nexport class HueTime extends AttributeObject {\n  constructor(time) {\n    super(ATTRIBUTES);\n\n    if (time instanceof Date) {\n      this.fromDate(time);\n    } else {\n      this.fromString(time || '00:00:00');\n    }\n  }\n\n  get hours() {\n    return this.getAttributeValue('hours');\n  }\n\n  get hoursString() {\n    return `${this.hours}`.padStart(2, '0');\n  }\n\n  set hours(value) {\n    this.setAttributeValue('hours', value);\n  }\n\n  get minutes() {\n    return this.getAttributeValue('minutes');\n  }\n\n  get minutesString() {\n    return `${this.minutes}`.padStart(2, '0');\n  }\n\n  set minutes(value) {\n    this.setAttributeValue('minutes', value);\n  }\n\n  get seconds() {\n    return this.getAttributeValue('seconds');\n  }\n\n  get secondsString() {\n    return `${this.seconds}`.padStart(2, '0');\n  }\n\n  set seconds(value) {\n    this.setAttributeValue('seconds', value);\n  }\n\n  toString() {\n    return `${this.hoursString}:${this.minutesString}:${this.secondsString}`;\n  }\n\n  fromString(value) {\n    const parsed = TIME_REGEX.exec(value);\n\n    if (parsed) {\n      // @ts-ignore\n      this.hours = parsed.groups.hours; // @ts-ignore\n\n      this.minutes = parsed.groups.minutes; // @ts-ignore\n\n      this.seconds = parsed.groups.seconds;\n    } else {\n      throw new HueBridgeModelError(`Invalid time format string \"${value}\"`);\n    }\n  }\n\n  fromDate(value) {\n    this.hours = value.getUTCHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/HueTime.js"],"names":["getTimePattern","HueBridgeModelError","AttributeObject","UInt8Type","ATTRIBUTES","name","min","max","TIME_REGEX","RegExp","HueTime","constructor","time","Date","fromDate","fromString","hours","getAttributeValue","hoursString","padStart","value","setAttributeValue","minutes","minutesString","seconds","secondsString","toString","parsed","exec","groups","getUTCHours","getMinutes","getSeconds"],"mappings":"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","sourcesContent":["import { getTimePattern } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nimport { AttributeObject } from '../AttributeObject';\nimport { UInt8Type } from '../types/UInt8Type';\nconst ATTRIBUTES = [\n    new UInt8Type({ name: 'hours', min: 0, max: 23 }),\n    new UInt8Type({ name: 'minutes', min: 0, max: 59 }),\n    new UInt8Type({ name: 'seconds', min: 0, max: 59 }),\n];\nconst TIME_REGEX = new RegExp(getTimePattern());\nexport class HueTime extends AttributeObject {\n    constructor(time) {\n        super(ATTRIBUTES);\n        if (time instanceof Date) {\n            this.fromDate(time);\n        }\n        else {\n            this.fromString(time || '00:00:00');\n        }\n    }\n    get hours() {\n        return this.getAttributeValue('hours');\n    }\n    get hoursString() {\n        return `${this.hours}`.padStart(2, '0');\n    }\n    set hours(value) {\n        this.setAttributeValue('hours', value);\n    }\n    get minutes() {\n        return this.getAttributeValue('minutes');\n    }\n    get minutesString() {\n        return `${this.minutes}`.padStart(2, '0');\n    }\n    set minutes(value) {\n        this.setAttributeValue('minutes', value);\n    }\n    get seconds() {\n        return this.getAttributeValue('seconds');\n    }\n    get secondsString() {\n        return `${this.seconds}`.padStart(2, '0');\n    }\n    set seconds(value) {\n        this.setAttributeValue('seconds', value);\n    }\n    toString() {\n        return `${this.hoursString}:${this.minutesString}:${this.secondsString}`;\n    }\n    fromString(value) {\n        const parsed = TIME_REGEX.exec(value);\n        if (parsed) {\n            // @ts-ignore\n            this.hours = parsed.groups.hours;\n            // @ts-ignore\n            this.minutes = parsed.groups.minutes;\n            // @ts-ignore\n            this.seconds = parsed.groups.seconds;\n        }\n        else {\n            throw new HueBridgeModelError(`Invalid time format string \"${value}\"`);\n        }\n    }\n    fromDate(value) {\n        this.hours = value.getUTCHours();\n        this.minutes = value.getMinutes();\n        this.seconds = value.getSeconds();\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}