{"ast":null,"code":"import { getOperator } from './operators';\nimport { HueBridgeModelError } from '../../../HueBridgeModelError';\nexport class RuleCondition {\n  constructor(data) {\n    // this.populate(data);\n    this.address = data.address;\n    this.value = data.value;\n    const resolvedOperator = getOperator(data.operator);\n\n    if (!resolvedOperator) {\n      throw new HueBridgeModelError(`Failed to resolve a rule condition operator for '${data.operator}'`);\n    }\n\n    this.operator = resolvedOperator;\n  } // get address() {\n  //   return this._address;\n  // }\n  // get operator() {\n  //   return this._operator;\n  // }\n  // setOperator(op: RuleConditionOperator) {\n  //   const matchedOperator: RuleConditionOperator | null = getOperator(op);\n  //   if (!matchedOperator) {\n  //     throw new HueBridgeModelError('A valid RuleConditionOperator must be provided.');\n  //   } else {\n  //     this.operator = matchedOperator\n  //   }\n  // }\n  // get value() {\n  //   return this._value;\n  // }\n  //\n  // set value(val) {\n  //   this._value = val;\n  // }\n\n\n  get payload() {\n    const result = {\n      address: this.address,\n      operator: this.operator.payload\n    };\n\n    if (this.value !== null && this.value !== undefined) {\n      // The bridge API will only accept string values currently, 28/09/2019\n      // @ts-ignore\n      result['value'] = `${this.value}`;\n    }\n\n    return result;\n  } // populate(data: RuleConditionData) {\n  //   let address = null\n  //     , operator = null\n  //     , value = null\n  //   ;\n  //\n  //   if (data) {\n  //     address = data.address || null;\n  //     operator = getOperator(data.operator || null);\n  //     value = (data.value !== undefined && data.value !== null) ? data.value : null;\n  //   }\n  //\n  //   this.address = address;\n  //   this._operator = operator;\n  //   this.value = value;\n  //\n  //   return this;\n  // }\n\n\n  toString() {\n    return JSON.stringify(this.payload);\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/rules/conditions/RuleCondition.js"],"names":["getOperator","HueBridgeModelError","RuleCondition","constructor","data","address","value","resolvedOperator","operator","payload","result","undefined","toString","JSON","stringify"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd;AACA,SAAKC,OAAL,GAAeD,IAAI,CAACC,OAApB;AACA,SAAKC,KAAL,GAAaF,IAAI,CAACE,KAAlB;AACA,UAAMC,gBAAgB,GAAGP,WAAW,CAACI,IAAI,CAACI,QAAN,CAApC;;AACA,QAAI,CAACD,gBAAL,EAAuB;AACnB,YAAM,IAAIN,mBAAJ,CAAyB,oDAAmDG,IAAI,CAACI,QAAS,GAA1F,CAAN;AACH;;AACD,SAAKA,QAAL,GAAgBD,gBAAhB;AACH,GAVsB,CAWvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACW,MAAPE,OAAO,GAAG;AACV,UAAMC,MAAM,GAAG;AACXL,MAAAA,OAAO,EAAE,KAAKA,OADH;AAEXG,MAAAA,QAAQ,EAAE,KAAKA,QAAL,CAAcC;AAFb,KAAf;;AAIA,QAAI,KAAKH,KAAL,KAAe,IAAf,IAAuB,KAAKA,KAAL,KAAeK,SAA1C,EAAqD;AACjD;AACA;AACAD,MAAAA,MAAM,CAAC,OAAD,CAAN,GAAmB,GAAE,KAAKJ,KAAM,EAAhC;AACH;;AACD,WAAOI,MAAP;AACH,GA3CsB,CA4CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,EAAAA,QAAQ,GAAG;AACP,WAAOC,IAAI,CAACC,SAAL,CAAe,KAAKL,OAApB,CAAP;AACH;;AAhEsB;AAkE3B","sourcesContent":["import { getOperator } from './operators';\nimport { HueBridgeModelError } from '../../../HueBridgeModelError';\nexport class RuleCondition {\n    constructor(data) {\n        // this.populate(data);\n        this.address = data.address;\n        this.value = data.value;\n        const resolvedOperator = getOperator(data.operator);\n        if (!resolvedOperator) {\n            throw new HueBridgeModelError(`Failed to resolve a rule condition operator for '${data.operator}'`);\n        }\n        this.operator = resolvedOperator;\n    }\n    // get address() {\n    //   return this._address;\n    // }\n    // get operator() {\n    //   return this._operator;\n    // }\n    // setOperator(op: RuleConditionOperator) {\n    //   const matchedOperator: RuleConditionOperator | null = getOperator(op);\n    //   if (!matchedOperator) {\n    //     throw new HueBridgeModelError('A valid RuleConditionOperator must be provided.');\n    //   } else {\n    //     this.operator = matchedOperator\n    //   }\n    // }\n    // get value() {\n    //   return this._value;\n    // }\n    //\n    // set value(val) {\n    //   this._value = val;\n    // }\n    get payload() {\n        const result = {\n            address: this.address,\n            operator: this.operator.payload,\n        };\n        if (this.value !== null && this.value !== undefined) {\n            // The bridge API will only accept string values currently, 28/09/2019\n            // @ts-ignore\n            result['value'] = `${this.value}`;\n        }\n        return result;\n    }\n    // populate(data: RuleConditionData) {\n    //   let address = null\n    //     , operator = null\n    //     , value = null\n    //   ;\n    //\n    //   if (data) {\n    //     address = data.address || null;\n    //     operator = getOperator(data.operator || null);\n    //     value = (data.value !== undefined && data.value !== null) ? data.value : null;\n    //   }\n    //\n    //   this.address = address;\n    //   this._operator = operator;\n    //   this.value = value;\n    //\n    //   return this;\n    // }\n    toString() {\n        return JSON.stringify(this.payload);\n    }\n}\n;\n"]},"metadata":{},"sourceType":"module"}