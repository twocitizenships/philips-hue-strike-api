{"ast":null,"code":"import { BridgeTime } from './BridgeTime';\nimport { HueTime } from './HueTime';\nimport { RANDOMIZED_TIMER_REGEX } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nexport class RandomizedTimer extends BridgeTime {\n  constructor(value) {\n    super();\n    this._time = new HueTime();\n    this._random = new HueTime();\n\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  static matches(value) {\n    return RANDOMIZED_TIMER_REGEX.test(value);\n  }\n\n  set value(value) {\n    if (value instanceof RandomizedTimer) {\n      // Re-enter this function using the string value\n      this.value = value.toString();\n    } else {\n      const parsed = RANDOMIZED_TIMER_REGEX.exec(value);\n\n      if (parsed) {\n        const time = this._time; // @ts-ignore\n\n        time.hours = parsed.groups.hours; // @ts-ignore\n\n        time.minutes = parsed.groups.minutes; // @ts-ignore\n\n        time.seconds = parsed.groups.seconds;\n        const random = this._random; // @ts-ignore\n\n        random.hours = parsed.groups.randomhours; // @ts-ignore\n\n        random.minutes = parsed.groups.randomminutes; // @ts-ignore\n\n        random.seconds = parsed.groups.randomseconds;\n      } else {\n        throw new HueBridgeModelError(`Cannot create a RandomizedTimer from ${value}`);\n      }\n    }\n  }\n\n  hours(value) {\n    this._time.hours = value;\n    return this;\n  }\n\n  minutes(value) {\n    this._time.minutes = value;\n    return this;\n  }\n\n  seconds(value) {\n    this._time.seconds = value;\n    return this;\n  }\n\n  randomHours(value) {\n    this._random.hours = value;\n    return this;\n  }\n\n  randomMinutes(value) {\n    this._random.minutes = value;\n    return this;\n  }\n\n  randomSeconds(value) {\n    this._random.seconds = value;\n    return this;\n  }\n\n  toString() {\n    return `PT${this._time.toString()}A${this._random.toString()}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/time/RandomizedTimer.js"],"names":["BridgeTime","HueTime","RANDOMIZED_TIMER_REGEX","HueBridgeModelError","RandomizedTimer","constructor","value","_time","_random","matches","test","toString","parsed","exec","time","hours","groups","minutes","seconds","random","randomhours","randomminutes","randomseconds","randomHours","randomMinutes","randomSeconds"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,sBAAT,QAAuC,YAAvC;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,OAAO,MAAMC,eAAN,SAA8BJ,UAA9B,CAAyC;AAC5CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,SAAKC,KAAL,GAAa,IAAIN,OAAJ,EAAb;AACA,SAAKO,OAAL,GAAe,IAAIP,OAAJ,EAAf;;AACA,QAAIK,KAAJ,EAAW;AACP,WAAKA,KAAL,GAAaA,KAAb;AACH;AACJ;;AACa,SAAPG,OAAO,CAACH,KAAD,EAAQ;AAClB,WAAOJ,sBAAsB,CAACQ,IAAvB,CAA4BJ,KAA5B,CAAP;AACH;;AACQ,MAALA,KAAK,CAACA,KAAD,EAAQ;AACb,QAAIA,KAAK,YAAYF,eAArB,EAAsC;AAClC;AACA,WAAKE,KAAL,GAAaA,KAAK,CAACK,QAAN,EAAb;AACH,KAHD,MAIK;AACD,YAAMC,MAAM,GAAGV,sBAAsB,CAACW,IAAvB,CAA4BP,KAA5B,CAAf;;AACA,UAAIM,MAAJ,EAAY;AACR,cAAME,IAAI,GAAG,KAAKP,KAAlB,CADQ,CAER;;AACAO,QAAAA,IAAI,CAACC,KAAL,GAAaH,MAAM,CAACI,MAAP,CAAcD,KAA3B,CAHQ,CAIR;;AACAD,QAAAA,IAAI,CAACG,OAAL,GAAeL,MAAM,CAACI,MAAP,CAAcC,OAA7B,CALQ,CAMR;;AACAH,QAAAA,IAAI,CAACI,OAAL,GAAeN,MAAM,CAACI,MAAP,CAAcE,OAA7B;AACA,cAAMC,MAAM,GAAG,KAAKX,OAApB,CARQ,CASR;;AACAW,QAAAA,MAAM,CAACJ,KAAP,GAAeH,MAAM,CAACI,MAAP,CAAcI,WAA7B,CAVQ,CAWR;;AACAD,QAAAA,MAAM,CAACF,OAAP,GAAiBL,MAAM,CAACI,MAAP,CAAcK,aAA/B,CAZQ,CAaR;;AACAF,QAAAA,MAAM,CAACD,OAAP,GAAiBN,MAAM,CAACI,MAAP,CAAcM,aAA/B;AACH,OAfD,MAgBK;AACD,cAAM,IAAInB,mBAAJ,CAAyB,wCAAuCG,KAAM,EAAtE,CAAN;AACH;AACJ;AACJ;;AACDS,EAAAA,KAAK,CAACT,KAAD,EAAQ;AACT,SAAKC,KAAL,CAAWQ,KAAX,GAAmBT,KAAnB;AACA,WAAO,IAAP;AACH;;AACDW,EAAAA,OAAO,CAACX,KAAD,EAAQ;AACX,SAAKC,KAAL,CAAWU,OAAX,GAAqBX,KAArB;AACA,WAAO,IAAP;AACH;;AACDY,EAAAA,OAAO,CAACZ,KAAD,EAAQ;AACX,SAAKC,KAAL,CAAWW,OAAX,GAAqBZ,KAArB;AACA,WAAO,IAAP;AACH;;AACDiB,EAAAA,WAAW,CAACjB,KAAD,EAAQ;AACf,SAAKE,OAAL,CAAaO,KAAb,GAAqBT,KAArB;AACA,WAAO,IAAP;AACH;;AACDkB,EAAAA,aAAa,CAAClB,KAAD,EAAQ;AACjB,SAAKE,OAAL,CAAaS,OAAb,GAAuBX,KAAvB;AACA,WAAO,IAAP;AACH;;AACDmB,EAAAA,aAAa,CAACnB,KAAD,EAAQ;AACjB,SAAKE,OAAL,CAAaU,OAAb,GAAuBZ,KAAvB;AACA,WAAO,IAAP;AACH;;AACDK,EAAAA,QAAQ,GAAG;AACP,WAAQ,KAAI,KAAKJ,KAAL,CAAWI,QAAX,EAAsB,IAAG,KAAKH,OAAL,CAAaG,QAAb,EAAwB,EAA7D;AACH;;AAlE2C","sourcesContent":["import { BridgeTime } from './BridgeTime';\nimport { HueTime } from './HueTime';\nimport { RANDOMIZED_TIMER_REGEX } from './timeUtil';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nexport class RandomizedTimer extends BridgeTime {\n    constructor(value) {\n        super();\n        this._time = new HueTime();\n        this._random = new HueTime();\n        if (value) {\n            this.value = value;\n        }\n    }\n    static matches(value) {\n        return RANDOMIZED_TIMER_REGEX.test(value);\n    }\n    set value(value) {\n        if (value instanceof RandomizedTimer) {\n            // Re-enter this function using the string value\n            this.value = value.toString();\n        }\n        else {\n            const parsed = RANDOMIZED_TIMER_REGEX.exec(value);\n            if (parsed) {\n                const time = this._time;\n                // @ts-ignore\n                time.hours = parsed.groups.hours;\n                // @ts-ignore\n                time.minutes = parsed.groups.minutes;\n                // @ts-ignore\n                time.seconds = parsed.groups.seconds;\n                const random = this._random;\n                // @ts-ignore\n                random.hours = parsed.groups.randomhours;\n                // @ts-ignore\n                random.minutes = parsed.groups.randomminutes;\n                // @ts-ignore\n                random.seconds = parsed.groups.randomseconds;\n            }\n            else {\n                throw new HueBridgeModelError(`Cannot create a RandomizedTimer from ${value}`);\n            }\n        }\n    }\n    hours(value) {\n        this._time.hours = value;\n        return this;\n    }\n    minutes(value) {\n        this._time.minutes = value;\n        return this;\n    }\n    seconds(value) {\n        this._time.seconds = value;\n        return this;\n    }\n    randomHours(value) {\n        this._random.hours = value;\n        return this;\n    }\n    randomMinutes(value) {\n        this._random.minutes = value;\n        return this;\n    }\n    randomSeconds(value) {\n        this._random.seconds = value;\n        return this;\n    }\n    toString() {\n        return `PT${this._time.toString()}A${this._random.toString()}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}