{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Remote = void 0;\n\nconst ApiError_1 = require(\"../ApiError\");\n\nclass Remote {\n  constructor(hueApi) {\n    this._hueApi = hueApi;\n  }\n  /**\n   * Exchanges the code for a token on the remote API.\n   * @param code The code to exchange for a new token.\n   * @returns The token from the remote API.\n   */\n\n\n  getToken(code) {\n    return this._getRemoteApi().getToken(code);\n  }\n  /**\n   * Will refresh the OAuth tokens on the remote API, exchanging the existing ones for new ones.\n   * @returns The new access and refresh tokens.\n   */\n\n\n  refreshTokens() {\n    const self = this,\n          remoteApi = self._getRemoteApi();\n\n    if (!remoteApi.refreshToken) {\n      return Promise.reject(new ApiError_1.ApiError('Cannot refresh tokens without a refresh token.'));\n    }\n\n    return remoteApi.refreshTokens(remoteApi.refreshToken).then(tokens => {\n      // Update the authentication details for existing connections\n      self._getHueApi()._getTransport().refreshAuthorizationHeader(tokens.accessToken.value);\n\n      return tokens;\n    });\n  }\n  /**\n   * Creates a new remote user for the Hue Bridge.\n   *\n   * @param remoteBridgeId The is of the hue bridge on the remote portal\n   * @param deviceType The user device type identifier.\n   */\n\n\n  createRemoteUser(remoteBridgeId, deviceType) {\n    return this._getRemoteApi().createRemoteUsername(remoteBridgeId, deviceType);\n  }\n  /** Obtains the remote access credentials that are in use for the remote connection. */\n\n\n  getRemoteAccessCredentials() {\n    const config = this._getHueApi()._getConfig();\n\n    const result = {\n      clientId: config.clientId,\n      clientSecret: config.clientSecret,\n      username: config.username,\n      tokens: {}\n    };\n\n    if (config.accessToken) {\n      // @ts-ignore it is set above\n      result.tokens.access = {\n        value: config.accessToken,\n        expiresAt: config.accessTokenExpiry\n      };\n    }\n\n    if (config.refreshToken) {\n      // @ts-ignore it is set above\n      result.tokens.refresh = {\n        value: config.refreshToken,\n        expiresAt: config.refreshTokenExpiry\n      };\n    }\n\n    return result;\n  }\n  /** @private */\n\n\n  _getHueApi() {\n    return this._hueApi;\n  }\n  /** @private */\n\n\n  _getRemoteApi() {\n    return this._getHueApi()._getRemote();\n  }\n\n}\n\nexports.Remote = Remote;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/Remote.js"],"names":["Object","defineProperty","exports","value","Remote","ApiError_1","require","constructor","hueApi","_hueApi","getToken","code","_getRemoteApi","refreshTokens","self","remoteApi","refreshToken","Promise","reject","ApiError","then","tokens","_getHueApi","_getTransport","refreshAuthorizationHeader","accessToken","createRemoteUser","remoteBridgeId","deviceType","createRemoteUsername","getRemoteAccessCredentials","config","_getConfig","result","clientId","clientSecret","username","access","expiresAt","accessTokenExpiry","refresh","refreshTokenExpiry","_getRemote"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMF,MAAN,CAAa;AACTG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,OAAL,GAAeD,MAAf;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,WAAO,KAAKC,aAAL,GAAqBF,QAArB,CAA8BC,IAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,aAAa,GAAG;AACZ,UAAMC,IAAI,GAAG,IAAb;AAAA,UAAmBC,SAAS,GAAGD,IAAI,CAACF,aAAL,EAA/B;;AACA,QAAI,CAACG,SAAS,CAACC,YAAf,EAA6B;AACzB,aAAOC,OAAO,CAACC,MAAR,CAAe,IAAIb,UAAU,CAACc,QAAf,CAAwB,gDAAxB,CAAf,CAAP;AACH;;AACD,WAAOJ,SAAS,CAACF,aAAV,CAAwBE,SAAS,CAACC,YAAlC,EACFI,IADE,CACIC,MAAD,IAAY;AAClB;AACAP,MAAAA,IAAI,CAACQ,UAAL,GAAkBC,aAAlB,GAAkCC,0BAAlC,CAA6DH,MAAM,CAACI,WAAP,CAAmBtB,KAAhF;;AACA,aAAOkB,MAAP;AACH,KALM,CAAP;AAMH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,gBAAgB,CAACC,cAAD,EAAiBC,UAAjB,EAA6B;AACzC,WAAO,KAAKhB,aAAL,GAAqBiB,oBAArB,CAA0CF,cAA1C,EAA0DC,UAA1D,CAAP;AACH;AACD;;;AACAE,EAAAA,0BAA0B,GAAG;AACzB,UAAMC,MAAM,GAAG,KAAKT,UAAL,GAAkBU,UAAlB,EAAf;;AACA,UAAMC,MAAM,GAAG;AACXC,MAAAA,QAAQ,EAAEH,MAAM,CAACG,QADN;AAEXC,MAAAA,YAAY,EAAEJ,MAAM,CAACI,YAFV;AAGXC,MAAAA,QAAQ,EAAEL,MAAM,CAACK,QAHN;AAIXf,MAAAA,MAAM,EAAE;AAJG,KAAf;;AAMA,QAAIU,MAAM,CAACN,WAAX,EAAwB;AACpB;AACAQ,MAAAA,MAAM,CAACZ,MAAP,CAAcgB,MAAd,GAAuB;AACnBlC,QAAAA,KAAK,EAAE4B,MAAM,CAACN,WADK;AAEnBa,QAAAA,SAAS,EAAEP,MAAM,CAACQ;AAFC,OAAvB;AAIH;;AACD,QAAIR,MAAM,CAACf,YAAX,EAAyB;AACrB;AACAiB,MAAAA,MAAM,CAACZ,MAAP,CAAcmB,OAAd,GAAwB;AACpBrC,QAAAA,KAAK,EAAE4B,MAAM,CAACf,YADM;AAEpBsB,QAAAA,SAAS,EAAEP,MAAM,CAACU;AAFE,OAAxB;AAIH;;AACD,WAAOR,MAAP;AACH;AACD;;;AACAX,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKb,OAAZ;AACH;AACD;;;AACAG,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKU,UAAL,GAAkBoB,UAAlB,EAAP;AACH;;AArEQ;;AAuEbxC,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Remote = void 0;\nconst ApiError_1 = require(\"../ApiError\");\nclass Remote {\n    constructor(hueApi) {\n        this._hueApi = hueApi;\n    }\n    /**\n     * Exchanges the code for a token on the remote API.\n     * @param code The code to exchange for a new token.\n     * @returns The token from the remote API.\n     */\n    getToken(code) {\n        return this._getRemoteApi().getToken(code);\n    }\n    /**\n     * Will refresh the OAuth tokens on the remote API, exchanging the existing ones for new ones.\n     * @returns The new access and refresh tokens.\n     */\n    refreshTokens() {\n        const self = this, remoteApi = self._getRemoteApi();\n        if (!remoteApi.refreshToken) {\n            return Promise.reject(new ApiError_1.ApiError('Cannot refresh tokens without a refresh token.'));\n        }\n        return remoteApi.refreshTokens(remoteApi.refreshToken)\n            .then((tokens) => {\n            // Update the authentication details for existing connections\n            self._getHueApi()._getTransport().refreshAuthorizationHeader(tokens.accessToken.value);\n            return tokens;\n        });\n    }\n    /**\n     * Creates a new remote user for the Hue Bridge.\n     *\n     * @param remoteBridgeId The is of the hue bridge on the remote portal\n     * @param deviceType The user device type identifier.\n     */\n    createRemoteUser(remoteBridgeId, deviceType) {\n        return this._getRemoteApi().createRemoteUsername(remoteBridgeId, deviceType);\n    }\n    /** Obtains the remote access credentials that are in use for the remote connection. */\n    getRemoteAccessCredentials() {\n        const config = this._getHueApi()._getConfig();\n        const result = {\n            clientId: config.clientId,\n            clientSecret: config.clientSecret,\n            username: config.username,\n            tokens: {},\n        };\n        if (config.accessToken) {\n            // @ts-ignore it is set above\n            result.tokens.access = {\n                value: config.accessToken,\n                expiresAt: config.accessTokenExpiry\n            };\n        }\n        if (config.refreshToken) {\n            // @ts-ignore it is set above\n            result.tokens.refresh = {\n                value: config.refreshToken,\n                expiresAt: config.refreshTokenExpiry\n            };\n        }\n        return result;\n    }\n    /** @private */\n    _getHueApi() {\n        return this._hueApi;\n    }\n    /** @private */\n    _getRemoteApi() {\n        return this._getHueApi()._getRemote();\n    }\n}\nexports.Remote = Remote;\n"]},"metadata":{},"sourceType":"script"}