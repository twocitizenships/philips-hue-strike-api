{"ast":null,"code":"import { Group } from './Group';\nimport { BooleanType, ChoiceType, ListType, ObjectType, StringType } from '../../types';\nconst ATTRIBUTES = [new StringType({\n  name: 'type',\n  defaultValue: 'Entertainment'\n}), // iOS Hue application is defaulting the types to TV currently, also only TV and Other seem to work out of all the classes\n// Free is a new class from the iOS application that appeared using v2 API, cannot find any definitive reference on these classes so far in official docs\nnew ChoiceType({\n  name: 'class',\n  defaultValue: 'TV',\n  validValues: ['TV', 'Other', 'Free']\n}), new ObjectType({\n  name: 'stream',\n  types: [new StringType({\n    name: 'proxymode'\n  }), new StringType({\n    name: 'proxynode'\n  }), new BooleanType({\n    name: 'active'\n  }), new StringType({\n    name: 'owner'\n  })]\n}), new ObjectType({\n  name: 'locations'\n}), new ListType({\n  name: 'lights',\n  minEntries: 0,\n  entryType: new StringType({\n    name: 'lightId'\n  })\n})];\n/**\n * A Group of lights that can be utilized in an Entertainment situation for streaming.\n *\n * There are limitations on which lights can be added to an Entertainment Group, as they need to support the ability\n * to stream, which requires newer lights in the hue ecosystem.\n */\n\nexport class Entertainment extends Group {\n  constructor(id) {\n    super(ATTRIBUTES, id);\n  }\n\n  set lights(value) {\n    this.setAttributeValue('lights', value);\n  }\n\n  get lights() {\n    return this.getAttributeValue('lights');\n  }\n\n  set class(value) {\n    this.setAttributeValue('class', value);\n  }\n\n  get class() {\n    return this.getAttributeValue('class');\n  }\n\n  get stream() {\n    return this.getAttributeValue('stream');\n  } // TODO consider unpacking this in to something more user friendly\n\n\n  get locations() {\n    return this.getAttributeValue('locations');\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/groups/Entertainment.js"],"names":["Group","BooleanType","ChoiceType","ListType","ObjectType","StringType","ATTRIBUTES","name","defaultValue","validValues","types","minEntries","entryType","Entertainment","constructor","id","lights","value","setAttributeValue","getAttributeValue","class","stream","locations"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,QAAlC,EAA4CC,UAA5C,EAAwDC,UAAxD,QAA0E,aAA1E;AACA,MAAMC,UAAU,GAAG,CACf,IAAID,UAAJ,CAAe;AAAEE,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,YAAY,EAAE;AAA9B,CAAf,CADe,EAEf;AACA;AACA,IAAIN,UAAJ,CAAe;AAAEK,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,YAAY,EAAE,IAA/B;AAAqCC,EAAAA,WAAW,EAAE,CAAC,IAAD,EAAO,OAAP,EAAgB,MAAhB;AAAlD,CAAf,CAJe,EAKf,IAAIL,UAAJ,CAAe;AACXG,EAAAA,IAAI,EAAE,QADK;AAEXG,EAAAA,KAAK,EAAE,CACH,IAAIL,UAAJ,CAAe;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAf,CADG,EAEH,IAAIF,UAAJ,CAAe;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAf,CAFG,EAGH,IAAIN,WAAJ,CAAgB;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAAhB,CAHG,EAIH,IAAIF,UAAJ,CAAe;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAf,CAJG;AAFI,CAAf,CALe,EAcf,IAAIH,UAAJ,CAAe;AAAEG,EAAAA,IAAI,EAAE;AAAR,CAAf,CAde,EAef,IAAIJ,QAAJ,CAAa;AAAEI,EAAAA,IAAI,EAAE,QAAR;AAAkBI,EAAAA,UAAU,EAAE,CAA9B;AAAiCC,EAAAA,SAAS,EAAE,IAAIP,UAAJ,CAAe;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAf;AAA5C,CAAb,CAfe,CAAnB;AAiBA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,aAAN,SAA4Bb,KAA5B,CAAkC;AACrCc,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,UAAMT,UAAN,EAAkBS,EAAlB;AACH;;AACS,MAANC,MAAM,CAACC,KAAD,EAAQ;AACd,SAAKC,iBAAL,CAAuB,QAAvB,EAAiCD,KAAjC;AACH;;AACS,MAAND,MAAM,GAAG;AACT,WAAO,KAAKG,iBAAL,CAAuB,QAAvB,CAAP;AACH;;AACQ,MAALC,KAAK,CAACH,KAAD,EAAQ;AACb,SAAKC,iBAAL,CAAuB,OAAvB,EAAgCD,KAAhC;AACH;;AACQ,MAALG,KAAK,GAAG;AACR,WAAO,KAAKD,iBAAL,CAAuB,OAAvB,CAAP;AACH;;AACS,MAANE,MAAM,GAAG;AACT,WAAO,KAAKF,iBAAL,CAAuB,QAAvB,CAAP;AACH,GAlBoC,CAmBrC;;;AACa,MAATG,SAAS,GAAG;AACZ,WAAO,KAAKH,iBAAL,CAAuB,WAAvB,CAAP;AACH;;AAtBoC","sourcesContent":["import { Group } from './Group';\nimport { BooleanType, ChoiceType, ListType, ObjectType, StringType } from '../../types';\nconst ATTRIBUTES = [\n    new StringType({ name: 'type', defaultValue: 'Entertainment' }),\n    // iOS Hue application is defaulting the types to TV currently, also only TV and Other seem to work out of all the classes\n    // Free is a new class from the iOS application that appeared using v2 API, cannot find any definitive reference on these classes so far in official docs\n    new ChoiceType({ name: 'class', defaultValue: 'TV', validValues: ['TV', 'Other', 'Free'] }),\n    new ObjectType({\n        name: 'stream',\n        types: [\n            new StringType({ name: 'proxymode' }),\n            new StringType({ name: 'proxynode' }),\n            new BooleanType({ name: 'active' }),\n            new StringType({ name: 'owner' }),\n        ]\n    }),\n    new ObjectType({ name: 'locations' }),\n    new ListType({ name: 'lights', minEntries: 0, entryType: new StringType({ name: 'lightId' }) }),\n];\n/**\n * A Group of lights that can be utilized in an Entertainment situation for streaming.\n *\n * There are limitations on which lights can be added to an Entertainment Group, as they need to support the ability\n * to stream, which requires newer lights in the hue ecosystem.\n */\nexport class Entertainment extends Group {\n    constructor(id) {\n        super(ATTRIBUTES, id);\n    }\n    set lights(value) {\n        this.setAttributeValue('lights', value);\n    }\n    get lights() {\n        return this.getAttributeValue('lights');\n    }\n    set class(value) {\n        this.setAttributeValue('class', value);\n    }\n    get class() {\n        return this.getAttributeValue('class');\n    }\n    get stream() {\n        return this.getAttributeValue('stream');\n    }\n    // TODO consider unpacking this in to something more user friendly\n    get locations() {\n        return this.getAttributeValue('locations');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}