{"ast":null,"code":"import ky from 'ky';\nexport const INVOICE_STATE_UNPAID = 'UNPAID';\nexport const INVOICE_STATE_PAID = 'PAID';\nvar client; // Set up an API client.\n\nconst init = (apiUrl, apikey) => {\n  client = ky.create({\n    prefixUrl: apiUrl,\n    headers: {\n      'Authorization': `Bearer ${apikey}`,\n      'Content-Type': 'application/json'\n    }\n  });\n};\n\nconst getHandle = () => {\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n  return params.handle;\n};\n\nconst getProfile = async handle => {\n  return await client.get(`accounts/handle/${handle}/profile`).json();\n};\n\nconst createInvoice = async function (handle, amount, currency) {\n  let description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"Tip!\";\n  return await client.post(`invoices/handle/${handle}`, {\n    json: {\n      amount: {\n        currency: currency,\n        amount: amount\n      }\n    }\n  }).json();\n};\n\nconst createQuote = async invoiceId => {\n  return await client.post(`invoices/${invoiceId}/quote`).json();\n};\n\nconst getInvoice = async invoiceId => {\n  return await client.get(`invoices/${invoiceId}`).json();\n};\n\nconst pollInvoice = async (invoice, until) => {\n  return await poll(() => getInvoice(invoice.invoiceId), _ref => {\n    let {\n      state\n    } = _ref;\n    return state == INVOICE_STATE_PAID;\n  }, until, 1000).catch(err => console.error(err));\n};\n\nconst setCurrecyOptions = () => {\n  var fragment = document.createDocumentFragment();\n  profile.currencies.forEach(function (curerncy, index) {\n    var opt = document.createElement('option');\n    opt.innerHTML = curerncy.currency;\n    opt.value = curerncy.currency;\n    fragment.appendChild(opt);\n  });\n  currencyField.appendChild(fragment);\n  currencyField.value = profile.currencies.find(c => c.isDefaultCurrency).currency;\n};\n\nexport const api = {\n  init,\n  getHandle,\n  getProfile,\n  createInvoice,\n  createQuote,\n  getInvoice,\n  pollInvoice,\n  setCurrecyOptions\n};","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/src/lib/api.js"],"names":["ky","INVOICE_STATE_UNPAID","INVOICE_STATE_PAID","client","init","apiUrl","apikey","create","prefixUrl","headers","getHandle","urlSearchParams","URLSearchParams","window","location","search","params","Object","fromEntries","entries","handle","getProfile","get","json","createInvoice","amount","currency","description","post","createQuote","invoiceId","getInvoice","pollInvoice","invoice","until","poll","state","catch","err","console","error","setCurrecyOptions","fragment","document","createDocumentFragment","profile","currencies","forEach","curerncy","index","opt","createElement","innerHTML","value","appendChild","currencyField","find","c","isDefaultCurrency","api"],"mappings":"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","sourcesContent":["import ky from 'ky';\n\nexport const INVOICE_STATE_UNPAID = 'UNPAID';\nexport const INVOICE_STATE_PAID = 'PAID';\n\nvar client;\n\n// Set up an API client.\nconst init = (apiUrl, apikey) => {\n  client = ky.create({\n    prefixUrl: apiUrl,\n    headers: {\n      'Authorization': `Bearer ${apikey}`,\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nconst getHandle = () => {\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n  return params.handle;\n}\n\nconst getProfile = async handle => {\n  return await client\n    .get(`accounts/handle/${handle}/profile`)\n    .json();\n}\n\nconst createInvoice = async (handle, amount, currency, description = \"Tip!\") => {\n  return await client\n    .post(`invoices/handle/${handle}`, { json: { amount: { currency: currency, amount: amount } } })\n    .json();\n}\n\nconst createQuote = async invoiceId => {\n  return await client\n    .post(`invoices/${invoiceId}/quote`)\n    .json();\n}\n\nconst getInvoice = async invoiceId => {\n  return await client\n    .get(`invoices/${invoiceId}`)\n    .json();\n}\n\nconst pollInvoice = async (invoice, until) => {\n  return await poll(() => getInvoice(invoice.invoiceId), ({ state }) => state == INVOICE_STATE_PAID, until, 1000)\n    .catch(err => console.error(err));\n}\n\nconst setCurrecyOptions = () => {\n  var fragment = document.createDocumentFragment();\n  profile.currencies.forEach(function(curerncy, index) {\n     var opt = document.createElement('option');\n     opt.innerHTML = curerncy.currency;\n     opt.value = curerncy.currency;\n     fragment.appendChild(opt);\n  });\n  currencyField.appendChild(fragment);\n  currencyField.value = profile.currencies.find(c => c.isDefaultCurrency).currency;\n}\n\nexport const api = {\n  init,\n  getHandle,\n  getProfile,\n  createInvoice,\n  createQuote,\n  getInvoice,\n  pollInvoice,\n  setCurrecyOptions\n};\n"]},"metadata":{},"sourceType":"module"}