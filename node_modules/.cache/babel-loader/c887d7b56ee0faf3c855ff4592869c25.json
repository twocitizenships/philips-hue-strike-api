{"ast":null,"code":"import { HueBridgeModelError } from './HueBridgeModelError'; //TODO remove\n// export interface ModelAttributes {\n//   [key: string]: Type<any>\n// }\n\nexport class AttributeObject {\n  constructor(attributes) {\n    this.data = {};\n    this.attributes = {};\n    attributes.forEach(attr => {\n      this.attributes[attr.name] = attr;\n    });\n  }\n\n  getAttributeValue(name) {\n    const definition = this.attributes[name];\n\n    if (definition) {\n      return definition.getValue(this.data[name]);\n    } else {\n      throw new HueBridgeModelError(`Requesting value for invalid attribute '${name}'`);\n    }\n  }\n\n  setAttributeValue(name, value) {\n    const definition = this.attributes[name];\n\n    if (definition) {\n      this.data[definition.name] = definition.getValue(value);\n    } else {\n      throw new HueBridgeModelError(`Attempted to set attribute '${name}', but do not have a definition registered`);\n    }\n\n    return this;\n  }\n\n  toString() {\n    return `${this.constructor.name}`;\n  } //TODO rename this\n\n\n  get _bridgeData() {\n    // Return a copy so that it cannot be modified from outside\n    return Object.assign({}, this.data);\n  }\n\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/AttributeObject.js"],"names":["HueBridgeModelError","AttributeObject","constructor","attributes","data","forEach","attr","name","getAttributeValue","definition","getValue","setAttributeValue","value","toString","_bridgeData","Object","assign"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,uBAApC,C,CACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKD,UAAL,GAAkB,EAAlB;AACAA,IAAAA,UAAU,CAACE,OAAX,CAAmBC,IAAI,IAAI;AACvB,WAAKH,UAAL,CAAgBG,IAAI,CAACC,IAArB,IAA6BD,IAA7B;AACH,KAFD;AAGH;;AACDE,EAAAA,iBAAiB,CAACD,IAAD,EAAO;AACpB,UAAME,UAAU,GAAG,KAAKN,UAAL,CAAgBI,IAAhB,CAAnB;;AACA,QAAIE,UAAJ,EAAgB;AACZ,aAAOA,UAAU,CAACC,QAAX,CAAoB,KAAKN,IAAL,CAAUG,IAAV,CAApB,CAAP;AACH,KAFD,MAGK;AACD,YAAM,IAAIP,mBAAJ,CAAyB,2CAA0CO,IAAK,GAAxE,CAAN;AACH;AACJ;;AACDI,EAAAA,iBAAiB,CAACJ,IAAD,EAAOK,KAAP,EAAc;AAC3B,UAAMH,UAAU,GAAG,KAAKN,UAAL,CAAgBI,IAAhB,CAAnB;;AACA,QAAIE,UAAJ,EAAgB;AACZ,WAAKL,IAAL,CAAUK,UAAU,CAACF,IAArB,IAA6BE,UAAU,CAACC,QAAX,CAAoBE,KAApB,CAA7B;AACH,KAFD,MAGK;AACD,YAAM,IAAIZ,mBAAJ,CAAyB,+BAA8BO,IAAK,4CAA5D,CAAN;AACH;;AACD,WAAO,IAAP;AACH;;AACDM,EAAAA,QAAQ,GAAG;AACP,WAAQ,GAAE,KAAKX,WAAL,CAAiBK,IAAK,EAAhC;AACH,GA7BwB,CA8BzB;;;AACe,MAAXO,WAAW,GAAG;AACd;AACA,WAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKZ,IAAvB,CAAP;AACH;;AAlCwB","sourcesContent":["import { HueBridgeModelError } from './HueBridgeModelError';\n//TODO remove\n// export interface ModelAttributes {\n//   [key: string]: Type<any>\n// }\nexport class AttributeObject {\n    constructor(attributes) {\n        this.data = {};\n        this.attributes = {};\n        attributes.forEach(attr => {\n            this.attributes[attr.name] = attr;\n        });\n    }\n    getAttributeValue(name) {\n        const definition = this.attributes[name];\n        if (definition) {\n            return definition.getValue(this.data[name]);\n        }\n        else {\n            throw new HueBridgeModelError(`Requesting value for invalid attribute '${name}'`);\n        }\n    }\n    setAttributeValue(name, value) {\n        const definition = this.attributes[name];\n        if (definition) {\n            this.data[definition.name] = definition.getValue(value);\n        }\n        else {\n            throw new HueBridgeModelError(`Attempted to set attribute '${name}', but do not have a definition registered`);\n        }\n        return this;\n    }\n    toString() {\n        return `${this.constructor.name}`;\n    }\n    //TODO rename this\n    get _bridgeData() {\n        // Return a copy so that it cannot be modified from outside\n        return Object.assign({}, this.data);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}