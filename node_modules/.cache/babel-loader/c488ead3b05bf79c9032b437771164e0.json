{"ast":null,"code":"import * as ConditionOperators from './model/rules/conditions/operators';\nimport { TYPES_TO_MODEL } from './model/mapTypesToModel';\nimport { getOperator } from './model/rules/conditions/operators';\nimport { HueBridgeModelError } from './HueBridgeModelError';\nimport { BridgeConfiguration } from './model/BridgeConfiguration';\nimport { Group } from './model/groups/Group';\nimport { Sensor } from './model/sensors/Sensor';\nimport { Light } from './model/Light';\nimport { Scene } from './model/scenes/Scene';\nimport { GroupScene } from './model/scenes/GroupScene';\nimport { LightScene } from './model/scenes/LightScene';\nimport { Rule } from './model/rules/Rule';\nimport { ResourceLink } from './model/ResourceLink';\nimport { Schedule } from './model/Schedule';\nimport { LightState } from './model/lightstate/LightState';\nimport { GroupState } from './model/lightstate/GroupState';\nimport { SceneLightState } from './model/lightstate/SceneLightState';\nimport { SensorCondition } from './model/rules/conditions/SensorCondition';\nimport { GroupCondition } from './model/rules/conditions/GroupCondition';\nimport { LightStateAction } from './model/actions/LightStateAction';\nimport { GroupStateAction } from './model/actions/GroupStateAction';\nimport { SensorStateAction } from './model/actions/SensorStateAction';\nimport { SceneAction } from './model/actions/SceneAction';\nexport * from './HueBridgeModelError';\nexport * from './model/BridgeObject';\nexport * from './model/BridgeObjectWithId';\nexport * from './model/ResourceLink';\nexport * from './model/Light';\nexport * from './model/Schedule';\nexport * from './model/groups/Group';\nexport * from './model/groups/Entertainment';\nexport * from './model/groups/LightGroup';\nexport * from './model/groups/Lightsource';\nexport * from './model/groups/Luminaire';\nexport * from './model/groups/Room';\nexport * from './model/groups/Zone';\nexport * from './model/scenes/GroupScene';\nexport * from './model/scenes/LightScene';\nexport * from './model/lightstate/LightState';\nexport * from './model/lightstate/GroupState';\nexport * from './model/lightstate/SceneLightState';\nexport * from './model/sensors/Sensor';\nexport * from './model/sensors/CLIPGenericFlag';\nexport * from './model/sensors/CLIPGenericStatus';\nexport * from './model/sensors/CLIPHumidity';\nexport * from './model/sensors/CLIPLightlevel';\nexport * from './model/sensors/CLIPOpenClose';\nexport * from './model/sensors/CLIPPresence';\nexport * from './model/sensors/CLIPSwitch';\nexport * from './model/sensors/CLIPTemperature';\nexport * from './model/sensors/Daylight';\nexport * from './model/sensors/ZGPSwitch';\nexport * from './model/sensors/ZLLLightlevel';\nexport * from './model/sensors/ZLLPresence';\nexport * from './model/sensors/ZLLSwitch';\nexport * from './model/sensors/ZLLTemperature';\nexport * from './model/sensors/GeoFence';\nexport * from './model/rules/Rule';\nexport * from './model/rules/conditions/SensorCondition';\nexport * from './model/rules/conditions/GroupCondition';\nexport * from './model/rules/conditions/RuleCondition';\nexport * from './model/actions/LightStateAction';\nexport * from './model/actions/SensorStateAction';\nexport * from './model/actions/GroupStateAction';\nexport * from './model/actions/SceneAction';\nexport * from './model/scenes/Scene';\nexport * from './model/BridgeConfiguration';\nexport * from './model/Capabilities';\nexport const lightStates = {\n  LightState: LightState,\n  GroupLightState: GroupState,\n  SceneLightState: SceneLightState\n};\nexport const ruleConditionOperators = {\n  equals: ConditionOperators.Equals,\n  changed: ConditionOperators.Dx,\n  changedDelayed: ConditionOperators.Ddx,\n  greaterThan: ConditionOperators.GreaterThan,\n  lessThan: ConditionOperators.LessThan,\n  stable: ConditionOperators.Stable,\n  notStable: ConditionOperators.NotStable,\n  in: ConditionOperators.In,\n  notIn: ConditionOperators.NotIn,\n  getOperator\n};\nexport const actions = {\n  light: function (light) {\n    return new LightStateAction(light);\n  },\n  group: function (group) {\n    return new GroupStateAction(group);\n  },\n  sensor: function (sensor) {\n    return new SensorStateAction(sensor);\n  },\n  scene: function (scene) {\n    return new SceneAction(scene);\n  }\n};\nexport const ruleConditions = {\n  sensor: function (sensor) {\n    return new SensorCondition(sensor);\n  },\n  group: function (id) {\n    return new GroupCondition(id);\n  }\n};\nexport const instanceChecks = {\n  isLightInstance: function (obj) {\n    return obj instanceof Light;\n  },\n  isSceneInstance: function (obj) {\n    return obj instanceof Scene;\n  },\n  isGroupSceneInstance: function (obj) {\n    return obj instanceof GroupScene;\n  },\n  isLightSceneInstance: function (obj) {\n    return obj instanceof LightScene;\n  },\n  isRuleInstance: function (obj) {\n    return obj instanceof Rule;\n  },\n  isResourceLinkInstance: function (obj) {\n    return obj instanceof ResourceLink;\n  },\n  isScheduleInstance: function (obj) {\n    return obj instanceof Schedule;\n  },\n  isSensorInstance: function (obj) {\n    return obj instanceof Sensor;\n  },\n  isGroupInstance: function (obj) {\n    return obj instanceof Group;\n  },\n  isBridgeConfigurationInstance: function (obj) {\n    return obj instanceof BridgeConfiguration;\n  }\n};\nexport function createFromBridge(type, id, payload) {\n  const ModelObject = TYPES_TO_MODEL[type];\n\n  if (!ModelObject) {\n    throw new HueBridgeModelError(`Unknown type '${type}' to create Bridge Model Object from.`);\n  } // @ts-ignore\n\n\n  const instance = new ModelObject(id);\n\n  instance._populate(payload);\n\n  return instance;\n} //TODO defined a type for object\n\nexport function createFromJson(payload) {\n  const payloadDataType = payload.node_hue_api;\n\n  if (!payloadDataType) {\n    throw new HueBridgeModelError('Missing payload Data Type definition');\n  }\n\n  const type = payloadDataType.type,\n        version = payloadDataType.version || 0;\n\n  if (!type) {\n    throw new HueBridgeModelError('Invalid payload, missing type from the Data Type');\n  }\n\n  if (version === 0) {\n    throw new HueBridgeModelError(`Unsupported version number ${version}, for JSON payload`);\n  } // Default to using bridge data construction until we diverge\n\n\n  return createFromBridge(type, payload.id, payload);\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model.js"],"names":["ConditionOperators","TYPES_TO_MODEL","getOperator","HueBridgeModelError","BridgeConfiguration","Group","Sensor","Light","Scene","GroupScene","LightScene","Rule","ResourceLink","Schedule","LightState","GroupState","SceneLightState","SensorCondition","GroupCondition","LightStateAction","GroupStateAction","SensorStateAction","SceneAction","lightStates","GroupLightState","ruleConditionOperators","equals","Equals","changed","Dx","changedDelayed","Ddx","greaterThan","GreaterThan","lessThan","LessThan","stable","Stable","notStable","NotStable","in","In","notIn","NotIn","actions","light","group","sensor","scene","ruleConditions","id","instanceChecks","isLightInstance","obj","isSceneInstance","isGroupSceneInstance","isLightSceneInstance","isRuleInstance","isResourceLinkInstance","isScheduleInstance","isSensorInstance","isGroupInstance","isBridgeConfigurationInstance","createFromBridge","type","payload","ModelObject","instance","_populate","createFromJson","payloadDataType","node_hue_api","version"],"mappings":"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","sourcesContent":["import * as ConditionOperators from './model/rules/conditions/operators';\nimport { TYPES_TO_MODEL } from './model/mapTypesToModel';\nimport { getOperator } from './model/rules/conditions/operators';\nimport { HueBridgeModelError } from './HueBridgeModelError';\nimport { BridgeConfiguration } from './model/BridgeConfiguration';\nimport { Group } from './model/groups/Group';\nimport { Sensor } from './model/sensors/Sensor';\nimport { Light } from './model/Light';\nimport { Scene } from './model/scenes/Scene';\nimport { GroupScene } from './model/scenes/GroupScene';\nimport { LightScene } from './model/scenes/LightScene';\nimport { Rule } from './model/rules/Rule';\nimport { ResourceLink } from './model/ResourceLink';\nimport { Schedule } from './model/Schedule';\nimport { LightState } from './model/lightstate/LightState';\nimport { GroupState } from './model/lightstate/GroupState';\nimport { SceneLightState } from './model/lightstate/SceneLightState';\nimport { SensorCondition } from './model/rules/conditions/SensorCondition';\nimport { GroupCondition } from './model/rules/conditions/GroupCondition';\nimport { LightStateAction } from './model/actions/LightStateAction';\nimport { GroupStateAction } from './model/actions/GroupStateAction';\nimport { SensorStateAction } from './model/actions/SensorStateAction';\nimport { SceneAction } from './model/actions/SceneAction';\nexport * from './HueBridgeModelError';\nexport * from './model/BridgeObject';\nexport * from './model/BridgeObjectWithId';\nexport * from './model/ResourceLink';\nexport * from './model/Light';\nexport * from './model/Schedule';\nexport * from './model/groups/Group';\nexport * from './model/groups/Entertainment';\nexport * from './model/groups/LightGroup';\nexport * from './model/groups/Lightsource';\nexport * from './model/groups/Luminaire';\nexport * from './model/groups/Room';\nexport * from './model/groups/Zone';\nexport * from './model/scenes/GroupScene';\nexport * from './model/scenes/LightScene';\nexport * from './model/lightstate/LightState';\nexport * from './model/lightstate/GroupState';\nexport * from './model/lightstate/SceneLightState';\nexport * from './model/sensors/Sensor';\nexport * from './model/sensors/CLIPGenericFlag';\nexport * from './model/sensors/CLIPGenericStatus';\nexport * from './model/sensors/CLIPHumidity';\nexport * from './model/sensors/CLIPLightlevel';\nexport * from './model/sensors/CLIPOpenClose';\nexport * from './model/sensors/CLIPPresence';\nexport * from './model/sensors/CLIPSwitch';\nexport * from './model/sensors/CLIPTemperature';\nexport * from './model/sensors/Daylight';\nexport * from './model/sensors/ZGPSwitch';\nexport * from './model/sensors/ZLLLightlevel';\nexport * from './model/sensors/ZLLPresence';\nexport * from './model/sensors/ZLLSwitch';\nexport * from './model/sensors/ZLLTemperature';\nexport * from './model/sensors/GeoFence';\nexport * from './model/rules/Rule';\nexport * from './model/rules/conditions/SensorCondition';\nexport * from './model/rules/conditions/GroupCondition';\nexport * from './model/rules/conditions/RuleCondition';\nexport * from './model/actions/LightStateAction';\nexport * from './model/actions/SensorStateAction';\nexport * from './model/actions/GroupStateAction';\nexport * from './model/actions/SceneAction';\nexport * from './model/scenes/Scene';\nexport * from './model/BridgeConfiguration';\nexport * from './model/Capabilities';\nexport const lightStates = {\n    LightState: LightState,\n    GroupLightState: GroupState,\n    SceneLightState: SceneLightState,\n};\nexport const ruleConditionOperators = {\n    equals: ConditionOperators.Equals,\n    changed: ConditionOperators.Dx,\n    changedDelayed: ConditionOperators.Ddx,\n    greaterThan: ConditionOperators.GreaterThan,\n    lessThan: ConditionOperators.LessThan,\n    stable: ConditionOperators.Stable,\n    notStable: ConditionOperators.NotStable,\n    in: ConditionOperators.In,\n    notIn: ConditionOperators.NotIn,\n    getOperator,\n};\nexport const actions = {\n    light: function (light) {\n        return new LightStateAction(light);\n    },\n    group: function (group) {\n        return new GroupStateAction(group);\n    },\n    sensor: function (sensor) {\n        return new SensorStateAction(sensor);\n    },\n    scene: function (scene) {\n        return new SceneAction(scene);\n    }\n};\nexport const ruleConditions = {\n    sensor: function (sensor) {\n        return new SensorCondition(sensor);\n    },\n    group: function (id) {\n        return new GroupCondition(id);\n    },\n};\nexport const instanceChecks = {\n    isLightInstance: function (obj) {\n        return obj instanceof Light;\n    },\n    isSceneInstance: function (obj) {\n        return obj instanceof Scene;\n    },\n    isGroupSceneInstance: function (obj) {\n        return obj instanceof GroupScene;\n    },\n    isLightSceneInstance: function (obj) {\n        return obj instanceof LightScene;\n    },\n    isRuleInstance: function (obj) {\n        return obj instanceof Rule;\n    },\n    isResourceLinkInstance: function (obj) {\n        return obj instanceof ResourceLink;\n    },\n    isScheduleInstance: function (obj) {\n        return obj instanceof Schedule;\n    },\n    isSensorInstance: function (obj) {\n        return obj instanceof Sensor;\n    },\n    isGroupInstance: function (obj) {\n        return obj instanceof Group;\n    },\n    isBridgeConfigurationInstance: function (obj) {\n        return obj instanceof BridgeConfiguration;\n    },\n};\nexport function createFromBridge(type, id, payload) {\n    const ModelObject = TYPES_TO_MODEL[type];\n    if (!ModelObject) {\n        throw new HueBridgeModelError(`Unknown type '${type}' to create Bridge Model Object from.`);\n    }\n    // @ts-ignore\n    const instance = new ModelObject(id);\n    instance._populate(payload);\n    return instance;\n}\n//TODO defined a type for object\nexport function createFromJson(payload) {\n    const payloadDataType = payload.node_hue_api;\n    if (!payloadDataType) {\n        throw new HueBridgeModelError('Missing payload Data Type definition');\n    }\n    const type = payloadDataType.type, version = payloadDataType.version || 0;\n    if (!type) {\n        throw new HueBridgeModelError('Invalid payload, missing type from the Data Type');\n    }\n    if (version === 0) {\n        throw new HueBridgeModelError(`Unsupported version number ${version}, for JSON payload`);\n    }\n    // Default to using bridge data construction until we diverge\n    return createFromBridge(type, payload.id, payload);\n}\n"]},"metadata":{},"sourceType":"module"}