{"ast":null,"code":"import { BooleanType, ChoiceType, FloatType, Int16Type, Int8Type, ListType, StringType, UInt16Type, UInt8Type } from '../../types';\nexport default {\n  on: new BooleanType({\n    name: 'on',\n    optional: true\n  }),\n  bri: new UInt8Type({\n    name: 'bri',\n    min: 1,\n    max: 254,\n    optional: true\n  }),\n  hue: new UInt16Type({\n    name: 'hue',\n    optional: true\n  }),\n  sat: new UInt8Type({\n    name: 'sat',\n    min: 0,\n    max: 254,\n    optional: true\n  }),\n  xy: new ListType({\n    name: 'xy',\n    minEntries: 2,\n    maxEntries: 2,\n    entryType: new FloatType({\n      name: 'xyValue',\n      min: 0,\n      max: 1,\n      optional: false\n    }),\n    optional: true\n  }),\n  ct: new UInt16Type({\n    name: 'ct',\n    min: 153,\n    max: 500,\n    optional: true\n  }),\n  alert: new ChoiceType({\n    name: 'alert',\n    defaultValue: 'none',\n    validValues: ['none', 'select', 'lselect'],\n    optional: true\n  }),\n  effect: new ChoiceType({\n    name: 'effect',\n    defaultValue: 'none',\n    validValues: ['none', 'colorloop'],\n    optional: true\n  }),\n  transitiontime: new UInt16Type({\n    name: 'transitiontime',\n    defaultValue: 4,\n    optional: true\n  }),\n  bri_inc: new Int8Type({\n    name: 'bri_inc',\n    min: -254,\n    max: 254,\n    optional: true\n  }),\n  sat_inc: new Int8Type({\n    name: 'sat_inc',\n    min: -254,\n    max: 254,\n    optional: true\n  }),\n  hue_inc: new Int16Type({\n    name: 'hue_inc',\n    min: -65534,\n    max: 65534,\n    optional: true\n  }),\n  ct_inc: new Int16Type({\n    name: 'ct_inc',\n    min: -65534,\n    max: 65534,\n    optional: true\n  }),\n  xy_inc: new ListType({\n    name: 'xy_inc',\n    minEntries: 2,\n    maxEntries: 2,\n    entryType: new FloatType({\n      name: 'xyValue',\n      min: -0.5,\n      max: 0.5,\n      optional: false\n    }),\n    optional: true\n  }),\n  scene: new StringType({\n    name: 'scene',\n    optional: true\n  }),\n  // RGB\n  // This is a custom state, and can only be applied we we know the light details, so is stored like a normal state\n  rgb: new ListType({\n    name: 'rgb',\n    minEntries: 3,\n    maxEntries: 3,\n    entryType: new UInt8Type({\n      name: 'rgbValue'\n    })\n  })\n}; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// Types that are not part of the Hue Bridge, but provide useful helpers\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// // Brightness Percentage\n// brightness: parameterTypes.int8({\n//   name: 'brightness',\n//   min: 0,\n//   max: 100\n// }),\n//\n// // Saturation Percentage\n// saturation: parameterTypes.int8({\n//   name: 'saturation',\n//   min: 0,\n//   max: 100\n// }),\n// // RGB\n// // This is a custom state, and can only be applied we we know the light details, so is stored like a normal state\n//   export const rgb = new ListType({\n//     name: 'rgb',\n//     minEntries: 3,\n//     maxEntries: 3,\n//     entryType: new UInt8Type({\n//       name: 'rgbValue'\n//     }),\n//   });\n//TODO HSB, HSL, although these are conversions to the normal attributes which are done in code currently","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/lightstate/stateTypes.js"],"names":["BooleanType","ChoiceType","FloatType","Int16Type","Int8Type","ListType","StringType","UInt16Type","UInt8Type","on","name","optional","bri","min","max","hue","sat","xy","minEntries","maxEntries","entryType","ct","alert","defaultValue","validValues","effect","transitiontime","bri_inc","sat_inc","hue_inc","ct_inc","xy_inc","scene","rgb"],"mappings":"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","sourcesContent":["import { BooleanType, ChoiceType, FloatType, Int16Type, Int8Type, ListType, StringType, UInt16Type, UInt8Type } from '../../types';\nexport default {\n    on: new BooleanType({\n        name: 'on',\n        optional: true\n    }),\n    bri: new UInt8Type({\n        name: 'bri',\n        min: 1,\n        max: 254,\n        optional: true\n    }),\n    hue: new UInt16Type({\n        name: 'hue',\n        optional: true\n    }),\n    sat: new UInt8Type({\n        name: 'sat',\n        min: 0,\n        max: 254,\n        optional: true\n    }),\n    xy: new ListType({\n        name: 'xy',\n        minEntries: 2,\n        maxEntries: 2,\n        entryType: new FloatType({\n            name: 'xyValue',\n            min: 0,\n            max: 1,\n            optional: false\n        }),\n        optional: true\n    }),\n    ct: new UInt16Type({\n        name: 'ct',\n        min: 153,\n        max: 500,\n        optional: true\n    }),\n    alert: new ChoiceType({\n        name: 'alert',\n        defaultValue: 'none',\n        validValues: ['none', 'select', 'lselect'],\n        optional: true\n    }),\n    effect: new ChoiceType({\n        name: 'effect',\n        defaultValue: 'none',\n        validValues: ['none', 'colorloop'],\n        optional: true\n    }),\n    transitiontime: new UInt16Type({\n        name: 'transitiontime',\n        defaultValue: 4,\n        optional: true\n    }),\n    bri_inc: new Int8Type({\n        name: 'bri_inc',\n        min: -254,\n        max: 254,\n        optional: true\n    }),\n    sat_inc: new Int8Type({\n        name: 'sat_inc',\n        min: -254,\n        max: 254,\n        optional: true\n    }),\n    hue_inc: new Int16Type({\n        name: 'hue_inc',\n        min: -65534,\n        max: 65534,\n        optional: true\n    }),\n    ct_inc: new Int16Type({\n        name: 'ct_inc',\n        min: -65534,\n        max: 65534,\n        optional: true\n    }),\n    xy_inc: new ListType({\n        name: 'xy_inc',\n        minEntries: 2,\n        maxEntries: 2,\n        entryType: new FloatType({\n            name: 'xyValue',\n            min: -0.5,\n            max: 0.5,\n            optional: false,\n        }),\n        optional: true\n    }),\n    scene: new StringType({\n        name: 'scene',\n        optional: true\n    }),\n    // RGB\n    // This is a custom state, and can only be applied we we know the light details, so is stored like a normal state\n    rgb: new ListType({\n        name: 'rgb',\n        minEntries: 3,\n        maxEntries: 3,\n        entryType: new UInt8Type({\n            name: 'rgbValue'\n        })\n    })\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// Types that are not part of the Hue Bridge, but provide useful helpers\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// // Brightness Percentage\n// brightness: parameterTypes.int8({\n//   name: 'brightness',\n//   min: 0,\n//   max: 100\n// }),\n//\n// // Saturation Percentage\n// saturation: parameterTypes.int8({\n//   name: 'saturation',\n//   min: 0,\n//   max: 100\n// }),\n// // RGB\n// // This is a custom state, and can only be applied we we know the light details, so is stored like a normal state\n//   export const rgb = new ListType({\n//     name: 'rgb',\n//     minEntries: 3,\n//     maxEntries: 3,\n//     entryType: new UInt8Type({\n//       name: 'rgbValue'\n//     }),\n//   });\n//TODO HSB, HSL, although these are conversions to the normal attributes which are done in code currently\n"]},"metadata":{},"sourceType":"module"}