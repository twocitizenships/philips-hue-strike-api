{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sensorsApi = void 0;\n\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\n\nconst SensorIdPlaceholder_1 = require(\"../../placeholders/SensorIdPlaceholder\");\n\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\n\nconst ApiError_1 = require(\"../../../ApiError\");\n\nconst util_1 = require(\"../../../util\");\n\nconst SENSOR_ID_PLACEHOLDER = new SensorIdPlaceholder_1.SensorIdPlaceholder();\nconst instanceChecks = hue_bridge_model_1.model.instanceChecks;\nconst sensorsApi = {\n  getAllSensors: new ApiEndpoint_1.ApiEndpoint().get().uri('/<username>/sensors').acceptJson().pureJson().postProcess(buildAllSensorsResult),\n  createSensor: new ApiEndpoint_1.ApiEndpoint().post().uri('/<username>/sensors').payload(buildSensorPayload).acceptJson().pureJson().postProcess(buildCreateSensorResult),\n  findNewSensors: new ApiEndpoint_1.ApiEndpoint().post().uri('/<username>/sensors').acceptJson().pureJson().postProcess(util_1.wasSuccessful),\n  getNewSensors: new ApiEndpoint_1.ApiEndpoint().get().uri('/<username>/sensors/new').acceptJson().pureJson().postProcess(createNewSensorResponse),\n  getSensor: new ApiEndpoint_1.ApiEndpoint().get().uri('/<username>/sensors/<id>').placeholder(SENSOR_ID_PLACEHOLDER).acceptJson().pureJson().postProcess(createSensorResponse),\n  updateSensor: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/sensors/<id>').placeholder(SENSOR_ID_PLACEHOLDER).payload(createUpdateSensorPayload).acceptJson().pureJson().postProcess(util_1.wasSuccessful),\n  deleteSensor: new ApiEndpoint_1.ApiEndpoint().delete().uri('/<username>/sensors/<id>').placeholder(SENSOR_ID_PLACEHOLDER).acceptJson().pureJson().postProcess(util_1.wasSuccessful),\n  changeSensorConfig: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/sensors/<id>/config').placeholder(SENSOR_ID_PLACEHOLDER).payload(buildSensorConfigPayload).acceptJson().pureJson().postProcess(util_1.wasSuccessful),\n  changeSensorState: new ApiEndpoint_1.ApiEndpoint().put().uri('/<username>/sensors/<id>/state').placeholder(SENSOR_ID_PLACEHOLDER).payload(buildSensorStatePayload).acceptJson().pureJson().postProcess(util_1.extractUpdatedAttributes)\n};\nexports.sensorsApi = sensorsApi;\n\nfunction buildSensorPayload(parameters) {\n  let sensor = parameters.sensor;\n\n  if (!sensor) {\n    throw new ApiError_1.ApiError('Sensor to create must be provided');\n  } else if (!instanceChecks.isSensorInstance(sensor)) {\n    throw new ApiError_1.ApiError('You must provide a valid instance of a Sensor to be created');\n  }\n\n  const payload = sensor.getHuePayload();\n  delete payload.id;\n  return {\n    type: 'application/json',\n    body: payload\n  };\n}\n\nfunction buildAllSensorsResult(data) {\n  const result = [];\n\n  if (data) {\n    Object.keys(data).forEach(id => {\n      const sensorData = data[id],\n            type = sensorData.type.toLowerCase();\n\n      try {\n        const sensor = hue_bridge_model_1.model.createFromBridge(type, id, sensorData);\n        result.push(sensor);\n      } catch (err) {\n        //TODO need better handling error reporting for this, but this stops us breaking when Hue invents new\n        // undocumented sensors.\n        console.error(`Failed to create sensor from bridge model: ${err}; payload: ${JSON.stringify(sensorData)}`);\n      }\n    });\n  }\n\n  return result;\n}\n\nfunction createSensorResponse(data, requestParameters) {\n  const id = SENSOR_ID_PLACEHOLDER.getValue(requestParameters),\n        type = data.type.toLowerCase();\n  return hue_bridge_model_1.model.createFromBridge(type, id, data);\n}\n\nfunction createNewSensorResponse(data) {\n  const result = {\n    lastscan: '',\n    sensors: []\n  };\n\n  if (data) {\n    Object.keys(data).forEach(key => {\n      if (key === 'lastscan') {\n        result.lastscan = data.lastscan;\n      } else {\n        const type = data.type.toLowerCase(),\n              sensor = hue_bridge_model_1.model.createFromBridge(type, key, data[key]);\n        result.sensors.push(sensor);\n      }\n    });\n  }\n\n  return result;\n}\n\nfunction createUpdateSensorPayload(data) {\n  if (!data || !data.name) {\n    throw new ApiError_1.ApiError('A name must be provided');\n  }\n\n  return {\n    type: 'application/json',\n    body: {\n      name: data.name\n    }\n  };\n}\n\nfunction buildCreateSensorResult(result) {\n  const hueErrors = (0, util_1.parseErrors)(result); //TODO not sure if this still gets called as the request handles some of this\n\n  if (hueErrors) {\n    throw new ApiError_1.ApiError(`Error creating group: ${hueErrors[0].description}`, hueErrors[0]);\n  }\n\n  return {\n    id: Number(result[0].success.id)\n  };\n}\n\nfunction buildSensorConfigPayload(parameters) {\n  if (!parameters || !parameters.sensor) {\n    throw new ApiError_1.ApiError('A sensor must be provided');\n  }\n\n  if (!instanceChecks.isSensorInstance(parameters.sensor)) {\n    throw new ApiError_1.ApiError('Sensor parameter is not a valid type, must be a Sensor');\n  }\n\n  const sensor = parameters.sensor.getHuePayload(),\n        body = sensor.config; // Remove any parameters that we are not able to set, at least from experience at the time of writing\n\n  delete body.reachable;\n  return {\n    type: 'application/json',\n    body: body\n  };\n}\n\nfunction buildSensorStatePayload(parameters) {\n  if (!parameters || !parameters.sensor) {\n    throw new ApiError_1.ApiError('A sensor must be provided');\n  }\n\n  if (!instanceChecks.isSensorInstance(parameters.sensor)) {\n    throw new ApiError_1.ApiError('Sensor parameter is not a valid type, must be a Sensor');\n  }\n\n  let body;\n\n  if (parameters.filterStateNames) {\n    body = {}; // Limit the updates to the specified stateNames\n\n    parameters.filterStateNames.forEach(stateName => {\n      body.stateName = parameters.sensor.state[stateName];\n    });\n  } else {\n    // Just copy all the state values, as these have not been filtered\n    body = parameters.sensor.getHuePayload().state;\n  } // Remove any parameters that we are not able to set, at least from experience at the time of writing\n\n\n  delete body.lastupdated;\n  return {\n    type: 'application/json',\n    body: body\n  };\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/http/endpoints/sensors.js"],"names":["Object","defineProperty","exports","value","sensorsApi","hue_bridge_model_1","require","SensorIdPlaceholder_1","ApiEndpoint_1","ApiError_1","util_1","SENSOR_ID_PLACEHOLDER","SensorIdPlaceholder","instanceChecks","model","getAllSensors","ApiEndpoint","get","uri","acceptJson","pureJson","postProcess","buildAllSensorsResult","createSensor","post","payload","buildSensorPayload","buildCreateSensorResult","findNewSensors","wasSuccessful","getNewSensors","createNewSensorResponse","getSensor","placeholder","createSensorResponse","updateSensor","put","createUpdateSensorPayload","deleteSensor","delete","changeSensorConfig","buildSensorConfigPayload","changeSensorState","buildSensorStatePayload","extractUpdatedAttributes","parameters","sensor","ApiError","isSensorInstance","getHuePayload","id","type","body","data","result","keys","forEach","sensorData","toLowerCase","createFromBridge","push","err","console","error","JSON","stringify","requestParameters","getValue","lastscan","sensors","key","name","hueErrors","parseErrors","description","Number","success","config","reachable","filterStateNames","stateName","state","lastupdated"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sensorsApi = void 0;\nconst hue_bridge_model_1 = require(\"@peter-murray/hue-bridge-model\");\nconst SensorIdPlaceholder_1 = require(\"../../placeholders/SensorIdPlaceholder\");\nconst ApiEndpoint_1 = require(\"./ApiEndpoint\");\nconst ApiError_1 = require(\"../../../ApiError\");\nconst util_1 = require(\"../../../util\");\nconst SENSOR_ID_PLACEHOLDER = new SensorIdPlaceholder_1.SensorIdPlaceholder();\nconst instanceChecks = hue_bridge_model_1.model.instanceChecks;\nconst sensorsApi = {\n    getAllSensors: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .uri('/<username>/sensors')\n        .acceptJson()\n        .pureJson()\n        .postProcess(buildAllSensorsResult),\n    createSensor: new ApiEndpoint_1.ApiEndpoint()\n        .post()\n        .uri('/<username>/sensors')\n        .payload(buildSensorPayload)\n        .acceptJson()\n        .pureJson()\n        .postProcess(buildCreateSensorResult),\n    findNewSensors: new ApiEndpoint_1.ApiEndpoint()\n        .post()\n        .uri('/<username>/sensors')\n        .acceptJson()\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    getNewSensors: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .uri('/<username>/sensors/new')\n        .acceptJson()\n        .pureJson()\n        .postProcess(createNewSensorResponse),\n    getSensor: new ApiEndpoint_1.ApiEndpoint()\n        .get()\n        .uri('/<username>/sensors/<id>')\n        .placeholder(SENSOR_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n        .postProcess(createSensorResponse),\n    updateSensor: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/sensors/<id>')\n        .placeholder(SENSOR_ID_PLACEHOLDER)\n        .payload(createUpdateSensorPayload)\n        .acceptJson()\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    deleteSensor: new ApiEndpoint_1.ApiEndpoint()\n        .delete()\n        .uri('/<username>/sensors/<id>')\n        .placeholder(SENSOR_ID_PLACEHOLDER)\n        .acceptJson()\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    changeSensorConfig: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/sensors/<id>/config')\n        .placeholder(SENSOR_ID_PLACEHOLDER)\n        .payload(buildSensorConfigPayload)\n        .acceptJson()\n        .pureJson()\n        .postProcess(util_1.wasSuccessful),\n    changeSensorState: new ApiEndpoint_1.ApiEndpoint()\n        .put()\n        .uri('/<username>/sensors/<id>/state')\n        .placeholder(SENSOR_ID_PLACEHOLDER)\n        .payload(buildSensorStatePayload)\n        .acceptJson()\n        .pureJson()\n        .postProcess(util_1.extractUpdatedAttributes),\n};\nexports.sensorsApi = sensorsApi;\nfunction buildSensorPayload(parameters) {\n    let sensor = parameters.sensor;\n    if (!sensor) {\n        throw new ApiError_1.ApiError('Sensor to create must be provided');\n    }\n    else if (!instanceChecks.isSensorInstance(sensor)) {\n        throw new ApiError_1.ApiError('You must provide a valid instance of a Sensor to be created');\n    }\n    const payload = sensor.getHuePayload();\n    delete payload.id;\n    return {\n        type: 'application/json',\n        body: payload\n    };\n}\nfunction buildAllSensorsResult(data) {\n    const result = [];\n    if (data) {\n        Object.keys(data).forEach(id => {\n            const sensorData = data[id], type = sensorData.type.toLowerCase();\n            try {\n                const sensor = hue_bridge_model_1.model.createFromBridge(type, id, sensorData);\n                result.push(sensor);\n            }\n            catch (err) {\n                //TODO need better handling error reporting for this, but this stops us breaking when Hue invents new\n                // undocumented sensors.\n                console.error(`Failed to create sensor from bridge model: ${err}; payload: ${JSON.stringify(sensorData)}`);\n            }\n        });\n    }\n    return result;\n}\nfunction createSensorResponse(data, requestParameters) {\n    const id = SENSOR_ID_PLACEHOLDER.getValue(requestParameters), type = data.type.toLowerCase();\n    return hue_bridge_model_1.model.createFromBridge(type, id, data);\n}\nfunction createNewSensorResponse(data) {\n    const result = {\n        lastscan: '',\n        sensors: []\n    };\n    if (data) {\n        Object.keys(data).forEach(key => {\n            if (key === 'lastscan') {\n                result.lastscan = data.lastscan;\n            }\n            else {\n                const type = data.type.toLowerCase(), sensor = hue_bridge_model_1.model.createFromBridge(type, key, data[key]);\n                result.sensors.push(sensor);\n            }\n        });\n    }\n    return result;\n}\nfunction createUpdateSensorPayload(data) {\n    if (!data || !data.name) {\n        throw new ApiError_1.ApiError('A name must be provided');\n    }\n    return {\n        type: 'application/json',\n        body: {\n            name: data.name\n        }\n    };\n}\nfunction buildCreateSensorResult(result) {\n    const hueErrors = (0, util_1.parseErrors)(result); //TODO not sure if this still gets called as the request handles some of this\n    if (hueErrors) {\n        throw new ApiError_1.ApiError(`Error creating group: ${hueErrors[0].description}`, hueErrors[0]);\n    }\n    return { id: Number(result[0].success.id) };\n}\nfunction buildSensorConfigPayload(parameters) {\n    if (!parameters || !parameters.sensor) {\n        throw new ApiError_1.ApiError('A sensor must be provided');\n    }\n    if (!instanceChecks.isSensorInstance(parameters.sensor)) {\n        throw new ApiError_1.ApiError('Sensor parameter is not a valid type, must be a Sensor');\n    }\n    const sensor = parameters.sensor.getHuePayload(), body = sensor.config;\n    // Remove any parameters that we are not able to set, at least from experience at the time of writing\n    delete body.reachable;\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\nfunction buildSensorStatePayload(parameters) {\n    if (!parameters || !parameters.sensor) {\n        throw new ApiError_1.ApiError('A sensor must be provided');\n    }\n    if (!instanceChecks.isSensorInstance(parameters.sensor)) {\n        throw new ApiError_1.ApiError('Sensor parameter is not a valid type, must be a Sensor');\n    }\n    let body;\n    if (parameters.filterStateNames) {\n        body = {};\n        // Limit the updates to the specified stateNames\n        parameters.filterStateNames.forEach((stateName) => {\n            body.stateName = parameters.sensor.state[stateName];\n        });\n    }\n    else {\n        // Just copy all the state values, as these have not been filtered\n        body = parameters.sensor.getHuePayload().state;\n    }\n    // Remove any parameters that we are not able to set, at least from experience at the time of writing\n    delete body.lastupdated;\n    return {\n        type: 'application/json',\n        body: body\n    };\n}\n"]},"metadata":{},"sourceType":"script"}