{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HueApiConfig = void 0;\n\nconst ApiError_1 = require(\"../ApiError\");\n\nclass HueApiConfig {\n  constructor(config, transport, remoteApi) {\n    this._config = config;\n    this._remoteApi = remoteApi;\n    this._transport = transport;\n    this._isRemote = !!config.remote && remoteApi != undefined;\n  }\n  /**\n   * Is the connection to the hue bridge remote.\n   */\n\n\n  get isRemote() {\n    return this._isRemote;\n  }\n  /**\n   * Gets the transport implementation that is used to connect with the Hue Bridge\n   */\n\n\n  get transport() {\n    return this._transport;\n  }\n  /**\n   * Gets the remote API in use that was used to bootstrap the remote connection.\n   * @throws ApiError if the connection is local network.\n   */\n\n\n  get remote() {\n    if (this.isRemote) {\n      // @ts-ignore\n      return this._remoteApi;\n    } else {\n      throw new ApiError_1.ApiError('This API has not been set up as a remote API');\n    }\n  }\n  /**\n   * Gets the current username used to connect/interact with the Hue Bridge.\n   */\n\n\n  get username() {\n    return this._config.username;\n  }\n  /**\n   * Gets the client id for the remote OAuth connection.\n   * @throws ApiError if the connection is not remote.\n   */\n\n\n  get clientId() {\n    this._requireRemote(); // @ts-ignore\n\n\n    return this._config.clientId;\n  }\n  /**\n   * Gets the client secret for the remote OAuth connection.\n   * @throws ApiError if the connection is not remote.\n   */\n\n\n  get clientSecret() {\n    this._requireRemote();\n\n    return this._config.clientSecret;\n  }\n  /**\n   * The Base URL for communication with the bridge.\n   * @returns The base URL for the hue bridge.\n   */\n\n\n  get baseUrl() {\n    return this._config.baseUrl;\n  }\n  /**\n   * Gets the name of the hue bridge.\n   * @returns string The name for the bridge.\n   */\n\n\n  get bridgeName() {\n    return this._config.bridgeName;\n  }\n  /**\n   * Gets the client key for the entertainment API/streaming endpoints\n   * @throws ApiError if the connection is not local network.\n   */\n\n\n  get clientKey() {\n    this._requireLocal();\n\n    return this._config.clientKey;\n  }\n  /**\n   * Gets the current access token.\n   * @returns {String}\n   * @throws ApiError if the connection is not remote.\n   */\n\n\n  get accessToken() {\n    return this.getRequiredRemote().accessToken;\n  }\n  /**\n   * Gets the expiry timestamp of the access token.\n   * @returns {number} The timestamp for the expiry or -1 if not known\n   */\n\n\n  get accessTokenExpiry() {\n    return this.getRequiredRemote().accessTokenExpiry;\n  }\n  /**\n   * Gets the current refresh token.\n   * @throws ApiError if the connection is not remote.\n   */\n\n\n  get refreshToken() {\n    return this.getRequiredRemote().refreshToken;\n  }\n  /**\n   * Gets the expiry timestamp of the refresh token.\n   * @returns {number} The timestamp for the expiry or -1 if not known\n   */\n\n\n  get refreshTokenExpiry() {\n    return this.getRequiredRemote().refreshTokenExpiry;\n  }\n\n  getRequiredRemote() {\n    this._requireRemote(); // The above call will throw an error if we are not remote\n\n\n    return this._remoteApi;\n  }\n\n  _requireRemote() {\n    if (!this.isRemote) {\n      throw new ApiError_1.ApiError('The function is only valid on a remote Hue API instance');\n    }\n  }\n\n  _requireLocal() {\n    if (this.isRemote) {\n      throw new ApiError_1.ApiError('The function is only valid on a local Hue API instance');\n    }\n  }\n\n}\n\nexports.HueApiConfig = HueApiConfig;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/HueApiConfig.js"],"names":["Object","defineProperty","exports","value","HueApiConfig","ApiError_1","require","constructor","config","transport","remoteApi","_config","_remoteApi","_transport","_isRemote","remote","undefined","isRemote","ApiError","username","clientId","_requireRemote","clientSecret","baseUrl","bridgeName","clientKey","_requireLocal","accessToken","getRequiredRemote","accessTokenExpiry","refreshToken","refreshTokenExpiry"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMF,YAAN,CAAmB;AACfG,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoBC,SAApB,EAA+B;AACtC,SAAKC,OAAL,GAAeH,MAAf;AACA,SAAKI,UAAL,GAAkBF,SAAlB;AACA,SAAKG,UAAL,GAAkBJ,SAAlB;AACA,SAAKK,SAAL,GAAiB,CAAC,CAACN,MAAM,CAACO,MAAT,IAAmBL,SAAS,IAAIM,SAAjD;AACH;AACD;AACJ;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKH,SAAZ;AACH;AACD;AACJ;AACA;;;AACiB,MAATL,SAAS,GAAG;AACZ,WAAO,KAAKI,UAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACc,MAANE,MAAM,GAAG;AACT,QAAI,KAAKE,QAAT,EAAmB;AACf;AACA,aAAO,KAAKL,UAAZ;AACH,KAHD,MAIK;AACD,YAAM,IAAIP,UAAU,CAACa,QAAf,CAAwB,8CAAxB,CAAN;AACH;AACJ;AACD;AACJ;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKR,OAAL,CAAaQ,QAApB;AACH;AACD;AACJ;AACA;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,SAAKC,cAAL,GADW,CAEX;;;AACA,WAAO,KAAKV,OAAL,CAAaS,QAApB;AACH;AACD;AACJ;AACA;AACA;;;AACoB,MAAZE,YAAY,GAAG;AACf,SAAKD,cAAL;;AACA,WAAO,KAAKV,OAAL,CAAaW,YAApB;AACH;AACD;AACJ;AACA;AACA;;;AACe,MAAPC,OAAO,GAAG;AACV,WAAO,KAAKZ,OAAL,CAAaY,OAApB;AACH;AACD;AACJ;AACA;AACA;;;AACkB,MAAVC,UAAU,GAAG;AACb,WAAO,KAAKb,OAAL,CAAaa,UAApB;AACH;AACD;AACJ;AACA;AACA;;;AACiB,MAATC,SAAS,GAAG;AACZ,SAAKC,aAAL;;AACA,WAAO,KAAKf,OAAL,CAAac,SAApB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACmB,MAAXE,WAAW,GAAG;AACd,WAAO,KAAKC,iBAAL,GAAyBD,WAAhC;AACH;AACD;AACJ;AACA;AACA;;;AACyB,MAAjBE,iBAAiB,GAAG;AACpB,WAAO,KAAKD,iBAAL,GAAyBC,iBAAhC;AACH;AACD;AACJ;AACA;AACA;;;AACoB,MAAZC,YAAY,GAAG;AACf,WAAO,KAAKF,iBAAL,GAAyBE,YAAhC;AACH;AACD;AACJ;AACA;AACA;;;AAC0B,MAAlBC,kBAAkB,GAAG;AACrB,WAAO,KAAKH,iBAAL,GAAyBG,kBAAhC;AACH;;AACDH,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,cAAL,GADgB,CAEhB;;;AACA,WAAO,KAAKT,UAAZ;AACH;;AACDS,EAAAA,cAAc,GAAG;AACb,QAAI,CAAC,KAAKJ,QAAV,EAAoB;AAChB,YAAM,IAAIZ,UAAU,CAACa,QAAf,CAAwB,yDAAxB,CAAN;AACH;AACJ;;AACDQ,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKT,QAAT,EAAmB;AACf,YAAM,IAAIZ,UAAU,CAACa,QAAf,CAAwB,wDAAxB,CAAN;AACH;AACJ;;AAxHc;;AA0HnBhB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HueApiConfig = void 0;\nconst ApiError_1 = require(\"../ApiError\");\nclass HueApiConfig {\n    constructor(config, transport, remoteApi) {\n        this._config = config;\n        this._remoteApi = remoteApi;\n        this._transport = transport;\n        this._isRemote = !!config.remote && remoteApi != undefined;\n    }\n    /**\n     * Is the connection to the hue bridge remote.\n     */\n    get isRemote() {\n        return this._isRemote;\n    }\n    /**\n     * Gets the transport implementation that is used to connect with the Hue Bridge\n     */\n    get transport() {\n        return this._transport;\n    }\n    /**\n     * Gets the remote API in use that was used to bootstrap the remote connection.\n     * @throws ApiError if the connection is local network.\n     */\n    get remote() {\n        if (this.isRemote) {\n            // @ts-ignore\n            return this._remoteApi;\n        }\n        else {\n            throw new ApiError_1.ApiError('This API has not been set up as a remote API');\n        }\n    }\n    /**\n     * Gets the current username used to connect/interact with the Hue Bridge.\n     */\n    get username() {\n        return this._config.username;\n    }\n    /**\n     * Gets the client id for the remote OAuth connection.\n     * @throws ApiError if the connection is not remote.\n     */\n    get clientId() {\n        this._requireRemote();\n        // @ts-ignore\n        return this._config.clientId;\n    }\n    /**\n     * Gets the client secret for the remote OAuth connection.\n     * @throws ApiError if the connection is not remote.\n     */\n    get clientSecret() {\n        this._requireRemote();\n        return this._config.clientSecret;\n    }\n    /**\n     * The Base URL for communication with the bridge.\n     * @returns The base URL for the hue bridge.\n     */\n    get baseUrl() {\n        return this._config.baseUrl;\n    }\n    /**\n     * Gets the name of the hue bridge.\n     * @returns string The name for the bridge.\n     */\n    get bridgeName() {\n        return this._config.bridgeName;\n    }\n    /**\n     * Gets the client key for the entertainment API/streaming endpoints\n     * @throws ApiError if the connection is not local network.\n     */\n    get clientKey() {\n        this._requireLocal();\n        return this._config.clientKey;\n    }\n    /**\n     * Gets the current access token.\n     * @returns {String}\n     * @throws ApiError if the connection is not remote.\n     */\n    get accessToken() {\n        return this.getRequiredRemote().accessToken;\n    }\n    /**\n     * Gets the expiry timestamp of the access token.\n     * @returns {number} The timestamp for the expiry or -1 if not known\n     */\n    get accessTokenExpiry() {\n        return this.getRequiredRemote().accessTokenExpiry;\n    }\n    /**\n     * Gets the current refresh token.\n     * @throws ApiError if the connection is not remote.\n     */\n    get refreshToken() {\n        return this.getRequiredRemote().refreshToken;\n    }\n    /**\n     * Gets the expiry timestamp of the refresh token.\n     * @returns {number} The timestamp for the expiry or -1 if not known\n     */\n    get refreshTokenExpiry() {\n        return this.getRequiredRemote().refreshTokenExpiry;\n    }\n    getRequiredRemote() {\n        this._requireRemote();\n        // The above call will throw an error if we are not remote\n        return this._remoteApi;\n    }\n    _requireRemote() {\n        if (!this.isRemote) {\n            throw new ApiError_1.ApiError('The function is only valid on a remote Hue API instance');\n        }\n    }\n    _requireLocal() {\n        if (this.isRemote) {\n            throw new ApiError_1.ApiError('The function is only valid on a local Hue API instance');\n        }\n    }\n}\nexports.HueApiConfig = HueApiConfig;\n"]},"metadata":{},"sourceType":"script"}