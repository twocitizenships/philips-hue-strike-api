{"ast":null,"code":"// All the valid resource types that the Hue API documentation provides\nimport { BridgeObjectWithId } from './BridgeObjectWithId';\nimport { BooleanType, ChoiceType, StringType, UInt16Type } from '../types';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nconst VALID_RESOURCELINK_TYPES = ['lights', 'sensors', 'groups', 'scenes', 'rules', 'schedules', 'resourcelinks'];\nconst ATTRIBUTES = [new UInt16Type({\n  name: 'id'\n}), new StringType({\n  name: 'name',\n  minLength: 1,\n  maxLength: 32\n}), new StringType({\n  name: 'description',\n  minLength: 0,\n  maxLength: 64\n}), new ChoiceType({\n  name: 'type',\n  validValues: ['Link'],\n  defaultValue: 'Link'\n}), new UInt16Type({\n  name: 'classid'\n}), new StringType({\n  name: 'owner'\n}), new BooleanType({\n  name: 'recycle'\n}) // links: //TODO too complex as these are not stored in bridge format\n];\nexport class ResourceLink extends BridgeObjectWithId {\n  constructor(id) {\n    super(ATTRIBUTES, id);\n    this._links = {};\n  }\n\n  set name(value) {\n    this.setAttributeValue('name', value);\n  }\n\n  get name() {\n    return this.getAttributeValue('name');\n  }\n\n  get description() {\n    return this.getAttributeValue('description');\n  }\n\n  set description(value) {\n    this.setAttributeValue('description', value);\n  }\n\n  get type() {\n    return this.getAttributeValue('type');\n  }\n\n  get classid() {\n    return this.getAttributeValue('classid');\n  }\n\n  set classid(value) {\n    this.setAttributeValue('classid', value);\n  }\n\n  get owner() {\n    return this.getAttributeValue('owner');\n  }\n\n  get recycle() {\n    return this.getAttributeValue('recycle');\n  }\n\n  set recycle(value) {\n    this.setAttributeValue('recycle', value);\n  }\n\n  get links() {\n    // Prevent editing of the link representation\n    return Object.assign({}, this._links);\n  }\n\n  resetLinks() {\n    this._links = {};\n    return this;\n  }\n\n  addLink(type, id) {\n    const links = this._links,\n          validatedLinkType = validateLinkType(type);\n\n    if (!links[validatedLinkType]) {\n      links[validatedLinkType] = [];\n    }\n\n    links[validatedLinkType].push(id);\n    return this;\n  }\n\n  removeLink(type, id) {\n    const links = this._links,\n          validatedLinkType = validateLinkType(type),\n          linkType = links[validatedLinkType];\n\n    if (linkType) {\n      const idx = linkType.indexOf(`${id}`);\n\n      if (idx > -1) {\n        linkType.splice(idx, 1);\n      }\n    }\n\n    return this;\n  }\n\n  toStringDetailed() {\n    let result = super.toStringDetailed();\n    const links = this.links;\n    result += `\\n  links: ${JSON.stringify(links)}`;\n    return result;\n  }\n\n  getJsonPayload() {\n    const dataLinks = this.links,\n          data = super.getJsonPayload(); // Add the links to the object\n\n    data['links'] = JSON.parse(JSON.stringify(dataLinks));\n    return data;\n  }\n\n  getHuePayload() {\n    const data = super.getHuePayload(),\n          resourceLinkLinks = this.links,\n          links = []; // Convert the links back into the Hue Bride address form\n\n    Object.keys(resourceLinkLinks).forEach(resource => {\n      const resourceIds = resourceLinkLinks[resource];\n\n      if (resourceIds) {\n        resourceIds.forEach(resourceId => {\n          links.push(`/${resource}/${resourceId}`);\n        });\n      }\n    });\n    data['links'] = links;\n    return data;\n  }\n\n  _populate(data) {\n    // Links are taken apart and separated out from the data\n    const rawData = Object.assign({}, data);\n    const linkData = rawData.links;\n    delete rawData.links;\n\n    super._populate(rawData);\n\n    this._links = processLinks(linkData);\n    return this;\n  }\n\n}\n;\n\nfunction processLinks(linkData) {\n  const result = {};\n\n  if (linkData) {\n    // This is the correct format for the bridge data\n    if (Array.isArray(linkData)) {\n      linkData.forEach(link => {\n        const parts = /\\/(.*)\\/(.*)/.exec(link);\n\n        if (parts) {\n          const linkType = parts[1],\n                linkId = parts[2],\n                validatedLinkType = validateLinkType(linkType);\n          let links = result[validatedLinkType];\n\n          if (!links) {\n            links = [];\n            result[validatedLinkType] = links;\n          }\n\n          links.push(linkId);\n        }\n      });\n    } else {\n      // We end up here if deserializing our own copy of a resource link\n      Object.keys(linkData).forEach(key => {\n        const validatedLinkType = validateLinkType(key);\n        result[validatedLinkType] = linkData[key];\n      });\n    }\n  }\n\n  return result;\n}\n\nfunction validateLinkType(type) {\n  if (!type) {\n    throw new HueBridgeModelError('A ResourceLink Type must be provided');\n  }\n\n  const typeLowerCase = type.toLowerCase(),\n        idx = VALID_RESOURCELINK_TYPES.indexOf(typeLowerCase);\n\n  if (idx === -1) {\n    throw new HueBridgeModelError(`Invalid resource link type ${type}`);\n  }\n\n  return typeLowerCase;\n}","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/@peter-murray/hue-bridge-model/dist/esm/model/ResourceLink.js"],"names":["BridgeObjectWithId","BooleanType","ChoiceType","StringType","UInt16Type","HueBridgeModelError","VALID_RESOURCELINK_TYPES","ATTRIBUTES","name","minLength","maxLength","validValues","defaultValue","ResourceLink","constructor","id","_links","value","setAttributeValue","getAttributeValue","description","type","classid","owner","recycle","links","Object","assign","resetLinks","addLink","validatedLinkType","validateLinkType","push","removeLink","linkType","idx","indexOf","splice","toStringDetailed","result","JSON","stringify","getJsonPayload","dataLinks","data","parse","getHuePayload","resourceLinkLinks","keys","forEach","resource","resourceIds","resourceId","_populate","rawData","linkData","processLinks","Array","isArray","link","parts","exec","linkId","key","typeLowerCase","toLowerCase"],"mappings":"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","sourcesContent":["// All the valid resource types that the Hue API documentation provides\nimport { BridgeObjectWithId } from './BridgeObjectWithId';\nimport { BooleanType, ChoiceType, StringType, UInt16Type } from '../types';\nimport { HueBridgeModelError } from '../HueBridgeModelError';\nconst VALID_RESOURCELINK_TYPES = [\n    'lights',\n    'sensors',\n    'groups',\n    'scenes',\n    'rules',\n    'schedules',\n    'resourcelinks',\n];\nconst ATTRIBUTES = [\n    new UInt16Type({ name: 'id' }),\n    new StringType({ name: 'name', minLength: 1, maxLength: 32 }),\n    new StringType({ name: 'description', minLength: 0, maxLength: 64 }),\n    new ChoiceType({ name: 'type', validValues: ['Link'], defaultValue: 'Link' }),\n    new UInt16Type({ name: 'classid' }),\n    new StringType({ name: 'owner' }),\n    new BooleanType({ name: 'recycle' }),\n    // links: //TODO too complex as these are not stored in bridge format\n];\nexport class ResourceLink extends BridgeObjectWithId {\n    constructor(id) {\n        super(ATTRIBUTES, id);\n        this._links = {};\n    }\n    set name(value) {\n        this.setAttributeValue('name', value);\n    }\n    get name() {\n        return this.getAttributeValue('name');\n    }\n    get description() {\n        return this.getAttributeValue('description');\n    }\n    set description(value) {\n        this.setAttributeValue('description', value);\n    }\n    get type() {\n        return this.getAttributeValue('type');\n    }\n    get classid() {\n        return this.getAttributeValue('classid');\n    }\n    set classid(value) {\n        this.setAttributeValue('classid', value);\n    }\n    get owner() {\n        return this.getAttributeValue('owner');\n    }\n    get recycle() {\n        return this.getAttributeValue('recycle');\n    }\n    set recycle(value) {\n        this.setAttributeValue('recycle', value);\n    }\n    get links() {\n        // Prevent editing of the link representation\n        return Object.assign({}, this._links);\n    }\n    resetLinks() {\n        this._links = {};\n        return this;\n    }\n    addLink(type, id) {\n        const links = this._links, validatedLinkType = validateLinkType(type);\n        if (!links[validatedLinkType]) {\n            links[validatedLinkType] = [];\n        }\n        links[validatedLinkType].push(id);\n        return this;\n    }\n    removeLink(type, id) {\n        const links = this._links, validatedLinkType = validateLinkType(type), linkType = links[validatedLinkType];\n        if (linkType) {\n            const idx = linkType.indexOf(`${id}`);\n            if (idx > -1) {\n                linkType.splice(idx, 1);\n            }\n        }\n        return this;\n    }\n    toStringDetailed() {\n        let result = super.toStringDetailed();\n        const links = this.links;\n        result += `\\n  links: ${JSON.stringify(links)}`;\n        return result;\n    }\n    getJsonPayload() {\n        const dataLinks = this.links, data = super.getJsonPayload();\n        // Add the links to the object\n        data['links'] = JSON.parse(JSON.stringify(dataLinks));\n        return data;\n    }\n    getHuePayload() {\n        const data = super.getHuePayload(), resourceLinkLinks = this.links, links = [];\n        // Convert the links back into the Hue Bride address form\n        Object.keys(resourceLinkLinks).forEach(resource => {\n            const resourceIds = resourceLinkLinks[resource];\n            if (resourceIds) {\n                resourceIds.forEach(resourceId => {\n                    links.push(`/${resource}/${resourceId}`);\n                });\n            }\n        });\n        data['links'] = links;\n        return data;\n    }\n    _populate(data) {\n        // Links are taken apart and separated out from the data\n        const rawData = Object.assign({}, data);\n        const linkData = rawData.links;\n        delete rawData.links;\n        super._populate(rawData);\n        this._links = processLinks(linkData);\n        return this;\n    }\n}\n;\nfunction processLinks(linkData) {\n    const result = {};\n    if (linkData) {\n        // This is the correct format for the bridge data\n        if (Array.isArray(linkData)) {\n            linkData.forEach(link => {\n                const parts = /\\/(.*)\\/(.*)/.exec(link);\n                if (parts) {\n                    const linkType = parts[1], linkId = parts[2], validatedLinkType = validateLinkType(linkType);\n                    let links = result[validatedLinkType];\n                    if (!links) {\n                        links = [];\n                        result[validatedLinkType] = links;\n                    }\n                    links.push(linkId);\n                }\n            });\n        }\n        else {\n            // We end up here if deserializing our own copy of a resource link\n            Object.keys(linkData).forEach(key => {\n                const validatedLinkType = validateLinkType(key);\n                result[validatedLinkType] = linkData[key];\n            });\n        }\n    }\n    return result;\n}\nfunction validateLinkType(type) {\n    if (!type) {\n        throw new HueBridgeModelError('A ResourceLink Type must be provided');\n    }\n    const typeLowerCase = type.toLowerCase(), idx = VALID_RESOURCELINK_TYPES.indexOf(typeLowerCase);\n    if (idx === -1) {\n        throw new HueBridgeModelError(`Invalid resource link type ${type}`);\n    }\n    return typeLowerCase;\n}\n"]},"metadata":{},"sourceType":"module"}