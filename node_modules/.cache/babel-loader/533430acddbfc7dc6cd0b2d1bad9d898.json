{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Placeholder = void 0;\n\nconst ApiError_1 = require(\"../../ApiError\");\n\nclass Placeholder {\n  constructor(type, defaultName, name) {\n    this._name = name || defaultName;\n    this._type = type;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get typeDefinition() {\n    return this._type;\n  }\n\n  set typeDefinition(type) {\n    this._type = type;\n  }\n\n  inject(uri, parameters) {\n    const placeholderText = `<${this.name}>`;\n\n    if (uri.indexOf(placeholderText) > -1) {\n      return uri.replace(placeholderText, this.getValue(parameters));\n    }\n\n    return uri;\n  }\n\n  getValue(parameters) {\n    const typeDefinition = this.typeDefinition;\n\n    if (!typeDefinition) {\n      throw new ApiError_1.ApiError('No type definition has been specified for placeholder');\n    }\n\n    const parameter = parameters ? parameters[this.name] : undefined;\n\n    const value = this._getParameterValue(parameter);\n\n    return typeDefinition.getValue(value);\n  }\n\n  _getParameterValue(parameter) {\n    return parameter;\n  }\n\n  toString() {\n    const type = this.typeDefinition;\n    return `${this.name}: { type:${type.type}, optional:${type.optional}, defaultValue:${type.defaultValue} }`;\n  }\n\n}\n\nexports.Placeholder = Placeholder;","map":{"version":3,"sources":["/Users/clusk/Documents/OtherRepositories/StrikeElectric/node_modules/node-hue-api/dist/cjs/api/placeholders/Placeholder.js"],"names":["Object","defineProperty","exports","value","Placeholder","ApiError_1","require","constructor","type","defaultName","name","_name","_type","typeDefinition","inject","uri","parameters","placeholderText","indexOf","replace","getValue","ApiError","parameter","undefined","_getParameterValue","toString","optional","defaultValue"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,MAAMF,WAAN,CAAkB;AACdG,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoBC,IAApB,EAA0B;AACjC,SAAKC,KAAL,GAAaD,IAAI,IAAID,WAArB;AACA,SAAKG,KAAL,GAAaJ,IAAb;AACH;;AACO,MAAJE,IAAI,GAAG;AACP,WAAO,KAAKC,KAAZ;AACH;;AACiB,MAAdE,cAAc,GAAG;AACjB,WAAO,KAAKD,KAAZ;AACH;;AACiB,MAAdC,cAAc,CAACL,IAAD,EAAO;AACrB,SAAKI,KAAL,GAAaJ,IAAb;AACH;;AACDM,EAAAA,MAAM,CAACC,GAAD,EAAMC,UAAN,EAAkB;AACpB,UAAMC,eAAe,GAAI,IAAG,KAAKP,IAAK,GAAtC;;AACA,QAAIK,GAAG,CAACG,OAAJ,CAAYD,eAAZ,IAA+B,CAAC,CAApC,EAAuC;AACnC,aAAOF,GAAG,CAACI,OAAJ,CAAYF,eAAZ,EAA6B,KAAKG,QAAL,CAAcJ,UAAd,CAA7B,CAAP;AACH;;AACD,WAAOD,GAAP;AACH;;AACDK,EAAAA,QAAQ,CAACJ,UAAD,EAAa;AACjB,UAAMH,cAAc,GAAG,KAAKA,cAA5B;;AACA,QAAI,CAACA,cAAL,EAAqB;AACjB,YAAM,IAAIR,UAAU,CAACgB,QAAf,CAAwB,uDAAxB,CAAN;AACH;;AACD,UAAMC,SAAS,GAAGN,UAAU,GAAGA,UAAU,CAAC,KAAKN,IAAN,CAAb,GAA2Ba,SAAvD;;AACA,UAAMpB,KAAK,GAAG,KAAKqB,kBAAL,CAAwBF,SAAxB,CAAd;;AACA,WAAOT,cAAc,CAACO,QAAf,CAAwBjB,KAAxB,CAAP;AACH;;AACDqB,EAAAA,kBAAkB,CAACF,SAAD,EAAY;AAC1B,WAAOA,SAAP;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP,UAAMjB,IAAI,GAAG,KAAKK,cAAlB;AACA,WAAQ,GAAE,KAAKH,IAAK,YAAWF,IAAI,CAACA,IAAK,cAAaA,IAAI,CAACkB,QAAS,kBAAiBlB,IAAI,CAACmB,YAAa,IAAvG;AACH;;AApCa;;AAsClBzB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Placeholder = void 0;\nconst ApiError_1 = require(\"../../ApiError\");\nclass Placeholder {\n    constructor(type, defaultName, name) {\n        this._name = name || defaultName;\n        this._type = type;\n    }\n    get name() {\n        return this._name;\n    }\n    get typeDefinition() {\n        return this._type;\n    }\n    set typeDefinition(type) {\n        this._type = type;\n    }\n    inject(uri, parameters) {\n        const placeholderText = `<${this.name}>`;\n        if (uri.indexOf(placeholderText) > -1) {\n            return uri.replace(placeholderText, this.getValue(parameters));\n        }\n        return uri;\n    }\n    getValue(parameters) {\n        const typeDefinition = this.typeDefinition;\n        if (!typeDefinition) {\n            throw new ApiError_1.ApiError('No type definition has been specified for placeholder');\n        }\n        const parameter = parameters ? parameters[this.name] : undefined;\n        const value = this._getParameterValue(parameter);\n        return typeDefinition.getValue(value);\n    }\n    _getParameterValue(parameter) {\n        return parameter;\n    }\n    toString() {\n        const type = this.typeDefinition;\n        return `${this.name}: { type:${type.type}, optional:${type.optional}, defaultValue:${type.defaultValue} }`;\n    }\n}\nexports.Placeholder = Placeholder;\n"]},"metadata":{},"sourceType":"script"}